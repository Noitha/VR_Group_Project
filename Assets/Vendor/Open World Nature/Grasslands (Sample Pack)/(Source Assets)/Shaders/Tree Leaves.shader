Shader "Universal Render Pipeline/Open World Nature/Tree Leaves"
{
    Properties
    {
        _AlphaClipThreshold("Alpha Clip ", Range(0, 1)) = 0.25
_Hue("Hue ", Range(-0.5, 0.5)) = 0
_Saturation("Saturation ", Range(-1, 1)) = 0
_Lightness("Lightness ", Range(-1, 1)) = 0
[NoScaleOffset] _Albedo("Albedo", 2D) = "white" {}
[NoScaleOffset] _BumpMap("BumpMap", 2D) = "bump" {}
[NoScaleOffset] _MaskMap("MaskMap", 2D) = "white" {}
[NoScaleOffset] _ThicknessMap("Thickness", 2D) = "white" {}
_StiffnessVariation("StiffnessVariation ", Range(0, 1)) = 0.3
_WindDirectionAndStrength("WindDirectionAndStrength", Vector) = (1,1,1,1)
_Shiver("Shiver", Vector) = (1,1,0,0)
[ToggleUI] _BAKEDMASK_ON("BakedMaskOn", Float) = 1
[ToggleUI] _UVMASK_ON("UvMaskOn", Float) = 0
[ToggleUI] _VERTEXPOSITIONMASK_ON("VertexPositionMaskOn", Float) = 0

    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="UniversalPipeline"
            "RenderType"="Opaque"
            "Queue"="Geometry+0"
        }
        Pass
        {
        	Tags{"LightMode" = "UniversalForward"}

        	// Material options generated by graph

            Blend One Zero, One Zero

            Cull Off

            ZTest LEqual

            ZWrite On

        	HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

        	// -------------------------------------
            // Universal Pipeline keywords
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
            #pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
            #pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
            #pragma multi_compile _ _SHADOWS_SOFT
            #pragma multi_compile _ _MIXED_LIGHTING_SUBTRACTIVE
            
        	// -------------------------------------
            // Unity defined keywords
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile_fog

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex vert
        	#pragma fragment frag

        	// Defines generated by graph
            #define _NORMALMAP 1
            #define _AlphaClip 1

        	#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
        	#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
        	#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float _AlphaClipThreshold;
            float _Hue;
            float _Saturation;
            float _Lightness;
            float _StiffnessVariation;
            float4 _WindDirectionAndStrength;
            float4 _Shiver;
            float _BAKEDMASK_ON;
            float _UVMASK_ON;
            float _VERTEXPOSITIONMASK_ON;
            CBUFFER_END

            TEXTURE2D(_Albedo); SAMPLER(sampler_Albedo); float4 _Albedo_TexelSize;
            TEXTURE2D(_BumpMap); SAMPLER(sampler_BumpMap); float4 _BumpMap_TexelSize;
            TEXTURE2D(_MaskMap); SAMPLER(sampler_MaskMap); float4 _MaskMap_TexelSize;
            TEXTURE2D(_ThicknessMap); SAMPLER(sampler_ThicknessMap); float4 _ThicknessMap_TexelSize;
            float4 _GlobalWindDirectionAndStrength;
            float4 _GlobalShiver;
            TEXTURE2D(_ShiverNoise); SAMPLER(sampler_ShiverNoise); float4 _ShiverNoise_TexelSize;
            TEXTURE2D(_GustNoise); SAMPLER(sampler_GustNoise); float4 _GustNoise_TexelSize;
            struct VertexDescriptionInputs
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceTangent;
                float3 WorldSpaceBiTangent;
                float3 ObjectSpacePosition;
                float3 WorldSpacePosition;
                float4 VertexColor;
                half4 uv0;
                half4 uv1;
                float3 TimeParameters;
            };

            struct SurfaceDescriptionInputs
            {
                half4 uv0;
            };


            struct Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238
            {
            };

            void SG_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238(Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238 IN, out float3 PivotInWS)
            {
                PivotInWS = SHADERGRAPH_OBJECT_POSITION;
            }

            void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
            {
                Out = lerp(A, B, T);
            }

            void Unity_Multiply_float (float4 A, float4 B, out float4 Out)
            {
                Out = A * B;
            }

            void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
            {
                RGBA = float4(R, G, B, A);
                RGB = float3(R, G, B);
                RG = float2(R, G);
            }

            void Unity_Length_float3(float3 In, out float Out)
            {
                Out = length(In);
            }

            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_Clamp_float(float In, float Min, float Max, out float Out)
            {
                Out = clamp(In, Min, Max);
            }

            void Unity_Normalize_float3(float3 In, out float3 Out)
            {
                Out = normalize(In);
            }

            void Unity_Maximum_float(float A, float B, out float Out)
            {
                Out = max(A, B);
            }

            void Unity_Multiply_float (float2 A, float2 B, out float2 Out)
            {
                Out = A * B;
            }

            void Unity_Maximum_float2(float2 A, float2 B, out float2 Out)
            {
                Out = max(A, B);
            }

            struct Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7
            {
            };

            void SG_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7(float4 Vector4_14B5A446, float4 Vector4_6887180D, float2 Vector2_F270B07E, float2 Vector2_70BD0D1B, Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7 IN, out float3 GustDirection, out float GustSpeed, out float GustStrength, out float ShiverSpeed, out float ShiverStrength)
            {
                float3 _Vector3_E24D7903_Out_0 = float3(0.7, 0, 0.3);
                float4 _Property_95651D48_Out_0 = Vector4_14B5A446;
                float4 _Property_FFEF34C6_Out_0 = Vector4_6887180D;
                float4 _Multiply_7F93D556_Out_2;
                Unity_Multiply_float(_Property_95651D48_Out_0, _Property_FFEF34C6_Out_0, _Multiply_7F93D556_Out_2);
                float _Split_1A6C2849_R_1 = _Multiply_7F93D556_Out_2[0];
                float _Split_1A6C2849_G_2 = _Multiply_7F93D556_Out_2[1];
                float _Split_1A6C2849_B_3 = _Multiply_7F93D556_Out_2[2];
                float _Split_1A6C2849_A_4 = _Multiply_7F93D556_Out_2[3];
                float4 _Combine_769EB158_RGBA_4;
                float3 _Combine_769EB158_RGB_5;
                float2 _Combine_769EB158_RG_6;
                Unity_Combine_float(_Split_1A6C2849_R_1, 0, _Split_1A6C2849_G_2, 0, _Combine_769EB158_RGBA_4, _Combine_769EB158_RGB_5, _Combine_769EB158_RG_6);
                float _Length_62815FED_Out_1;
                Unity_Length_float3(_Combine_769EB158_RGB_5, _Length_62815FED_Out_1);
                float _Multiply_A4A39D4F_Out_2;
                Unity_Multiply_float(_Length_62815FED_Out_1, 1000, _Multiply_A4A39D4F_Out_2);
                float _Clamp_4B28219D_Out_3;
                Unity_Clamp_float(_Multiply_A4A39D4F_Out_2, 0, 1, _Clamp_4B28219D_Out_3);
                float3 _Lerp_66854A50_Out_3;
                Unity_Lerp_float3(_Vector3_E24D7903_Out_0, _Combine_769EB158_RGB_5, (_Clamp_4B28219D_Out_3.xxx), _Lerp_66854A50_Out_3);
                float3 _Normalize_B2778668_Out_1;
                Unity_Normalize_float3(_Lerp_66854A50_Out_3, _Normalize_B2778668_Out_1);
                float _Maximum_A3AFA1AB_Out_2;
                Unity_Maximum_float(_Split_1A6C2849_B_3, 0.01, _Maximum_A3AFA1AB_Out_2);
                float _Maximum_FCE0058_Out_2;
                Unity_Maximum_float(0, _Split_1A6C2849_A_4, _Maximum_FCE0058_Out_2);
                float2 _Property_F062BDE_Out_0 = Vector2_F270B07E;
                float2 _Property_FB73C895_Out_0 = Vector2_70BD0D1B;
                float2 _Multiply_76AC0593_Out_2;
                Unity_Multiply_float(_Property_F062BDE_Out_0, _Property_FB73C895_Out_0, _Multiply_76AC0593_Out_2);
                float2 _Maximum_E318FF04_Out_2;
                Unity_Maximum_float2(_Multiply_76AC0593_Out_2, float2(0.01, 0.01), _Maximum_E318FF04_Out_2);
                float _Split_F437A5E0_R_1 = _Maximum_E318FF04_Out_2[0];
                float _Split_F437A5E0_G_2 = _Maximum_E318FF04_Out_2[1];
                float _Split_F437A5E0_B_3 = 0;
                float _Split_F437A5E0_A_4 = 0;
                GustDirection = _Normalize_B2778668_Out_1;
                GustSpeed = _Maximum_A3AFA1AB_Out_2;
                GustStrength = _Maximum_FCE0058_Out_2;
                ShiverSpeed = _Split_F437A5E0_R_1;
                ShiverStrength = _Split_F437A5E0_G_2;
            }

            void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A - B;
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_Fraction_float(float In, out float Out)
            {
                Out = frac(In);
            }

            void Unity_Branch_float(float Predicate, float True, float False, out float Out)
            {
                Out = lerp(False, True, Predicate);
            }

            void Unity_Add_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A + B;
            }

            void Unity_Subtract_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A - B;
            }

            struct Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f
            {
            };

            void SG_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f(float Vector1_CCF53CDA, float Vector1_D95E40FE, float2 Vector2_AEE18C41, float2 Vector2_A9CE092C, float Vector1_F2ED6CCC, TEXTURE2D_PARAM(Texture2D_F14459DD, samplerTexture2D_F14459DD), Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f IN, out float GustNoise)
            {
                float2 _Property_A92CC1B7_Out_0 = Vector2_AEE18C41;
                float _Property_36B40CE_Out_0 = Vector1_D95E40FE;
                float _Multiply_9E28D3C4_Out_2;
                Unity_Multiply_float(_Property_36B40CE_Out_0, 2, _Multiply_9E28D3C4_Out_2);
                float2 _Add_C54F05FE_Out_2;
                Unity_Add_float2(_Property_A92CC1B7_Out_0, (_Multiply_9E28D3C4_Out_2.xx), _Add_C54F05FE_Out_2);
                float2 _Multiply_9CD1691E_Out_2;
                Unity_Multiply_float(_Add_C54F05FE_Out_2, float2(0.01, 0.01), _Multiply_9CD1691E_Out_2);
                float2 _Property_D05D9ECB_Out_0 = Vector2_A9CE092C;
                float _Property_8BFC9AA2_Out_0 = Vector1_CCF53CDA;
                float2 _Multiply_462DF694_Out_2;
                Unity_Multiply_float(_Property_D05D9ECB_Out_0, (_Property_8BFC9AA2_Out_0.xx), _Multiply_462DF694_Out_2);
                float _Property_4DB65C54_Out_0 = Vector1_F2ED6CCC;
                float2 _Multiply_50FD4B48_Out_2;
                Unity_Multiply_float(_Multiply_462DF694_Out_2, (_Property_4DB65C54_Out_0.xx), _Multiply_50FD4B48_Out_2);
                float2 _Subtract_B4A749C2_Out_2;
                Unity_Subtract_float2(_Multiply_9CD1691E_Out_2, _Multiply_50FD4B48_Out_2, _Subtract_B4A749C2_Out_2);
                float4 _SampleTexture2DLOD_46D09289_RGBA_0 = SAMPLE_TEXTURE2D_LOD(Texture2D_F14459DD, samplerTexture2D_F14459DD, _Subtract_B4A749C2_Out_2, 0);
                float _SampleTexture2DLOD_46D09289_R_5 = _SampleTexture2DLOD_46D09289_RGBA_0.r;
                float _SampleTexture2DLOD_46D09289_G_6 = _SampleTexture2DLOD_46D09289_RGBA_0.g;
                float _SampleTexture2DLOD_46D09289_B_7 = _SampleTexture2DLOD_46D09289_RGBA_0.b;
                float _SampleTexture2DLOD_46D09289_A_8 = _SampleTexture2DLOD_46D09289_RGBA_0.a;
                GustNoise = _SampleTexture2DLOD_46D09289_R_5;
            }

            void Unity_Power_float(float A, float B, out float Out)
            {
                Out = pow(A, B);
            }

            void Unity_OneMinus_float(float In, out float Out)
            {
                Out = 1 - In;
            }

            struct Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19
            {
            };

            void SG_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19(float2 Vector2_CA78C39A, float Vector1_279D2776, Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19 IN, out float RandomStiffness)
            {
                float2 _Property_475BFCB9_Out_0 = Vector2_CA78C39A;
                float2 _Multiply_7EE00C92_Out_2;
                Unity_Multiply_float(_Property_475BFCB9_Out_0, float2(10, 10), _Multiply_7EE00C92_Out_2);
                float _Split_A0FB144F_R_1 = _Multiply_7EE00C92_Out_2[0];
                float _Split_A0FB144F_G_2 = _Multiply_7EE00C92_Out_2[1];
                float _Split_A0FB144F_B_3 = 0;
                float _Split_A0FB144F_A_4 = 0;
                float _Multiply_2482A544_Out_2;
                Unity_Multiply_float(_Split_A0FB144F_R_1, _Split_A0FB144F_G_2, _Multiply_2482A544_Out_2);
                float _Fraction_B90029E4_Out_1;
                Unity_Fraction_float(_Multiply_2482A544_Out_2, _Fraction_B90029E4_Out_1);
                float _Power_E2B2B095_Out_2;
                Unity_Power_float(_Fraction_B90029E4_Out_1, 2, _Power_E2B2B095_Out_2);
                float _Property_91226CD6_Out_0 = Vector1_279D2776;
                float _OneMinus_A56B8867_Out_1;
                Unity_OneMinus_float(_Property_91226CD6_Out_0, _OneMinus_A56B8867_Out_1);
                float _Clamp_E85434A6_Out_3;
                Unity_Clamp_float(_Power_E2B2B095_Out_2, _OneMinus_A56B8867_Out_1, 1, _Clamp_E85434A6_Out_3);
                RandomStiffness = _Clamp_E85434A6_Out_3;
            }

            struct Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628
            {
            };

            void SG_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628(float Vector1_AFC49E6C, float Vector1_A18CF4DF, float Vector1_28AC83F8, float Vector1_E0042E1, float Vector1_1A24AAF, Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628 IN, out float GustStrength)
            {
                float _Property_9A741C0D_Out_0 = Vector1_AFC49E6C;
                float _Property_F564A485_Out_0 = Vector1_A18CF4DF;
                float _Multiply_248F3A68_Out_2;
                Unity_Multiply_float(_Property_9A741C0D_Out_0, _Property_F564A485_Out_0, _Multiply_248F3A68_Out_2);
                float _Clamp_64D749D9_Out_3;
                Unity_Clamp_float(_Multiply_248F3A68_Out_2, 0.1, 0.9, _Clamp_64D749D9_Out_3);
                float _OneMinus_BDC5FAC3_Out_1;
                Unity_OneMinus_float(_Clamp_64D749D9_Out_3, _OneMinus_BDC5FAC3_Out_1);
                float _Multiply_E3C6FEFE_Out_2;
                Unity_Multiply_float(_Multiply_248F3A68_Out_2, _OneMinus_BDC5FAC3_Out_1, _Multiply_E3C6FEFE_Out_2);
                float _Multiply_9087CA8A_Out_2;
                Unity_Multiply_float(_Multiply_E3C6FEFE_Out_2, 1.5, _Multiply_9087CA8A_Out_2);
                float _Property_C7E6777F_Out_0 = Vector1_28AC83F8;
                float _Multiply_1D329CB_Out_2;
                Unity_Multiply_float(_Multiply_9087CA8A_Out_2, _Property_C7E6777F_Out_0, _Multiply_1D329CB_Out_2);
                float _Property_84113466_Out_0 = Vector1_E0042E1;
                float _Multiply_9501294C_Out_2;
                Unity_Multiply_float(_Multiply_1D329CB_Out_2, _Property_84113466_Out_0, _Multiply_9501294C_Out_2);
                float _Property_57C5AF03_Out_0 = Vector1_1A24AAF;
                float _Multiply_E178164E_Out_2;
                Unity_Multiply_float(_Multiply_9501294C_Out_2, _Property_57C5AF03_Out_0, _Multiply_E178164E_Out_2);
                GustStrength = _Multiply_E178164E_Out_2;
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            struct Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a
            {
            };

            void SG_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a(float2 Vector2_287CB44E, float2 Vector2_2A17E6EA, float Vector1_F4B6A491, float Vector1_2C90770B, TEXTURE2D_PARAM(Texture2D_D44B4848, samplerTexture2D_D44B4848), float Vector1_AD94E9BC, Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a IN, out float3 ShiverNoise)
            {
                float2 _Property_961D8A0_Out_0 = Vector2_287CB44E;
                float _Property_A414F012_Out_0 = Vector1_AD94E9BC;
                float _Multiply_7DB42988_Out_2;
                Unity_Multiply_float(_Property_A414F012_Out_0, 2, _Multiply_7DB42988_Out_2);
                float2 _Add_4C3CF1F_Out_2;
                Unity_Add_float2(_Property_961D8A0_Out_0, (_Multiply_7DB42988_Out_2.xx), _Add_4C3CF1F_Out_2);
                float2 _Property_EBC67BC7_Out_0 = Vector2_2A17E6EA;
                float _Property_13D296B5_Out_0 = Vector1_F4B6A491;
                float2 _Multiply_BBB72061_Out_2;
                Unity_Multiply_float(_Property_EBC67BC7_Out_0, (_Property_13D296B5_Out_0.xx), _Multiply_BBB72061_Out_2);
                float _Property_3BB601E6_Out_0 = Vector1_2C90770B;
                float2 _Multiply_FF9010E8_Out_2;
                Unity_Multiply_float(_Multiply_BBB72061_Out_2, (_Property_3BB601E6_Out_0.xx), _Multiply_FF9010E8_Out_2);
                float2 _Subtract_6BF2D170_Out_2;
                Unity_Subtract_float2(_Add_4C3CF1F_Out_2, _Multiply_FF9010E8_Out_2, _Subtract_6BF2D170_Out_2);
                float4 _SampleTexture2DLOD_DBCD6404_RGBA_0 = SAMPLE_TEXTURE2D_LOD(Texture2D_D44B4848, samplerTexture2D_D44B4848, _Subtract_6BF2D170_Out_2, 0);
                float _SampleTexture2DLOD_DBCD6404_R_5 = _SampleTexture2DLOD_DBCD6404_RGBA_0.r;
                float _SampleTexture2DLOD_DBCD6404_G_6 = _SampleTexture2DLOD_DBCD6404_RGBA_0.g;
                float _SampleTexture2DLOD_DBCD6404_B_7 = _SampleTexture2DLOD_DBCD6404_RGBA_0.b;
                float _SampleTexture2DLOD_DBCD6404_A_8 = _SampleTexture2DLOD_DBCD6404_RGBA_0.a;
                float4 _Combine_E5D76A97_RGBA_4;
                float3 _Combine_E5D76A97_RGB_5;
                float2 _Combine_E5D76A97_RG_6;
                Unity_Combine_float(_SampleTexture2DLOD_DBCD6404_R_5, _SampleTexture2DLOD_DBCD6404_G_6, _SampleTexture2DLOD_DBCD6404_B_7, 0, _Combine_E5D76A97_RGBA_4, _Combine_E5D76A97_RGB_5, _Combine_E5D76A97_RG_6);
                float3 _Subtract_AA7C02E2_Out_2;
                Unity_Subtract_float3(_Combine_E5D76A97_RGB_5, float3(0.5, 0.5, 0.5), _Subtract_AA7C02E2_Out_2);
                float3 _Multiply_5BF7CBD7_Out_2;
                Unity_Multiply_float(_Subtract_AA7C02E2_Out_2, float3(2, 2, 2), _Multiply_5BF7CBD7_Out_2);
                ShiverNoise = _Multiply_5BF7CBD7_Out_2;
            }

            struct Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459
            {
            };

            void SG_CalculateShiver_2b675aaec6ba57b449ad461cc799d459(float3 Vector3_ED0F539A, float2 Vector2_84805101, float Vector1_BDF24CF7, float Vector1_839268A4, float Vector1_A8621014, float Vector1_2DBE6CC0, float Vector1_8A4EF006, float Vector1_ED935C73, Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459 IN, out float3 ShiverDirection, out float ShiverStrength)
            {
                float3 _Property_FC94AEBB_Out_0 = Vector3_ED0F539A;
                float _Property_4FE2271A_Out_0 = Vector1_BDF24CF7;
                float4 _Combine_328044F1_RGBA_4;
                float3 _Combine_328044F1_RGB_5;
                float2 _Combine_328044F1_RG_6;
                Unity_Combine_float(1, _Property_4FE2271A_Out_0, 1, 0, _Combine_328044F1_RGBA_4, _Combine_328044F1_RGB_5, _Combine_328044F1_RG_6);
                float3 _Multiply_4FCE02F7_Out_2;
                Unity_Multiply_float(_Property_FC94AEBB_Out_0, _Combine_328044F1_RGB_5, _Multiply_4FCE02F7_Out_2);
                float2 _Property_77EED0A8_Out_0 = Vector2_84805101;
                float _Split_2D66AF35_R_1 = _Property_77EED0A8_Out_0[0];
                float _Split_2D66AF35_G_2 = _Property_77EED0A8_Out_0[1];
                float _Split_2D66AF35_B_3 = 0;
                float _Split_2D66AF35_A_4 = 0;
                float4 _Combine_C2861A09_RGBA_4;
                float3 _Combine_C2861A09_RGB_5;
                float2 _Combine_C2861A09_RG_6;
                Unity_Combine_float(_Split_2D66AF35_R_1, _Property_4FE2271A_Out_0, _Split_2D66AF35_G_2, 0, _Combine_C2861A09_RGBA_4, _Combine_C2861A09_RGB_5, _Combine_C2861A09_RG_6);
                float3 _Lerp_A6B0BE86_Out_3;
                Unity_Lerp_float3(_Multiply_4FCE02F7_Out_2, _Combine_C2861A09_RGB_5, float3(0.5, 0.5, 0.5), _Lerp_A6B0BE86_Out_3);
                float _Property_BBBC9C1B_Out_0 = Vector1_839268A4;
                float _Length_F022B321_Out_1;
                Unity_Length_float3(_Multiply_4FCE02F7_Out_2, _Length_F022B321_Out_1);
                float _Multiply_BFD84B03_Out_2;
                Unity_Multiply_float(_Length_F022B321_Out_1, 0.5, _Multiply_BFD84B03_Out_2);
                float _Multiply_3564B68A_Out_2;
                Unity_Multiply_float(_Property_BBBC9C1B_Out_0, _Multiply_BFD84B03_Out_2, _Multiply_3564B68A_Out_2);
                float _Add_83285742_Out_2;
                Unity_Add_float(_Multiply_3564B68A_Out_2, _Length_F022B321_Out_1, _Add_83285742_Out_2);
                float _Property_45D94B1_Out_0 = Vector1_2DBE6CC0;
                float _Multiply_EA43D494_Out_2;
                Unity_Multiply_float(_Add_83285742_Out_2, _Property_45D94B1_Out_0, _Multiply_EA43D494_Out_2);
                float _Clamp_C109EA71_Out_3;
                Unity_Clamp_float(_Multiply_EA43D494_Out_2, 0.1, 0.9, _Clamp_C109EA71_Out_3);
                float _OneMinus_226F3377_Out_1;
                Unity_OneMinus_float(_Clamp_C109EA71_Out_3, _OneMinus_226F3377_Out_1);
                float _Multiply_8680628F_Out_2;
                Unity_Multiply_float(_Multiply_EA43D494_Out_2, _OneMinus_226F3377_Out_1, _Multiply_8680628F_Out_2);
                float _Multiply_B14E644_Out_2;
                Unity_Multiply_float(_Multiply_8680628F_Out_2, 1.5, _Multiply_B14E644_Out_2);
                float _Property_7F61FC78_Out_0 = Vector1_A8621014;
                float _Multiply_C89CF7DC_Out_2;
                Unity_Multiply_float(_Multiply_B14E644_Out_2, _Property_7F61FC78_Out_0, _Multiply_C89CF7DC_Out_2);
                float _Property_2BD306B6_Out_0 = Vector1_8A4EF006;
                float _Multiply_E5D34DCC_Out_2;
                Unity_Multiply_float(_Multiply_C89CF7DC_Out_2, _Property_2BD306B6_Out_0, _Multiply_E5D34DCC_Out_2);
                float _Property_DBC71A4F_Out_0 = Vector1_ED935C73;
                float _Multiply_BCACDD38_Out_2;
                Unity_Multiply_float(_Multiply_E5D34DCC_Out_2, _Property_DBC71A4F_Out_0, _Multiply_BCACDD38_Out_2);
                ShiverDirection = _Lerp_A6B0BE86_Out_3;
                ShiverStrength = _Multiply_BCACDD38_Out_2;
            }

            struct Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364
            {
            };

            void SG_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364(float3 Vector3_829210A7, float3 Vector3_1A016C4A, float Vector1_31372BF, float Vector1_E57895AF, TEXTURE2D_PARAM(Texture2D_65F71447, samplerTexture2D_65F71447), float Vector1_8836FB6A, TEXTURE2D_PARAM(Texture2D_4A3BDB6, samplerTexture2D_4A3BDB6), float Vector1_14E206AE, float Vector1_7090E96C, float Vector1_51722AC, float Vector1_A3894D2, float Vector1_6F0C3A5A, float Vector1_2D1F6C2F, float Vector1_347751CA, Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364 IN, out float GustStrength, out float ShiverStrength, out float3 ShiverDirection)
            {
                float _Property_5C7F4A8C_Out_0 = Vector1_31372BF;
                float _Property_142FEDC3_Out_0 = Vector1_347751CA;
                float3 _Property_D2FC65C3_Out_0 = Vector3_829210A7;
                float _Split_8E347DCF_R_1 = _Property_D2FC65C3_Out_0[0];
                float _Split_8E347DCF_G_2 = _Property_D2FC65C3_Out_0[1];
                float _Split_8E347DCF_B_3 = _Property_D2FC65C3_Out_0[2];
                float _Split_8E347DCF_A_4 = 0;
                float4 _Combine_9B5A76B7_RGBA_4;
                float3 _Combine_9B5A76B7_RGB_5;
                float2 _Combine_9B5A76B7_RG_6;
                Unity_Combine_float(_Split_8E347DCF_R_1, _Split_8E347DCF_B_3, 0, 0, _Combine_9B5A76B7_RGBA_4, _Combine_9B5A76B7_RGB_5, _Combine_9B5A76B7_RG_6);
                float3 _Property_5653999E_Out_0 = Vector3_1A016C4A;
                float _Split_B9CBBFE5_R_1 = _Property_5653999E_Out_0[0];
                float _Split_B9CBBFE5_G_2 = _Property_5653999E_Out_0[1];
                float _Split_B9CBBFE5_B_3 = _Property_5653999E_Out_0[2];
                float _Split_B9CBBFE5_A_4 = 0;
                float4 _Combine_DC44394B_RGBA_4;
                float3 _Combine_DC44394B_RGB_5;
                float2 _Combine_DC44394B_RG_6;
                Unity_Combine_float(_Split_B9CBBFE5_R_1, _Split_B9CBBFE5_B_3, 0, 0, _Combine_DC44394B_RGBA_4, _Combine_DC44394B_RGB_5, _Combine_DC44394B_RG_6);
                float _Property_3221EFCE_Out_0 = Vector1_E57895AF;
                Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f _GustNoiseAtPosition_3B28852B;
                float _GustNoiseAtPosition_3B28852B_GustNoise_0;
                SG_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f(_Property_5C7F4A8C_Out_0, _Property_142FEDC3_Out_0, _Combine_9B5A76B7_RG_6, _Combine_DC44394B_RG_6, _Property_3221EFCE_Out_0, TEXTURE2D_ARGS(Texture2D_65F71447, samplerTexture2D_65F71447), _GustNoiseAtPosition_3B28852B, _GustNoiseAtPosition_3B28852B_GustNoise_0);
                float _Property_1B306054_Out_0 = Vector1_A3894D2;
                float _Property_1FBC768_Out_0 = Vector1_51722AC;
                float _Property_9FB10D19_Out_0 = Vector1_14E206AE;
                Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19 _RandomStiffnessAtPosition_C9AD50AB;
                float _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0;
                SG_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19(_Combine_9B5A76B7_RG_6, _Property_9FB10D19_Out_0, _RandomStiffnessAtPosition_C9AD50AB, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0);
                float _Property_EE5A603D_Out_0 = Vector1_7090E96C;
                Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628 _CalculateGustStrength_E2853C74;
                float _CalculateGustStrength_E2853C74_GustStrength_0;
                SG_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628(_GustNoiseAtPosition_3B28852B_GustNoise_0, _Property_1B306054_Out_0, _Property_1FBC768_Out_0, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0, _Property_EE5A603D_Out_0, _CalculateGustStrength_E2853C74, _CalculateGustStrength_E2853C74_GustStrength_0);
                float _Property_DFB3FCE0_Out_0 = Vector1_31372BF;
                float _Property_8A8735CC_Out_0 = Vector1_8836FB6A;
                Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a _ShiverNoiseAtPosition_35F9220A;
                float3 _ShiverNoiseAtPosition_35F9220A_ShiverNoise_0;
                SG_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a(_Combine_9B5A76B7_RG_6, _Combine_DC44394B_RG_6, _Property_DFB3FCE0_Out_0, _Property_8A8735CC_Out_0, TEXTURE2D_ARGS(Texture2D_4A3BDB6, samplerTexture2D_4A3BDB6), _Property_142FEDC3_Out_0, _ShiverNoiseAtPosition_35F9220A, _ShiverNoiseAtPosition_35F9220A_ShiverNoise_0);
                float _Property_65F19953_Out_0 = Vector1_6F0C3A5A;
                float _Property_3A2F45FE_Out_0 = Vector1_51722AC;
                float _Property_98EF73E5_Out_0 = Vector1_2D1F6C2F;
                float _Property_6A278DE2_Out_0 = Vector1_7090E96C;
                Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459 _CalculateShiver_799DE4CB;
                float3 _CalculateShiver_799DE4CB_ShiverDirection_0;
                float _CalculateShiver_799DE4CB_ShiverStrength_1;
                SG_CalculateShiver_2b675aaec6ba57b449ad461cc799d459(_ShiverNoiseAtPosition_35F9220A_ShiverNoise_0, _Combine_DC44394B_RG_6, _Property_65F19953_Out_0, _CalculateGustStrength_E2853C74_GustStrength_0, _Property_3A2F45FE_Out_0, _Property_98EF73E5_Out_0, _Property_6A278DE2_Out_0, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0, _CalculateShiver_799DE4CB, _CalculateShiver_799DE4CB_ShiverDirection_0, _CalculateShiver_799DE4CB_ShiverStrength_1);
                GustStrength = _CalculateGustStrength_E2853C74_GustStrength_0;
                ShiverStrength = _CalculateShiver_799DE4CB_ShiverStrength_1;
                ShiverDirection = _CalculateShiver_799DE4CB_ShiverDirection_0;
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            struct Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01
            {
                float3 ObjectSpacePosition;
            };

            void SG_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01(float3 Vector3_C96069F9, float Vector1_A5EB719C, float Vector1_4D1D3B1A, float3 Vector3_C80E97FF, float3 Vector3_821C320A, float3 Vector3_4BF0DC64, Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01 IN, out float3 WorldPosition)
            {
                float3 _Property_65372844_Out_0 = Vector3_4BF0DC64;
                float3 _Property_7205E35B_Out_0 = Vector3_821C320A;
                float _Property_916D8D52_Out_0 = Vector1_4D1D3B1A;
                float3 _Multiply_CF9DF1B5_Out_2;
                Unity_Multiply_float(_Property_7205E35B_Out_0, (_Property_916D8D52_Out_0.xxx), _Multiply_CF9DF1B5_Out_2);
                float3 _Multiply_57D2E5C7_Out_2;
                Unity_Multiply_float(_Multiply_CF9DF1B5_Out_2, float3(10, 10, 10), _Multiply_57D2E5C7_Out_2);
                float3 _Add_F265DF09_Out_2;
                Unity_Add_float3(_Property_65372844_Out_0, _Multiply_57D2E5C7_Out_2, _Add_F265DF09_Out_2);
                float3 _Property_806C350F_Out_0 = Vector3_C96069F9;
                float _Property_D017A08E_Out_0 = Vector1_A5EB719C;
                float3 _Multiply_99498CF9_Out_2;
                Unity_Multiply_float(_Property_806C350F_Out_0, (_Property_D017A08E_Out_0.xxx), _Multiply_99498CF9_Out_2);
                float _Split_A5777330_R_1 = IN.ObjectSpacePosition[0];
                float _Split_A5777330_G_2 = IN.ObjectSpacePosition[1];
                float _Split_A5777330_B_3 = IN.ObjectSpacePosition[2];
                float _Split_A5777330_A_4 = 0;
                float _Clamp_C4364CA5_Out_3;
                Unity_Clamp_float(_Split_A5777330_G_2, 0, 1, _Clamp_C4364CA5_Out_3);
                float3 _Multiply_ADC4C2A_Out_2;
                Unity_Multiply_float(_Multiply_99498CF9_Out_2, (_Clamp_C4364CA5_Out_3.xxx), _Multiply_ADC4C2A_Out_2);
                float3 _Multiply_49835441_Out_2;
                Unity_Multiply_float(_Multiply_ADC4C2A_Out_2, float3(10, 10, 10), _Multiply_49835441_Out_2);
                float3 _Add_B14AAE70_Out_2;
                Unity_Add_float3(_Add_F265DF09_Out_2, _Multiply_49835441_Out_2, _Add_B14AAE70_Out_2);
                WorldPosition = _Add_B14AAE70_Out_2;
            }

            struct Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceTangent;
                float3 WorldSpaceBiTangent;
            };

            void SG_WorldToObject_c1006c77aa2ba8543ab0d5302579f549(float3 Vector3_AAF445D6, Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549 IN, out float3 ObjectPosition)
            {
                float3 _Property_51DA8EE_Out_0 = Vector3_AAF445D6;
                float3 _Transform_6FDB2E47_Out_1 = TransformWorldToObject(_Property_51DA8EE_Out_0.xyz);
                ObjectPosition = _Transform_6FDB2E47_Out_1;
            }

            void Unity_Hue_Normalized_float(float3 In, float Offset, out float3 Out)
            {
                // RGB to HSV
                float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
                float4 P = lerp(float4(In.bg, K.wz), float4(In.gb, K.xy), step(In.b, In.g));
                float4 Q = lerp(float4(P.xyw, In.r), float4(In.r, P.yzx), step(P.x, In.r));
                float D = Q.x - min(Q.w, Q.y);
                float E = 1e-10;
                float3 hsv = float3(abs(Q.z + (Q.w - Q.y)/(6.0 * D + E)), D / (Q.x + E), Q.x);

                float hue = hsv.x + Offset;
                hsv.x = (hue < 0)
                        ? hue + 1
                        : (hue > 1)
                            ? hue - 1
                            : hue;

                // HSV to RGB
                float4 K2 = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                float3 P2 = abs(frac(hsv.xxx + K2.xyz) * 6.0 - K2.www);
                Out = hsv.z * lerp(K2.xxx, saturate(P2 - K2.xxx), hsv.y);
            }

            void Unity_Saturation_float(float3 In, float Saturation, out float3 Out)
            {
                float luma = dot(In, float3(0.2126729, 0.7151522, 0.0721750));
                Out =  luma.xxx + Saturation.xxx * (In - luma.xxx);
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238 _GetPivotInWorldSpace_73F19E42;
                float3 _GetPivotInWorldSpace_73F19E42_PivotInWS_0;
                SG_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238(_GetPivotInWorldSpace_73F19E42, _GetPivotInWorldSpace_73F19E42_PivotInWS_0);
                float _Split_64420219_R_1 = IN.VertexColor[0];
                float _Split_64420219_G_2 = IN.VertexColor[1];
                float _Split_64420219_B_3 = IN.VertexColor[2];
                float _Split_64420219_A_4 = IN.VertexColor[3];
                float3 _Lerp_4531CF63_Out_3;
                Unity_Lerp_float3(_GetPivotInWorldSpace_73F19E42_PivotInWS_0, IN.WorldSpacePosition, (_Split_64420219_G_2.xxx), _Lerp_4531CF63_Out_3);
                float4 _Property_D6662DC6_Out_0 = _GlobalWindDirectionAndStrength;
                float4 _Property_9515B228_Out_0 = _WindDirectionAndStrength;
                float4 _Property_9A1EF240_Out_0 = _GlobalShiver;
                float4 _Property_777C8DB2_Out_0 = _Shiver;
                Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7 _GlobalWindParameters_B547F135;
                float3 _GlobalWindParameters_B547F135_GustDirection_0;
                float _GlobalWindParameters_B547F135_GustSpeed_1;
                float _GlobalWindParameters_B547F135_GustStrength_2;
                float _GlobalWindParameters_B547F135_ShiverSpeed_3;
                float _GlobalWindParameters_B547F135_ShiverStrength_4;
                SG_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7(_Property_D6662DC6_Out_0, _Property_9515B228_Out_0, (_Property_9A1EF240_Out_0.xy), (_Property_777C8DB2_Out_0.xy), _GlobalWindParameters_B547F135, _GlobalWindParameters_B547F135_GustDirection_0, _GlobalWindParameters_B547F135_GustSpeed_1, _GlobalWindParameters_B547F135_GustStrength_2, _GlobalWindParameters_B547F135_ShiverSpeed_3, _GlobalWindParameters_B547F135_ShiverStrength_4);
                float _Property_5F3A390D_Out_0 = _BAKEDMASK_ON;
                float3 _Subtract_BF2A75CD_Out_2;
                Unity_Subtract_float3(IN.WorldSpacePosition, _GetPivotInWorldSpace_73F19E42_PivotInWS_0, _Subtract_BF2A75CD_Out_2);
                float _Split_29C81DE4_R_1 = _Subtract_BF2A75CD_Out_2[0];
                float _Split_29C81DE4_G_2 = _Subtract_BF2A75CD_Out_2[1];
                float _Split_29C81DE4_B_3 = _Subtract_BF2A75CD_Out_2[2];
                float _Split_29C81DE4_A_4 = 0;
                float _Add_6A47DB4F_Out_2;
                Unity_Add_float(_Split_29C81DE4_R_1, _Split_29C81DE4_G_2, _Add_6A47DB4F_Out_2);
                float _Add_EC455B5D_Out_2;
                Unity_Add_float(_Add_6A47DB4F_Out_2, _Split_29C81DE4_B_3, _Add_EC455B5D_Out_2);
                float _Multiply_F013BB8B_Out_2;
                Unity_Multiply_float(_Add_EC455B5D_Out_2, 0.4, _Multiply_F013BB8B_Out_2);
                float _Fraction_7D389816_Out_1;
                Unity_Fraction_float(_Multiply_F013BB8B_Out_2, _Fraction_7D389816_Out_1);
                float _Multiply_776D3DAF_Out_2;
                Unity_Multiply_float(_Fraction_7D389816_Out_1, 0.15, _Multiply_776D3DAF_Out_2);
                float _Split_E4BB9FEC_R_1 = IN.VertexColor[0];
                float _Split_E4BB9FEC_G_2 = IN.VertexColor[1];
                float _Split_E4BB9FEC_B_3 = IN.VertexColor[2];
                float _Split_E4BB9FEC_A_4 = IN.VertexColor[3];
                float _Multiply_BC8988C3_Out_2;
                Unity_Multiply_float(_Multiply_776D3DAF_Out_2, _Split_E4BB9FEC_G_2, _Multiply_BC8988C3_Out_2);
                float _Multiply_EC5FE292_Out_2;
                Unity_Multiply_float(_Split_E4BB9FEC_R_1, 0.3, _Multiply_EC5FE292_Out_2);
                float _Add_A8423510_Out_2;
                Unity_Add_float(_Multiply_BC8988C3_Out_2, _Multiply_EC5FE292_Out_2, _Add_A8423510_Out_2);
                float _Add_CE74358C_Out_2;
                Unity_Add_float(_Add_A8423510_Out_2, IN.TimeParameters.x, _Add_CE74358C_Out_2);
                float _Multiply_1CE438D_Out_2;
                Unity_Multiply_float(_Split_E4BB9FEC_G_2, 0.5, _Multiply_1CE438D_Out_2);
                float _Add_8718B88C_Out_2;
                Unity_Add_float(_Add_CE74358C_Out_2, _Multiply_1CE438D_Out_2, _Add_8718B88C_Out_2);
                float _Property_DBA903E3_Out_0 = _UVMASK_ON;
                float4 _UV_64D01E18_Out_0 = IN.uv0;
                float _Split_A5DFBEBE_R_1 = _UV_64D01E18_Out_0[0];
                float _Split_A5DFBEBE_G_2 = _UV_64D01E18_Out_0[1];
                float _Split_A5DFBEBE_B_3 = _UV_64D01E18_Out_0[2];
                float _Split_A5DFBEBE_A_4 = _UV_64D01E18_Out_0[3];
                float _Multiply_C943DA5C_Out_2;
                Unity_Multiply_float(_Split_A5DFBEBE_G_2, 0.1, _Multiply_C943DA5C_Out_2);
                float _Branch_12012434_Out_3;
                Unity_Branch_float(_Property_DBA903E3_Out_0, _Multiply_C943DA5C_Out_2, 0, _Branch_12012434_Out_3);
                float _Add_922F2E64_Out_2;
                Unity_Add_float(IN.TimeParameters.x, _Branch_12012434_Out_3, _Add_922F2E64_Out_2);
                float _Multiply_2E689843_Out_2;
                Unity_Multiply_float(_Multiply_776D3DAF_Out_2, 0.5, _Multiply_2E689843_Out_2);
                float _Add_ED1EE4DB_Out_2;
                Unity_Add_float(_Add_922F2E64_Out_2, _Multiply_2E689843_Out_2, _Add_ED1EE4DB_Out_2);
                float _Branch_291934CD_Out_3;
                Unity_Branch_float(_Property_5F3A390D_Out_0, _Add_8718B88C_Out_2, _Add_ED1EE4DB_Out_2, _Branch_291934CD_Out_3);
                float _Property_267CF497_Out_0 = _StiffnessVariation;
                float _Property_4FB02E51_Out_0 = _BAKEDMASK_ON;
                float4 _UV_6482E163_Out_0 = IN.uv1;
                float _Split_2D1A67CF_R_1 = _UV_6482E163_Out_0[0];
                float _Split_2D1A67CF_G_2 = _UV_6482E163_Out_0[1];
                float _Split_2D1A67CF_B_3 = _UV_6482E163_Out_0[2];
                float _Split_2D1A67CF_A_4 = _UV_6482E163_Out_0[3];
                float _Multiply_F7BD1E76_Out_2;
                Unity_Multiply_float(_Split_2D1A67CF_R_1, _Split_2D1A67CF_G_2, _Multiply_F7BD1E76_Out_2);
                float _Property_B1FAFDBF_Out_0 = _UVMASK_ON;
                float4 _UV_8F58F10B_Out_0 = IN.uv0;
                float _Split_BD0858B3_R_1 = _UV_8F58F10B_Out_0[0];
                float _Split_BD0858B3_G_2 = _UV_8F58F10B_Out_0[1];
                float _Split_BD0858B3_B_3 = _UV_8F58F10B_Out_0[2];
                float _Split_BD0858B3_A_4 = _UV_8F58F10B_Out_0[3];
                float _Multiply_3FAD9403_Out_2;
                Unity_Multiply_float(_Split_BD0858B3_G_2, 0.2, _Multiply_3FAD9403_Out_2);
                float _Branch_3AF3832A_Out_3;
                Unity_Branch_float(_Property_B1FAFDBF_Out_0, _Multiply_3FAD9403_Out_2, 1, _Branch_3AF3832A_Out_3);
                float _Branch_F921E5A9_Out_3;
                Unity_Branch_float(_Property_4FB02E51_Out_0, _Multiply_F7BD1E76_Out_2, _Branch_3AF3832A_Out_3, _Branch_F921E5A9_Out_3);
                Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364 _GetWindStrength_5806EF0A;
                float _GetWindStrength_5806EF0A_GustStrength_0;
                float _GetWindStrength_5806EF0A_ShiverStrength_1;
                float3 _GetWindStrength_5806EF0A_ShiverDirection_2;
                SG_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364(_Lerp_4531CF63_Out_3, _GlobalWindParameters_B547F135_GustDirection_0, _Branch_291934CD_Out_3, _GlobalWindParameters_B547F135_GustSpeed_1, TEXTURE2D_ARGS(_GustNoise, sampler_GustNoise), _GlobalWindParameters_B547F135_ShiverSpeed_3, TEXTURE2D_ARGS(_ShiverNoise, sampler_ShiverNoise), _Property_267CF497_Out_0, 1, _Branch_F921E5A9_Out_3, _GlobalWindParameters_B547F135_GustStrength_2, 0.2, _GlobalWindParameters_B547F135_ShiverStrength_4, 0, _GetWindStrength_5806EF0A, _GetWindStrength_5806EF0A_GustStrength_0, _GetWindStrength_5806EF0A_ShiverStrength_1, _GetWindStrength_5806EF0A_ShiverDirection_2);
                Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01 _ApplyTreeWindDisplacement_8E73FF2E;
                _ApplyTreeWindDisplacement_8E73FF2E.ObjectSpacePosition = IN.ObjectSpacePosition;
                float3 _ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0;
                SG_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01(_GetWindStrength_5806EF0A_ShiverDirection_2, _GetWindStrength_5806EF0A_ShiverStrength_1, _GetWindStrength_5806EF0A_GustStrength_0, _GetPivotInWorldSpace_73F19E42_PivotInWS_0, _GlobalWindParameters_B547F135_GustDirection_0, IN.WorldSpacePosition, _ApplyTreeWindDisplacement_8E73FF2E, _ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0);
                Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549 _WorldToObject_628B231E;
                _WorldToObject_628B231E.WorldSpaceNormal = IN.WorldSpaceNormal;
                _WorldToObject_628B231E.WorldSpaceTangent = IN.WorldSpaceTangent;
                _WorldToObject_628B231E.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 _WorldToObject_628B231E_ObjectPosition_1;
                SG_WorldToObject_c1006c77aa2ba8543ab0d5302579f549(_ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0, _WorldToObject_628B231E, _WorldToObject_628B231E_ObjectPosition_1);
                description.Position = _WorldToObject_628B231E_ObjectPosition_1;
                return description;
            }

            struct SurfaceDescription
            {
                float3 Albedo;
                float3 Normal;
                float3 Emission;
                float Metallic;
                float Smoothness;
                float Occlusion;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float4 _SampleTexture2D_F86B9939_RGBA_0 = SAMPLE_TEXTURE2D(_Albedo, sampler_Albedo, IN.uv0.xy);
                float _SampleTexture2D_F86B9939_R_4 = _SampleTexture2D_F86B9939_RGBA_0.r;
                float _SampleTexture2D_F86B9939_G_5 = _SampleTexture2D_F86B9939_RGBA_0.g;
                float _SampleTexture2D_F86B9939_B_6 = _SampleTexture2D_F86B9939_RGBA_0.b;
                float _SampleTexture2D_F86B9939_A_7 = _SampleTexture2D_F86B9939_RGBA_0.a;
                float _Property_667D0001_Out_0 = _Hue;
                float3 _Hue_BE270ED0_Out_2;
                Unity_Hue_Normalized_float((_SampleTexture2D_F86B9939_RGBA_0.xyz), _Property_667D0001_Out_0, _Hue_BE270ED0_Out_2);
                float _Property_306B4B17_Out_0 = _Saturation;
                float _Add_27F91AF7_Out_2;
                Unity_Add_float(_Property_306B4B17_Out_0, 1, _Add_27F91AF7_Out_2);
                float3 _Saturation_8EFFDFE8_Out_2;
                Unity_Saturation_float(_Hue_BE270ED0_Out_2, _Add_27F91AF7_Out_2, _Saturation_8EFFDFE8_Out_2);
                float _Property_35742C6B_Out_0 = _Lightness;
                float3 _Add_53649F0F_Out_2;
                Unity_Add_float3(_Saturation_8EFFDFE8_Out_2, (_Property_35742C6B_Out_0.xxx), _Add_53649F0F_Out_2);
                float4 _SampleTexture2D_12F932C1_RGBA_0 = SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, IN.uv0.xy);
                _SampleTexture2D_12F932C1_RGBA_0.rgb = UnpackNormalmapRGorAG(_SampleTexture2D_12F932C1_RGBA_0);
                float _SampleTexture2D_12F932C1_R_4 = _SampleTexture2D_12F932C1_RGBA_0.r;
                float _SampleTexture2D_12F932C1_G_5 = _SampleTexture2D_12F932C1_RGBA_0.g;
                float _SampleTexture2D_12F932C1_B_6 = _SampleTexture2D_12F932C1_RGBA_0.b;
                float _SampleTexture2D_12F932C1_A_7 = _SampleTexture2D_12F932C1_RGBA_0.a;
                float4 _SampleTexture2D_FFEA8409_RGBA_0 = SAMPLE_TEXTURE2D(_MaskMap, sampler_MaskMap, IN.uv0.xy);
                float _SampleTexture2D_FFEA8409_R_4 = _SampleTexture2D_FFEA8409_RGBA_0.r;
                float _SampleTexture2D_FFEA8409_G_5 = _SampleTexture2D_FFEA8409_RGBA_0.g;
                float _SampleTexture2D_FFEA8409_B_6 = _SampleTexture2D_FFEA8409_RGBA_0.b;
                float _SampleTexture2D_FFEA8409_A_7 = _SampleTexture2D_FFEA8409_RGBA_0.a;
                float _Property_ABA23041_Out_0 = _AlphaClipThreshold;
                surface.Albedo = _Add_53649F0F_Out_2;
                surface.Normal = (_SampleTexture2D_12F932C1_RGBA_0.xyz);
                surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
                surface.Metallic = _SampleTexture2D_FFEA8409_R_4;
                surface.Smoothness = _SampleTexture2D_FFEA8409_A_7;
                surface.Occlusion = _SampleTexture2D_FFEA8409_G_5;
                surface.Alpha = _SampleTexture2D_F86B9939_A_7;
                surface.AlphaClipThreshold = _Property_ABA23041_Out_0;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 color : COLOR;
                float4 texcoord0 : TEXCOORD0;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


        	struct GraphVertexOutput
            {
                float4 clipPos                : SV_POSITION;
                DECLARE_LIGHTMAP_OR_SH(lightmapUV, vertexSH, 0);
        		half4 fogFactorAndVertexLight : TEXCOORD1; // x: fogFactor, yzw: vertex light
            	float4 shadowCoord            : TEXCOORD2;

        		// Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                half4 uv0 : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
            	UNITY_VERTEX_OUTPUT_STEREO
            };

            GraphVertexOutput vert (GraphVertexInput v)
        	{
        		GraphVertexOutput o = (GraphVertexOutput)0;
                UNITY_SETUP_INSTANCE_ID(v);
            	UNITY_TRANSFER_INSTANCE_ID(v, o);
        		UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        		// Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 VertexColor = v.color;
                float4 uv0 = v.texcoord0;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

        		VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

        		// Vertex description inputs defined by graph
                vdi.WorldSpaceNormal = WorldSpaceNormal;
                vdi.WorldSpaceTangent = WorldSpaceTangent;
                vdi.WorldSpaceBiTangent = WorldSpaceBiTangent;
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.WorldSpacePosition = WorldSpacePosition;
                vdi.VertexColor = VertexColor;
                vdi.uv0 = uv0;
                vdi.uv1 = uv1;
                vdi.TimeParameters = _TimeParameters.xyz;

        	    VertexDescription vd = PopulateVertexData(vdi);
        		v.vertex.xyz = vd.Position;

        		// Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.uv0 = uv0;
                o.uv1 = uv1;

        		float3 lwWNormal = TransformObjectToWorldNormal(v.normal);

                VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);
                
         		// We either sample GI from lightmap or SH.
        	    // Lightmap UV and vertex SH coefficients use the same interpolator ("float2 lightmapUV" for lightmap or "half3 vertexSH" for SH)
                // see DECLARE_LIGHTMAP_OR_SH macro.
        	    // The following funcions initialize the correct variable with correct data
        	    OUTPUT_LIGHTMAP_UV(v.texcoord1, unity_LightmapST, o.lightmapUV);
        	    OUTPUT_SH(lwWNormal, o.vertexSH);

        	    half3 vertexLight = VertexLighting(vertexInput.positionWS, lwWNormal);
        	    half fogFactor = ComputeFogFactor(vertexInput.positionCS.z);
        	    o.fogFactorAndVertexLight = half4(fogFactor, vertexLight);
        	    o.clipPos = vertexInput.positionCS;

        	#ifdef _MAIN_LIGHT_SHADOWS
        		o.shadowCoord = GetShadowCoord(vertexInput);
        	#endif
        		return o;
        	}

        	half4 frag (GraphVertexOutput IN ) : SV_Target
            {
            	UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

        		// Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 uv0 = IN.uv0;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.uv0 = uv0;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float3 Albedo = float3(0.5, 0.5, 0.5);
        		float3 Specular = float3(0, 0, 0);
        		float Metallic = 1;
        		float3 Normal = float3(0, 0, 1);
        		float3 Emission = 0;
        		float Smoothness = 0.5;
        		float Occlusion = 1;
        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Albedo = surf.Albedo;
                Normal = surf.Normal;
                Emission = surf.Emission;
                Metallic = surf.Metallic;
                Smoothness = surf.Smoothness;
                Occlusion = surf.Occlusion;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

        		InputData inputData;
        		inputData.positionWS = WorldSpacePosition;

        #ifdef _NORMALMAP
        	    inputData.normalWS = normalize(TransformTangentToWorld(Normal, half3x3(WorldSpaceTangent, WorldSpaceBiTangent, WorldSpaceNormal)));
        #else
            #if !SHADER_HINT_NICE_QUALITY
                inputData.normalWS = WorldSpaceNormal;
            #else
        	    inputData.normalWS = normalize(WorldSpaceNormal);
            #endif
        #endif

        #if !SHADER_HINT_NICE_QUALITY
        	    // viewDirection should be normalized here, but we avoid doing it as it's close enough and we save some ALU.
        	    inputData.viewDirectionWS = WorldSpaceViewDirection;
        #else
        	    inputData.viewDirectionWS = normalize(WorldSpaceViewDirection);
        #endif

        	    inputData.shadowCoord = IN.shadowCoord;

        	    inputData.fogCoord = IN.fogFactorAndVertexLight.x;
        	    inputData.vertexLighting = IN.fogFactorAndVertexLight.yzw;
        	    inputData.bakedGI = SAMPLE_GI(IN.lightmapUV, IN.vertexSH, inputData.normalWS);

        		half4 color = UniversalFragmentPBR(
        			inputData, 
        			Albedo, 
        			Metallic, 
        			Specular, 
        			Smoothness, 
        			Occlusion, 
        			Emission, 
        			Alpha);

        		// Computes fog factor per-vertex
            	color.rgb = MixFog(color.rgb, IN.fogFactorAndVertexLight.x);

        #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
        		return color;
            }

        	ENDHLSL
        }
        Pass
        {
        	Name "ShadowCaster"
            Tags{"LightMode" = "ShadowCaster"}

            ZWrite On ZTest LEqual

            // Material options generated by graph
            Cull Off

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex ShadowPassVertex
            #pragma fragment ShadowPassFragment

            // Defines generated by graph
            #define _NORMALMAP 1
            #define _AlphaClip 1

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float _AlphaClipThreshold;
            float _Hue;
            float _Saturation;
            float _Lightness;
            float _StiffnessVariation;
            float4 _WindDirectionAndStrength;
            float4 _Shiver;
            float _BAKEDMASK_ON;
            float _UVMASK_ON;
            float _VERTEXPOSITIONMASK_ON;
            CBUFFER_END

            TEXTURE2D(_Albedo); SAMPLER(sampler_Albedo); float4 _Albedo_TexelSize;
            TEXTURE2D(_BumpMap); SAMPLER(sampler_BumpMap); float4 _BumpMap_TexelSize;
            TEXTURE2D(_MaskMap); SAMPLER(sampler_MaskMap); float4 _MaskMap_TexelSize;
            TEXTURE2D(_ThicknessMap); SAMPLER(sampler_ThicknessMap); float4 _ThicknessMap_TexelSize;
            float4 _GlobalWindDirectionAndStrength;
            float4 _GlobalShiver;
            TEXTURE2D(_ShiverNoise); SAMPLER(sampler_ShiverNoise); float4 _ShiverNoise_TexelSize;
            TEXTURE2D(_GustNoise); SAMPLER(sampler_GustNoise); float4 _GustNoise_TexelSize;
            struct VertexDescriptionInputs
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceTangent;
                float3 WorldSpaceBiTangent;
                float3 ObjectSpacePosition;
                float3 WorldSpacePosition;
                float4 VertexColor;
                half4 uv0;
                half4 uv1;
                float3 TimeParameters;
            };

            struct SurfaceDescriptionInputs
            {
                half4 uv0;
            };


            struct Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238
            {
            };

            void SG_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238(Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238 IN, out float3 PivotInWS)
            {
                PivotInWS = SHADERGRAPH_OBJECT_POSITION;
            }

            void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
            {
                Out = lerp(A, B, T);
            }

            void Unity_Multiply_float (float4 A, float4 B, out float4 Out)
            {
                Out = A * B;
            }

            void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
            {
                RGBA = float4(R, G, B, A);
                RGB = float3(R, G, B);
                RG = float2(R, G);
            }

            void Unity_Length_float3(float3 In, out float Out)
            {
                Out = length(In);
            }

            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_Clamp_float(float In, float Min, float Max, out float Out)
            {
                Out = clamp(In, Min, Max);
            }

            void Unity_Normalize_float3(float3 In, out float3 Out)
            {
                Out = normalize(In);
            }

            void Unity_Maximum_float(float A, float B, out float Out)
            {
                Out = max(A, B);
            }

            void Unity_Multiply_float (float2 A, float2 B, out float2 Out)
            {
                Out = A * B;
            }

            void Unity_Maximum_float2(float2 A, float2 B, out float2 Out)
            {
                Out = max(A, B);
            }

            struct Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7
            {
            };

            void SG_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7(float4 Vector4_14B5A446, float4 Vector4_6887180D, float2 Vector2_F270B07E, float2 Vector2_70BD0D1B, Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7 IN, out float3 GustDirection, out float GustSpeed, out float GustStrength, out float ShiverSpeed, out float ShiverStrength)
            {
                float3 _Vector3_E24D7903_Out_0 = float3(0.7, 0, 0.3);
                float4 _Property_95651D48_Out_0 = Vector4_14B5A446;
                float4 _Property_FFEF34C6_Out_0 = Vector4_6887180D;
                float4 _Multiply_7F93D556_Out_2;
                Unity_Multiply_float(_Property_95651D48_Out_0, _Property_FFEF34C6_Out_0, _Multiply_7F93D556_Out_2);
                float _Split_1A6C2849_R_1 = _Multiply_7F93D556_Out_2[0];
                float _Split_1A6C2849_G_2 = _Multiply_7F93D556_Out_2[1];
                float _Split_1A6C2849_B_3 = _Multiply_7F93D556_Out_2[2];
                float _Split_1A6C2849_A_4 = _Multiply_7F93D556_Out_2[3];
                float4 _Combine_769EB158_RGBA_4;
                float3 _Combine_769EB158_RGB_5;
                float2 _Combine_769EB158_RG_6;
                Unity_Combine_float(_Split_1A6C2849_R_1, 0, _Split_1A6C2849_G_2, 0, _Combine_769EB158_RGBA_4, _Combine_769EB158_RGB_5, _Combine_769EB158_RG_6);
                float _Length_62815FED_Out_1;
                Unity_Length_float3(_Combine_769EB158_RGB_5, _Length_62815FED_Out_1);
                float _Multiply_A4A39D4F_Out_2;
                Unity_Multiply_float(_Length_62815FED_Out_1, 1000, _Multiply_A4A39D4F_Out_2);
                float _Clamp_4B28219D_Out_3;
                Unity_Clamp_float(_Multiply_A4A39D4F_Out_2, 0, 1, _Clamp_4B28219D_Out_3);
                float3 _Lerp_66854A50_Out_3;
                Unity_Lerp_float3(_Vector3_E24D7903_Out_0, _Combine_769EB158_RGB_5, (_Clamp_4B28219D_Out_3.xxx), _Lerp_66854A50_Out_3);
                float3 _Normalize_B2778668_Out_1;
                Unity_Normalize_float3(_Lerp_66854A50_Out_3, _Normalize_B2778668_Out_1);
                float _Maximum_A3AFA1AB_Out_2;
                Unity_Maximum_float(_Split_1A6C2849_B_3, 0.01, _Maximum_A3AFA1AB_Out_2);
                float _Maximum_FCE0058_Out_2;
                Unity_Maximum_float(0, _Split_1A6C2849_A_4, _Maximum_FCE0058_Out_2);
                float2 _Property_F062BDE_Out_0 = Vector2_F270B07E;
                float2 _Property_FB73C895_Out_0 = Vector2_70BD0D1B;
                float2 _Multiply_76AC0593_Out_2;
                Unity_Multiply_float(_Property_F062BDE_Out_0, _Property_FB73C895_Out_0, _Multiply_76AC0593_Out_2);
                float2 _Maximum_E318FF04_Out_2;
                Unity_Maximum_float2(_Multiply_76AC0593_Out_2, float2(0.01, 0.01), _Maximum_E318FF04_Out_2);
                float _Split_F437A5E0_R_1 = _Maximum_E318FF04_Out_2[0];
                float _Split_F437A5E0_G_2 = _Maximum_E318FF04_Out_2[1];
                float _Split_F437A5E0_B_3 = 0;
                float _Split_F437A5E0_A_4 = 0;
                GustDirection = _Normalize_B2778668_Out_1;
                GustSpeed = _Maximum_A3AFA1AB_Out_2;
                GustStrength = _Maximum_FCE0058_Out_2;
                ShiverSpeed = _Split_F437A5E0_R_1;
                ShiverStrength = _Split_F437A5E0_G_2;
            }

            void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A - B;
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_Fraction_float(float In, out float Out)
            {
                Out = frac(In);
            }

            void Unity_Branch_float(float Predicate, float True, float False, out float Out)
            {
                Out = lerp(False, True, Predicate);
            }

            void Unity_Add_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A + B;
            }

            void Unity_Subtract_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A - B;
            }

            struct Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f
            {
            };

            void SG_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f(float Vector1_CCF53CDA, float Vector1_D95E40FE, float2 Vector2_AEE18C41, float2 Vector2_A9CE092C, float Vector1_F2ED6CCC, TEXTURE2D_PARAM(Texture2D_F14459DD, samplerTexture2D_F14459DD), Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f IN, out float GustNoise)
            {
                float2 _Property_A92CC1B7_Out_0 = Vector2_AEE18C41;
                float _Property_36B40CE_Out_0 = Vector1_D95E40FE;
                float _Multiply_9E28D3C4_Out_2;
                Unity_Multiply_float(_Property_36B40CE_Out_0, 2, _Multiply_9E28D3C4_Out_2);
                float2 _Add_C54F05FE_Out_2;
                Unity_Add_float2(_Property_A92CC1B7_Out_0, (_Multiply_9E28D3C4_Out_2.xx), _Add_C54F05FE_Out_2);
                float2 _Multiply_9CD1691E_Out_2;
                Unity_Multiply_float(_Add_C54F05FE_Out_2, float2(0.01, 0.01), _Multiply_9CD1691E_Out_2);
                float2 _Property_D05D9ECB_Out_0 = Vector2_A9CE092C;
                float _Property_8BFC9AA2_Out_0 = Vector1_CCF53CDA;
                float2 _Multiply_462DF694_Out_2;
                Unity_Multiply_float(_Property_D05D9ECB_Out_0, (_Property_8BFC9AA2_Out_0.xx), _Multiply_462DF694_Out_2);
                float _Property_4DB65C54_Out_0 = Vector1_F2ED6CCC;
                float2 _Multiply_50FD4B48_Out_2;
                Unity_Multiply_float(_Multiply_462DF694_Out_2, (_Property_4DB65C54_Out_0.xx), _Multiply_50FD4B48_Out_2);
                float2 _Subtract_B4A749C2_Out_2;
                Unity_Subtract_float2(_Multiply_9CD1691E_Out_2, _Multiply_50FD4B48_Out_2, _Subtract_B4A749C2_Out_2);
                float4 _SampleTexture2DLOD_46D09289_RGBA_0 = SAMPLE_TEXTURE2D_LOD(Texture2D_F14459DD, samplerTexture2D_F14459DD, _Subtract_B4A749C2_Out_2, 0);
                float _SampleTexture2DLOD_46D09289_R_5 = _SampleTexture2DLOD_46D09289_RGBA_0.r;
                float _SampleTexture2DLOD_46D09289_G_6 = _SampleTexture2DLOD_46D09289_RGBA_0.g;
                float _SampleTexture2DLOD_46D09289_B_7 = _SampleTexture2DLOD_46D09289_RGBA_0.b;
                float _SampleTexture2DLOD_46D09289_A_8 = _SampleTexture2DLOD_46D09289_RGBA_0.a;
                GustNoise = _SampleTexture2DLOD_46D09289_R_5;
            }

            void Unity_Power_float(float A, float B, out float Out)
            {
                Out = pow(A, B);
            }

            void Unity_OneMinus_float(float In, out float Out)
            {
                Out = 1 - In;
            }

            struct Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19
            {
            };

            void SG_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19(float2 Vector2_CA78C39A, float Vector1_279D2776, Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19 IN, out float RandomStiffness)
            {
                float2 _Property_475BFCB9_Out_0 = Vector2_CA78C39A;
                float2 _Multiply_7EE00C92_Out_2;
                Unity_Multiply_float(_Property_475BFCB9_Out_0, float2(10, 10), _Multiply_7EE00C92_Out_2);
                float _Split_A0FB144F_R_1 = _Multiply_7EE00C92_Out_2[0];
                float _Split_A0FB144F_G_2 = _Multiply_7EE00C92_Out_2[1];
                float _Split_A0FB144F_B_3 = 0;
                float _Split_A0FB144F_A_4 = 0;
                float _Multiply_2482A544_Out_2;
                Unity_Multiply_float(_Split_A0FB144F_R_1, _Split_A0FB144F_G_2, _Multiply_2482A544_Out_2);
                float _Fraction_B90029E4_Out_1;
                Unity_Fraction_float(_Multiply_2482A544_Out_2, _Fraction_B90029E4_Out_1);
                float _Power_E2B2B095_Out_2;
                Unity_Power_float(_Fraction_B90029E4_Out_1, 2, _Power_E2B2B095_Out_2);
                float _Property_91226CD6_Out_0 = Vector1_279D2776;
                float _OneMinus_A56B8867_Out_1;
                Unity_OneMinus_float(_Property_91226CD6_Out_0, _OneMinus_A56B8867_Out_1);
                float _Clamp_E85434A6_Out_3;
                Unity_Clamp_float(_Power_E2B2B095_Out_2, _OneMinus_A56B8867_Out_1, 1, _Clamp_E85434A6_Out_3);
                RandomStiffness = _Clamp_E85434A6_Out_3;
            }

            struct Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628
            {
            };

            void SG_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628(float Vector1_AFC49E6C, float Vector1_A18CF4DF, float Vector1_28AC83F8, float Vector1_E0042E1, float Vector1_1A24AAF, Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628 IN, out float GustStrength)
            {
                float _Property_9A741C0D_Out_0 = Vector1_AFC49E6C;
                float _Property_F564A485_Out_0 = Vector1_A18CF4DF;
                float _Multiply_248F3A68_Out_2;
                Unity_Multiply_float(_Property_9A741C0D_Out_0, _Property_F564A485_Out_0, _Multiply_248F3A68_Out_2);
                float _Clamp_64D749D9_Out_3;
                Unity_Clamp_float(_Multiply_248F3A68_Out_2, 0.1, 0.9, _Clamp_64D749D9_Out_3);
                float _OneMinus_BDC5FAC3_Out_1;
                Unity_OneMinus_float(_Clamp_64D749D9_Out_3, _OneMinus_BDC5FAC3_Out_1);
                float _Multiply_E3C6FEFE_Out_2;
                Unity_Multiply_float(_Multiply_248F3A68_Out_2, _OneMinus_BDC5FAC3_Out_1, _Multiply_E3C6FEFE_Out_2);
                float _Multiply_9087CA8A_Out_2;
                Unity_Multiply_float(_Multiply_E3C6FEFE_Out_2, 1.5, _Multiply_9087CA8A_Out_2);
                float _Property_C7E6777F_Out_0 = Vector1_28AC83F8;
                float _Multiply_1D329CB_Out_2;
                Unity_Multiply_float(_Multiply_9087CA8A_Out_2, _Property_C7E6777F_Out_0, _Multiply_1D329CB_Out_2);
                float _Property_84113466_Out_0 = Vector1_E0042E1;
                float _Multiply_9501294C_Out_2;
                Unity_Multiply_float(_Multiply_1D329CB_Out_2, _Property_84113466_Out_0, _Multiply_9501294C_Out_2);
                float _Property_57C5AF03_Out_0 = Vector1_1A24AAF;
                float _Multiply_E178164E_Out_2;
                Unity_Multiply_float(_Multiply_9501294C_Out_2, _Property_57C5AF03_Out_0, _Multiply_E178164E_Out_2);
                GustStrength = _Multiply_E178164E_Out_2;
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            struct Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a
            {
            };

            void SG_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a(float2 Vector2_287CB44E, float2 Vector2_2A17E6EA, float Vector1_F4B6A491, float Vector1_2C90770B, TEXTURE2D_PARAM(Texture2D_D44B4848, samplerTexture2D_D44B4848), float Vector1_AD94E9BC, Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a IN, out float3 ShiverNoise)
            {
                float2 _Property_961D8A0_Out_0 = Vector2_287CB44E;
                float _Property_A414F012_Out_0 = Vector1_AD94E9BC;
                float _Multiply_7DB42988_Out_2;
                Unity_Multiply_float(_Property_A414F012_Out_0, 2, _Multiply_7DB42988_Out_2);
                float2 _Add_4C3CF1F_Out_2;
                Unity_Add_float2(_Property_961D8A0_Out_0, (_Multiply_7DB42988_Out_2.xx), _Add_4C3CF1F_Out_2);
                float2 _Property_EBC67BC7_Out_0 = Vector2_2A17E6EA;
                float _Property_13D296B5_Out_0 = Vector1_F4B6A491;
                float2 _Multiply_BBB72061_Out_2;
                Unity_Multiply_float(_Property_EBC67BC7_Out_0, (_Property_13D296B5_Out_0.xx), _Multiply_BBB72061_Out_2);
                float _Property_3BB601E6_Out_0 = Vector1_2C90770B;
                float2 _Multiply_FF9010E8_Out_2;
                Unity_Multiply_float(_Multiply_BBB72061_Out_2, (_Property_3BB601E6_Out_0.xx), _Multiply_FF9010E8_Out_2);
                float2 _Subtract_6BF2D170_Out_2;
                Unity_Subtract_float2(_Add_4C3CF1F_Out_2, _Multiply_FF9010E8_Out_2, _Subtract_6BF2D170_Out_2);
                float4 _SampleTexture2DLOD_DBCD6404_RGBA_0 = SAMPLE_TEXTURE2D_LOD(Texture2D_D44B4848, samplerTexture2D_D44B4848, _Subtract_6BF2D170_Out_2, 0);
                float _SampleTexture2DLOD_DBCD6404_R_5 = _SampleTexture2DLOD_DBCD6404_RGBA_0.r;
                float _SampleTexture2DLOD_DBCD6404_G_6 = _SampleTexture2DLOD_DBCD6404_RGBA_0.g;
                float _SampleTexture2DLOD_DBCD6404_B_7 = _SampleTexture2DLOD_DBCD6404_RGBA_0.b;
                float _SampleTexture2DLOD_DBCD6404_A_8 = _SampleTexture2DLOD_DBCD6404_RGBA_0.a;
                float4 _Combine_E5D76A97_RGBA_4;
                float3 _Combine_E5D76A97_RGB_5;
                float2 _Combine_E5D76A97_RG_6;
                Unity_Combine_float(_SampleTexture2DLOD_DBCD6404_R_5, _SampleTexture2DLOD_DBCD6404_G_6, _SampleTexture2DLOD_DBCD6404_B_7, 0, _Combine_E5D76A97_RGBA_4, _Combine_E5D76A97_RGB_5, _Combine_E5D76A97_RG_6);
                float3 _Subtract_AA7C02E2_Out_2;
                Unity_Subtract_float3(_Combine_E5D76A97_RGB_5, float3(0.5, 0.5, 0.5), _Subtract_AA7C02E2_Out_2);
                float3 _Multiply_5BF7CBD7_Out_2;
                Unity_Multiply_float(_Subtract_AA7C02E2_Out_2, float3(2, 2, 2), _Multiply_5BF7CBD7_Out_2);
                ShiverNoise = _Multiply_5BF7CBD7_Out_2;
            }

            struct Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459
            {
            };

            void SG_CalculateShiver_2b675aaec6ba57b449ad461cc799d459(float3 Vector3_ED0F539A, float2 Vector2_84805101, float Vector1_BDF24CF7, float Vector1_839268A4, float Vector1_A8621014, float Vector1_2DBE6CC0, float Vector1_8A4EF006, float Vector1_ED935C73, Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459 IN, out float3 ShiverDirection, out float ShiverStrength)
            {
                float3 _Property_FC94AEBB_Out_0 = Vector3_ED0F539A;
                float _Property_4FE2271A_Out_0 = Vector1_BDF24CF7;
                float4 _Combine_328044F1_RGBA_4;
                float3 _Combine_328044F1_RGB_5;
                float2 _Combine_328044F1_RG_6;
                Unity_Combine_float(1, _Property_4FE2271A_Out_0, 1, 0, _Combine_328044F1_RGBA_4, _Combine_328044F1_RGB_5, _Combine_328044F1_RG_6);
                float3 _Multiply_4FCE02F7_Out_2;
                Unity_Multiply_float(_Property_FC94AEBB_Out_0, _Combine_328044F1_RGB_5, _Multiply_4FCE02F7_Out_2);
                float2 _Property_77EED0A8_Out_0 = Vector2_84805101;
                float _Split_2D66AF35_R_1 = _Property_77EED0A8_Out_0[0];
                float _Split_2D66AF35_G_2 = _Property_77EED0A8_Out_0[1];
                float _Split_2D66AF35_B_3 = 0;
                float _Split_2D66AF35_A_4 = 0;
                float4 _Combine_C2861A09_RGBA_4;
                float3 _Combine_C2861A09_RGB_5;
                float2 _Combine_C2861A09_RG_6;
                Unity_Combine_float(_Split_2D66AF35_R_1, _Property_4FE2271A_Out_0, _Split_2D66AF35_G_2, 0, _Combine_C2861A09_RGBA_4, _Combine_C2861A09_RGB_5, _Combine_C2861A09_RG_6);
                float3 _Lerp_A6B0BE86_Out_3;
                Unity_Lerp_float3(_Multiply_4FCE02F7_Out_2, _Combine_C2861A09_RGB_5, float3(0.5, 0.5, 0.5), _Lerp_A6B0BE86_Out_3);
                float _Property_BBBC9C1B_Out_0 = Vector1_839268A4;
                float _Length_F022B321_Out_1;
                Unity_Length_float3(_Multiply_4FCE02F7_Out_2, _Length_F022B321_Out_1);
                float _Multiply_BFD84B03_Out_2;
                Unity_Multiply_float(_Length_F022B321_Out_1, 0.5, _Multiply_BFD84B03_Out_2);
                float _Multiply_3564B68A_Out_2;
                Unity_Multiply_float(_Property_BBBC9C1B_Out_0, _Multiply_BFD84B03_Out_2, _Multiply_3564B68A_Out_2);
                float _Add_83285742_Out_2;
                Unity_Add_float(_Multiply_3564B68A_Out_2, _Length_F022B321_Out_1, _Add_83285742_Out_2);
                float _Property_45D94B1_Out_0 = Vector1_2DBE6CC0;
                float _Multiply_EA43D494_Out_2;
                Unity_Multiply_float(_Add_83285742_Out_2, _Property_45D94B1_Out_0, _Multiply_EA43D494_Out_2);
                float _Clamp_C109EA71_Out_3;
                Unity_Clamp_float(_Multiply_EA43D494_Out_2, 0.1, 0.9, _Clamp_C109EA71_Out_3);
                float _OneMinus_226F3377_Out_1;
                Unity_OneMinus_float(_Clamp_C109EA71_Out_3, _OneMinus_226F3377_Out_1);
                float _Multiply_8680628F_Out_2;
                Unity_Multiply_float(_Multiply_EA43D494_Out_2, _OneMinus_226F3377_Out_1, _Multiply_8680628F_Out_2);
                float _Multiply_B14E644_Out_2;
                Unity_Multiply_float(_Multiply_8680628F_Out_2, 1.5, _Multiply_B14E644_Out_2);
                float _Property_7F61FC78_Out_0 = Vector1_A8621014;
                float _Multiply_C89CF7DC_Out_2;
                Unity_Multiply_float(_Multiply_B14E644_Out_2, _Property_7F61FC78_Out_0, _Multiply_C89CF7DC_Out_2);
                float _Property_2BD306B6_Out_0 = Vector1_8A4EF006;
                float _Multiply_E5D34DCC_Out_2;
                Unity_Multiply_float(_Multiply_C89CF7DC_Out_2, _Property_2BD306B6_Out_0, _Multiply_E5D34DCC_Out_2);
                float _Property_DBC71A4F_Out_0 = Vector1_ED935C73;
                float _Multiply_BCACDD38_Out_2;
                Unity_Multiply_float(_Multiply_E5D34DCC_Out_2, _Property_DBC71A4F_Out_0, _Multiply_BCACDD38_Out_2);
                ShiverDirection = _Lerp_A6B0BE86_Out_3;
                ShiverStrength = _Multiply_BCACDD38_Out_2;
            }

            struct Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364
            {
            };

            void SG_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364(float3 Vector3_829210A7, float3 Vector3_1A016C4A, float Vector1_31372BF, float Vector1_E57895AF, TEXTURE2D_PARAM(Texture2D_65F71447, samplerTexture2D_65F71447), float Vector1_8836FB6A, TEXTURE2D_PARAM(Texture2D_4A3BDB6, samplerTexture2D_4A3BDB6), float Vector1_14E206AE, float Vector1_7090E96C, float Vector1_51722AC, float Vector1_A3894D2, float Vector1_6F0C3A5A, float Vector1_2D1F6C2F, float Vector1_347751CA, Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364 IN, out float GustStrength, out float ShiverStrength, out float3 ShiverDirection)
            {
                float _Property_5C7F4A8C_Out_0 = Vector1_31372BF;
                float _Property_142FEDC3_Out_0 = Vector1_347751CA;
                float3 _Property_D2FC65C3_Out_0 = Vector3_829210A7;
                float _Split_8E347DCF_R_1 = _Property_D2FC65C3_Out_0[0];
                float _Split_8E347DCF_G_2 = _Property_D2FC65C3_Out_0[1];
                float _Split_8E347DCF_B_3 = _Property_D2FC65C3_Out_0[2];
                float _Split_8E347DCF_A_4 = 0;
                float4 _Combine_9B5A76B7_RGBA_4;
                float3 _Combine_9B5A76B7_RGB_5;
                float2 _Combine_9B5A76B7_RG_6;
                Unity_Combine_float(_Split_8E347DCF_R_1, _Split_8E347DCF_B_3, 0, 0, _Combine_9B5A76B7_RGBA_4, _Combine_9B5A76B7_RGB_5, _Combine_9B5A76B7_RG_6);
                float3 _Property_5653999E_Out_0 = Vector3_1A016C4A;
                float _Split_B9CBBFE5_R_1 = _Property_5653999E_Out_0[0];
                float _Split_B9CBBFE5_G_2 = _Property_5653999E_Out_0[1];
                float _Split_B9CBBFE5_B_3 = _Property_5653999E_Out_0[2];
                float _Split_B9CBBFE5_A_4 = 0;
                float4 _Combine_DC44394B_RGBA_4;
                float3 _Combine_DC44394B_RGB_5;
                float2 _Combine_DC44394B_RG_6;
                Unity_Combine_float(_Split_B9CBBFE5_R_1, _Split_B9CBBFE5_B_3, 0, 0, _Combine_DC44394B_RGBA_4, _Combine_DC44394B_RGB_5, _Combine_DC44394B_RG_6);
                float _Property_3221EFCE_Out_0 = Vector1_E57895AF;
                Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f _GustNoiseAtPosition_3B28852B;
                float _GustNoiseAtPosition_3B28852B_GustNoise_0;
                SG_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f(_Property_5C7F4A8C_Out_0, _Property_142FEDC3_Out_0, _Combine_9B5A76B7_RG_6, _Combine_DC44394B_RG_6, _Property_3221EFCE_Out_0, TEXTURE2D_ARGS(Texture2D_65F71447, samplerTexture2D_65F71447), _GustNoiseAtPosition_3B28852B, _GustNoiseAtPosition_3B28852B_GustNoise_0);
                float _Property_1B306054_Out_0 = Vector1_A3894D2;
                float _Property_1FBC768_Out_0 = Vector1_51722AC;
                float _Property_9FB10D19_Out_0 = Vector1_14E206AE;
                Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19 _RandomStiffnessAtPosition_C9AD50AB;
                float _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0;
                SG_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19(_Combine_9B5A76B7_RG_6, _Property_9FB10D19_Out_0, _RandomStiffnessAtPosition_C9AD50AB, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0);
                float _Property_EE5A603D_Out_0 = Vector1_7090E96C;
                Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628 _CalculateGustStrength_E2853C74;
                float _CalculateGustStrength_E2853C74_GustStrength_0;
                SG_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628(_GustNoiseAtPosition_3B28852B_GustNoise_0, _Property_1B306054_Out_0, _Property_1FBC768_Out_0, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0, _Property_EE5A603D_Out_0, _CalculateGustStrength_E2853C74, _CalculateGustStrength_E2853C74_GustStrength_0);
                float _Property_DFB3FCE0_Out_0 = Vector1_31372BF;
                float _Property_8A8735CC_Out_0 = Vector1_8836FB6A;
                Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a _ShiverNoiseAtPosition_35F9220A;
                float3 _ShiverNoiseAtPosition_35F9220A_ShiverNoise_0;
                SG_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a(_Combine_9B5A76B7_RG_6, _Combine_DC44394B_RG_6, _Property_DFB3FCE0_Out_0, _Property_8A8735CC_Out_0, TEXTURE2D_ARGS(Texture2D_4A3BDB6, samplerTexture2D_4A3BDB6), _Property_142FEDC3_Out_0, _ShiverNoiseAtPosition_35F9220A, _ShiverNoiseAtPosition_35F9220A_ShiverNoise_0);
                float _Property_65F19953_Out_0 = Vector1_6F0C3A5A;
                float _Property_3A2F45FE_Out_0 = Vector1_51722AC;
                float _Property_98EF73E5_Out_0 = Vector1_2D1F6C2F;
                float _Property_6A278DE2_Out_0 = Vector1_7090E96C;
                Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459 _CalculateShiver_799DE4CB;
                float3 _CalculateShiver_799DE4CB_ShiverDirection_0;
                float _CalculateShiver_799DE4CB_ShiverStrength_1;
                SG_CalculateShiver_2b675aaec6ba57b449ad461cc799d459(_ShiverNoiseAtPosition_35F9220A_ShiverNoise_0, _Combine_DC44394B_RG_6, _Property_65F19953_Out_0, _CalculateGustStrength_E2853C74_GustStrength_0, _Property_3A2F45FE_Out_0, _Property_98EF73E5_Out_0, _Property_6A278DE2_Out_0, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0, _CalculateShiver_799DE4CB, _CalculateShiver_799DE4CB_ShiverDirection_0, _CalculateShiver_799DE4CB_ShiverStrength_1);
                GustStrength = _CalculateGustStrength_E2853C74_GustStrength_0;
                ShiverStrength = _CalculateShiver_799DE4CB_ShiverStrength_1;
                ShiverDirection = _CalculateShiver_799DE4CB_ShiverDirection_0;
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            struct Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01
            {
                float3 ObjectSpacePosition;
            };

            void SG_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01(float3 Vector3_C96069F9, float Vector1_A5EB719C, float Vector1_4D1D3B1A, float3 Vector3_C80E97FF, float3 Vector3_821C320A, float3 Vector3_4BF0DC64, Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01 IN, out float3 WorldPosition)
            {
                float3 _Property_65372844_Out_0 = Vector3_4BF0DC64;
                float3 _Property_7205E35B_Out_0 = Vector3_821C320A;
                float _Property_916D8D52_Out_0 = Vector1_4D1D3B1A;
                float3 _Multiply_CF9DF1B5_Out_2;
                Unity_Multiply_float(_Property_7205E35B_Out_0, (_Property_916D8D52_Out_0.xxx), _Multiply_CF9DF1B5_Out_2);
                float3 _Multiply_57D2E5C7_Out_2;
                Unity_Multiply_float(_Multiply_CF9DF1B5_Out_2, float3(10, 10, 10), _Multiply_57D2E5C7_Out_2);
                float3 _Add_F265DF09_Out_2;
                Unity_Add_float3(_Property_65372844_Out_0, _Multiply_57D2E5C7_Out_2, _Add_F265DF09_Out_2);
                float3 _Property_806C350F_Out_0 = Vector3_C96069F9;
                float _Property_D017A08E_Out_0 = Vector1_A5EB719C;
                float3 _Multiply_99498CF9_Out_2;
                Unity_Multiply_float(_Property_806C350F_Out_0, (_Property_D017A08E_Out_0.xxx), _Multiply_99498CF9_Out_2);
                float _Split_A5777330_R_1 = IN.ObjectSpacePosition[0];
                float _Split_A5777330_G_2 = IN.ObjectSpacePosition[1];
                float _Split_A5777330_B_3 = IN.ObjectSpacePosition[2];
                float _Split_A5777330_A_4 = 0;
                float _Clamp_C4364CA5_Out_3;
                Unity_Clamp_float(_Split_A5777330_G_2, 0, 1, _Clamp_C4364CA5_Out_3);
                float3 _Multiply_ADC4C2A_Out_2;
                Unity_Multiply_float(_Multiply_99498CF9_Out_2, (_Clamp_C4364CA5_Out_3.xxx), _Multiply_ADC4C2A_Out_2);
                float3 _Multiply_49835441_Out_2;
                Unity_Multiply_float(_Multiply_ADC4C2A_Out_2, float3(10, 10, 10), _Multiply_49835441_Out_2);
                float3 _Add_B14AAE70_Out_2;
                Unity_Add_float3(_Add_F265DF09_Out_2, _Multiply_49835441_Out_2, _Add_B14AAE70_Out_2);
                WorldPosition = _Add_B14AAE70_Out_2;
            }

            struct Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceTangent;
                float3 WorldSpaceBiTangent;
            };

            void SG_WorldToObject_c1006c77aa2ba8543ab0d5302579f549(float3 Vector3_AAF445D6, Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549 IN, out float3 ObjectPosition)
            {
                float3 _Property_51DA8EE_Out_0 = Vector3_AAF445D6;
                float3 _Transform_6FDB2E47_Out_1 = TransformWorldToObject(_Property_51DA8EE_Out_0.xyz);
                ObjectPosition = _Transform_6FDB2E47_Out_1;
            }

            void Unity_Hue_Normalized_float(float3 In, float Offset, out float3 Out)
            {
                // RGB to HSV
                float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
                float4 P = lerp(float4(In.bg, K.wz), float4(In.gb, K.xy), step(In.b, In.g));
                float4 Q = lerp(float4(P.xyw, In.r), float4(In.r, P.yzx), step(P.x, In.r));
                float D = Q.x - min(Q.w, Q.y);
                float E = 1e-10;
                float3 hsv = float3(abs(Q.z + (Q.w - Q.y)/(6.0 * D + E)), D / (Q.x + E), Q.x);

                float hue = hsv.x + Offset;
                hsv.x = (hue < 0)
                        ? hue + 1
                        : (hue > 1)
                            ? hue - 1
                            : hue;

                // HSV to RGB
                float4 K2 = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                float3 P2 = abs(frac(hsv.xxx + K2.xyz) * 6.0 - K2.www);
                Out = hsv.z * lerp(K2.xxx, saturate(P2 - K2.xxx), hsv.y);
            }

            void Unity_Saturation_float(float3 In, float Saturation, out float3 Out)
            {
                float luma = dot(In, float3(0.2126729, 0.7151522, 0.0721750));
                Out =  luma.xxx + Saturation.xxx * (In - luma.xxx);
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238 _GetPivotInWorldSpace_73F19E42;
                float3 _GetPivotInWorldSpace_73F19E42_PivotInWS_0;
                SG_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238(_GetPivotInWorldSpace_73F19E42, _GetPivotInWorldSpace_73F19E42_PivotInWS_0);
                float _Split_64420219_R_1 = IN.VertexColor[0];
                float _Split_64420219_G_2 = IN.VertexColor[1];
                float _Split_64420219_B_3 = IN.VertexColor[2];
                float _Split_64420219_A_4 = IN.VertexColor[3];
                float3 _Lerp_4531CF63_Out_3;
                Unity_Lerp_float3(_GetPivotInWorldSpace_73F19E42_PivotInWS_0, IN.WorldSpacePosition, (_Split_64420219_G_2.xxx), _Lerp_4531CF63_Out_3);
                float4 _Property_D6662DC6_Out_0 = _GlobalWindDirectionAndStrength;
                float4 _Property_9515B228_Out_0 = _WindDirectionAndStrength;
                float4 _Property_9A1EF240_Out_0 = _GlobalShiver;
                float4 _Property_777C8DB2_Out_0 = _Shiver;
                Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7 _GlobalWindParameters_B547F135;
                float3 _GlobalWindParameters_B547F135_GustDirection_0;
                float _GlobalWindParameters_B547F135_GustSpeed_1;
                float _GlobalWindParameters_B547F135_GustStrength_2;
                float _GlobalWindParameters_B547F135_ShiverSpeed_3;
                float _GlobalWindParameters_B547F135_ShiverStrength_4;
                SG_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7(_Property_D6662DC6_Out_0, _Property_9515B228_Out_0, (_Property_9A1EF240_Out_0.xy), (_Property_777C8DB2_Out_0.xy), _GlobalWindParameters_B547F135, _GlobalWindParameters_B547F135_GustDirection_0, _GlobalWindParameters_B547F135_GustSpeed_1, _GlobalWindParameters_B547F135_GustStrength_2, _GlobalWindParameters_B547F135_ShiverSpeed_3, _GlobalWindParameters_B547F135_ShiverStrength_4);
                float _Property_5F3A390D_Out_0 = _BAKEDMASK_ON;
                float3 _Subtract_BF2A75CD_Out_2;
                Unity_Subtract_float3(IN.WorldSpacePosition, _GetPivotInWorldSpace_73F19E42_PivotInWS_0, _Subtract_BF2A75CD_Out_2);
                float _Split_29C81DE4_R_1 = _Subtract_BF2A75CD_Out_2[0];
                float _Split_29C81DE4_G_2 = _Subtract_BF2A75CD_Out_2[1];
                float _Split_29C81DE4_B_3 = _Subtract_BF2A75CD_Out_2[2];
                float _Split_29C81DE4_A_4 = 0;
                float _Add_6A47DB4F_Out_2;
                Unity_Add_float(_Split_29C81DE4_R_1, _Split_29C81DE4_G_2, _Add_6A47DB4F_Out_2);
                float _Add_EC455B5D_Out_2;
                Unity_Add_float(_Add_6A47DB4F_Out_2, _Split_29C81DE4_B_3, _Add_EC455B5D_Out_2);
                float _Multiply_F013BB8B_Out_2;
                Unity_Multiply_float(_Add_EC455B5D_Out_2, 0.4, _Multiply_F013BB8B_Out_2);
                float _Fraction_7D389816_Out_1;
                Unity_Fraction_float(_Multiply_F013BB8B_Out_2, _Fraction_7D389816_Out_1);
                float _Multiply_776D3DAF_Out_2;
                Unity_Multiply_float(_Fraction_7D389816_Out_1, 0.15, _Multiply_776D3DAF_Out_2);
                float _Split_E4BB9FEC_R_1 = IN.VertexColor[0];
                float _Split_E4BB9FEC_G_2 = IN.VertexColor[1];
                float _Split_E4BB9FEC_B_3 = IN.VertexColor[2];
                float _Split_E4BB9FEC_A_4 = IN.VertexColor[3];
                float _Multiply_BC8988C3_Out_2;
                Unity_Multiply_float(_Multiply_776D3DAF_Out_2, _Split_E4BB9FEC_G_2, _Multiply_BC8988C3_Out_2);
                float _Multiply_EC5FE292_Out_2;
                Unity_Multiply_float(_Split_E4BB9FEC_R_1, 0.3, _Multiply_EC5FE292_Out_2);
                float _Add_A8423510_Out_2;
                Unity_Add_float(_Multiply_BC8988C3_Out_2, _Multiply_EC5FE292_Out_2, _Add_A8423510_Out_2);
                float _Add_CE74358C_Out_2;
                Unity_Add_float(_Add_A8423510_Out_2, IN.TimeParameters.x, _Add_CE74358C_Out_2);
                float _Multiply_1CE438D_Out_2;
                Unity_Multiply_float(_Split_E4BB9FEC_G_2, 0.5, _Multiply_1CE438D_Out_2);
                float _Add_8718B88C_Out_2;
                Unity_Add_float(_Add_CE74358C_Out_2, _Multiply_1CE438D_Out_2, _Add_8718B88C_Out_2);
                float _Property_DBA903E3_Out_0 = _UVMASK_ON;
                float4 _UV_64D01E18_Out_0 = IN.uv0;
                float _Split_A5DFBEBE_R_1 = _UV_64D01E18_Out_0[0];
                float _Split_A5DFBEBE_G_2 = _UV_64D01E18_Out_0[1];
                float _Split_A5DFBEBE_B_3 = _UV_64D01E18_Out_0[2];
                float _Split_A5DFBEBE_A_4 = _UV_64D01E18_Out_0[3];
                float _Multiply_C943DA5C_Out_2;
                Unity_Multiply_float(_Split_A5DFBEBE_G_2, 0.1, _Multiply_C943DA5C_Out_2);
                float _Branch_12012434_Out_3;
                Unity_Branch_float(_Property_DBA903E3_Out_0, _Multiply_C943DA5C_Out_2, 0, _Branch_12012434_Out_3);
                float _Add_922F2E64_Out_2;
                Unity_Add_float(IN.TimeParameters.x, _Branch_12012434_Out_3, _Add_922F2E64_Out_2);
                float _Multiply_2E689843_Out_2;
                Unity_Multiply_float(_Multiply_776D3DAF_Out_2, 0.5, _Multiply_2E689843_Out_2);
                float _Add_ED1EE4DB_Out_2;
                Unity_Add_float(_Add_922F2E64_Out_2, _Multiply_2E689843_Out_2, _Add_ED1EE4DB_Out_2);
                float _Branch_291934CD_Out_3;
                Unity_Branch_float(_Property_5F3A390D_Out_0, _Add_8718B88C_Out_2, _Add_ED1EE4DB_Out_2, _Branch_291934CD_Out_3);
                float _Property_267CF497_Out_0 = _StiffnessVariation;
                float _Property_4FB02E51_Out_0 = _BAKEDMASK_ON;
                float4 _UV_6482E163_Out_0 = IN.uv1;
                float _Split_2D1A67CF_R_1 = _UV_6482E163_Out_0[0];
                float _Split_2D1A67CF_G_2 = _UV_6482E163_Out_0[1];
                float _Split_2D1A67CF_B_3 = _UV_6482E163_Out_0[2];
                float _Split_2D1A67CF_A_4 = _UV_6482E163_Out_0[3];
                float _Multiply_F7BD1E76_Out_2;
                Unity_Multiply_float(_Split_2D1A67CF_R_1, _Split_2D1A67CF_G_2, _Multiply_F7BD1E76_Out_2);
                float _Property_B1FAFDBF_Out_0 = _UVMASK_ON;
                float4 _UV_8F58F10B_Out_0 = IN.uv0;
                float _Split_BD0858B3_R_1 = _UV_8F58F10B_Out_0[0];
                float _Split_BD0858B3_G_2 = _UV_8F58F10B_Out_0[1];
                float _Split_BD0858B3_B_3 = _UV_8F58F10B_Out_0[2];
                float _Split_BD0858B3_A_4 = _UV_8F58F10B_Out_0[3];
                float _Multiply_3FAD9403_Out_2;
                Unity_Multiply_float(_Split_BD0858B3_G_2, 0.2, _Multiply_3FAD9403_Out_2);
                float _Branch_3AF3832A_Out_3;
                Unity_Branch_float(_Property_B1FAFDBF_Out_0, _Multiply_3FAD9403_Out_2, 1, _Branch_3AF3832A_Out_3);
                float _Branch_F921E5A9_Out_3;
                Unity_Branch_float(_Property_4FB02E51_Out_0, _Multiply_F7BD1E76_Out_2, _Branch_3AF3832A_Out_3, _Branch_F921E5A9_Out_3);
                Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364 _GetWindStrength_5806EF0A;
                float _GetWindStrength_5806EF0A_GustStrength_0;
                float _GetWindStrength_5806EF0A_ShiverStrength_1;
                float3 _GetWindStrength_5806EF0A_ShiverDirection_2;
                SG_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364(_Lerp_4531CF63_Out_3, _GlobalWindParameters_B547F135_GustDirection_0, _Branch_291934CD_Out_3, _GlobalWindParameters_B547F135_GustSpeed_1, TEXTURE2D_ARGS(_GustNoise, sampler_GustNoise), _GlobalWindParameters_B547F135_ShiverSpeed_3, TEXTURE2D_ARGS(_ShiverNoise, sampler_ShiverNoise), _Property_267CF497_Out_0, 1, _Branch_F921E5A9_Out_3, _GlobalWindParameters_B547F135_GustStrength_2, 0.2, _GlobalWindParameters_B547F135_ShiverStrength_4, 0, _GetWindStrength_5806EF0A, _GetWindStrength_5806EF0A_GustStrength_0, _GetWindStrength_5806EF0A_ShiverStrength_1, _GetWindStrength_5806EF0A_ShiverDirection_2);
                Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01 _ApplyTreeWindDisplacement_8E73FF2E;
                _ApplyTreeWindDisplacement_8E73FF2E.ObjectSpacePosition = IN.ObjectSpacePosition;
                float3 _ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0;
                SG_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01(_GetWindStrength_5806EF0A_ShiverDirection_2, _GetWindStrength_5806EF0A_ShiverStrength_1, _GetWindStrength_5806EF0A_GustStrength_0, _GetPivotInWorldSpace_73F19E42_PivotInWS_0, _GlobalWindParameters_B547F135_GustDirection_0, IN.WorldSpacePosition, _ApplyTreeWindDisplacement_8E73FF2E, _ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0);
                Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549 _WorldToObject_628B231E;
                _WorldToObject_628B231E.WorldSpaceNormal = IN.WorldSpaceNormal;
                _WorldToObject_628B231E.WorldSpaceTangent = IN.WorldSpaceTangent;
                _WorldToObject_628B231E.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 _WorldToObject_628B231E_ObjectPosition_1;
                SG_WorldToObject_c1006c77aa2ba8543ab0d5302579f549(_ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0, _WorldToObject_628B231E, _WorldToObject_628B231E_ObjectPosition_1);
                description.Position = _WorldToObject_628B231E_ObjectPosition_1;
                return description;
            }

            struct SurfaceDescription
            {
                float3 Albedo;
                float3 Emission;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float4 _SampleTexture2D_F86B9939_RGBA_0 = SAMPLE_TEXTURE2D(_Albedo, sampler_Albedo, IN.uv0.xy);
                float _SampleTexture2D_F86B9939_R_4 = _SampleTexture2D_F86B9939_RGBA_0.r;
                float _SampleTexture2D_F86B9939_G_5 = _SampleTexture2D_F86B9939_RGBA_0.g;
                float _SampleTexture2D_F86B9939_B_6 = _SampleTexture2D_F86B9939_RGBA_0.b;
                float _SampleTexture2D_F86B9939_A_7 = _SampleTexture2D_F86B9939_RGBA_0.a;
                float _Property_667D0001_Out_0 = _Hue;
                float3 _Hue_BE270ED0_Out_2;
                Unity_Hue_Normalized_float((_SampleTexture2D_F86B9939_RGBA_0.xyz), _Property_667D0001_Out_0, _Hue_BE270ED0_Out_2);
                float _Property_306B4B17_Out_0 = _Saturation;
                float _Add_27F91AF7_Out_2;
                Unity_Add_float(_Property_306B4B17_Out_0, 1, _Add_27F91AF7_Out_2);
                float3 _Saturation_8EFFDFE8_Out_2;
                Unity_Saturation_float(_Hue_BE270ED0_Out_2, _Add_27F91AF7_Out_2, _Saturation_8EFFDFE8_Out_2);
                float _Property_35742C6B_Out_0 = _Lightness;
                float3 _Add_53649F0F_Out_2;
                Unity_Add_float3(_Saturation_8EFFDFE8_Out_2, (_Property_35742C6B_Out_0.xxx), _Add_53649F0F_Out_2);
                float _Property_ABA23041_Out_0 = _AlphaClipThreshold;
                surface.Albedo = _Add_53649F0F_Out_2;
                surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
                surface.Alpha = _SampleTexture2D_F86B9939_A_7;
                surface.AlphaClipThreshold = _Property_ABA23041_Out_0;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 color : COLOR;
                float4 texcoord0 : TEXCOORD0;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


        	struct VertexOutput
        	{
        	    float2 uv           : TEXCOORD0;
        	    float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                half4 uv0 : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
        	};

            float3 _LightDirection;

            VertexOutput ShadowPassVertex(GraphVertexInput v)
        	{
        	    VertexOutput o;
        	    UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 VertexColor = v.color;
                float4 uv0 = v.texcoord0;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

        		VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.WorldSpaceNormal = WorldSpaceNormal;
                vdi.WorldSpaceTangent = WorldSpaceTangent;
                vdi.WorldSpaceBiTangent = WorldSpaceBiTangent;
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.WorldSpacePosition = WorldSpacePosition;
                vdi.VertexColor = VertexColor;
                vdi.uv0 = uv0;
                vdi.uv1 = uv1;
                vdi.TimeParameters = _TimeParameters.xyz;

        	    VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

        	    // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.uv0 = uv0;
                o.uv1 = uv1;

        	    
        	    float3 positionWS = TransformObjectToWorld(v.vertex.xyz);
                float3 normalWS = TransformObjectToWorldNormal(v.normal);

                float4 clipPos = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, _LightDirection));

        	#if UNITY_REVERSED_Z
        	    clipPos.z = min(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
        	#else
        	    clipPos.z = max(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
        	#endif
                o.clipPos = clipPos;

        	    return o;
        	}

            half4 ShadowPassFragment(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 uv0 = IN.uv0;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.uv0 = uv0;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

                float3 Albedo = float3(0.5, 0.5, 0.5);
        		float3 Emission = 0;
        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Albedo = surf.Albedo;
                Emission = surf.Emission;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }

            ENDHLSL
        }

        Pass
        {
        	Name "DepthOnly"
            Tags{"LightMode" = "DepthOnly"}

            ZWrite On
            ColorMask 0

            // Material options generated by graph
            Cull Off

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex vert
            #pragma fragment frag

            // Defines generated by graph
            #define _NORMALMAP 1
            #define _AlphaClip 1

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float _AlphaClipThreshold;
            float _Hue;
            float _Saturation;
            float _Lightness;
            float _StiffnessVariation;
            float4 _WindDirectionAndStrength;
            float4 _Shiver;
            float _BAKEDMASK_ON;
            float _UVMASK_ON;
            float _VERTEXPOSITIONMASK_ON;
            CBUFFER_END

            TEXTURE2D(_Albedo); SAMPLER(sampler_Albedo); float4 _Albedo_TexelSize;
            TEXTURE2D(_BumpMap); SAMPLER(sampler_BumpMap); float4 _BumpMap_TexelSize;
            TEXTURE2D(_MaskMap); SAMPLER(sampler_MaskMap); float4 _MaskMap_TexelSize;
            TEXTURE2D(_ThicknessMap); SAMPLER(sampler_ThicknessMap); float4 _ThicknessMap_TexelSize;
            float4 _GlobalWindDirectionAndStrength;
            float4 _GlobalShiver;
            TEXTURE2D(_ShiverNoise); SAMPLER(sampler_ShiverNoise); float4 _ShiverNoise_TexelSize;
            TEXTURE2D(_GustNoise); SAMPLER(sampler_GustNoise); float4 _GustNoise_TexelSize;
            struct VertexDescriptionInputs
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceTangent;
                float3 WorldSpaceBiTangent;
                float3 ObjectSpacePosition;
                float3 WorldSpacePosition;
                float4 VertexColor;
                half4 uv0;
                half4 uv1;
                float3 TimeParameters;
            };

            struct SurfaceDescriptionInputs
            {
                half4 uv0;
            };


            struct Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238
            {
            };

            void SG_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238(Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238 IN, out float3 PivotInWS)
            {
                PivotInWS = SHADERGRAPH_OBJECT_POSITION;
            }

            void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
            {
                Out = lerp(A, B, T);
            }

            void Unity_Multiply_float (float4 A, float4 B, out float4 Out)
            {
                Out = A * B;
            }

            void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
            {
                RGBA = float4(R, G, B, A);
                RGB = float3(R, G, B);
                RG = float2(R, G);
            }

            void Unity_Length_float3(float3 In, out float Out)
            {
                Out = length(In);
            }

            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_Clamp_float(float In, float Min, float Max, out float Out)
            {
                Out = clamp(In, Min, Max);
            }

            void Unity_Normalize_float3(float3 In, out float3 Out)
            {
                Out = normalize(In);
            }

            void Unity_Maximum_float(float A, float B, out float Out)
            {
                Out = max(A, B);
            }

            void Unity_Multiply_float (float2 A, float2 B, out float2 Out)
            {
                Out = A * B;
            }

            void Unity_Maximum_float2(float2 A, float2 B, out float2 Out)
            {
                Out = max(A, B);
            }

            struct Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7
            {
            };

            void SG_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7(float4 Vector4_14B5A446, float4 Vector4_6887180D, float2 Vector2_F270B07E, float2 Vector2_70BD0D1B, Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7 IN, out float3 GustDirection, out float GustSpeed, out float GustStrength, out float ShiverSpeed, out float ShiverStrength)
            {
                float3 _Vector3_E24D7903_Out_0 = float3(0.7, 0, 0.3);
                float4 _Property_95651D48_Out_0 = Vector4_14B5A446;
                float4 _Property_FFEF34C6_Out_0 = Vector4_6887180D;
                float4 _Multiply_7F93D556_Out_2;
                Unity_Multiply_float(_Property_95651D48_Out_0, _Property_FFEF34C6_Out_0, _Multiply_7F93D556_Out_2);
                float _Split_1A6C2849_R_1 = _Multiply_7F93D556_Out_2[0];
                float _Split_1A6C2849_G_2 = _Multiply_7F93D556_Out_2[1];
                float _Split_1A6C2849_B_3 = _Multiply_7F93D556_Out_2[2];
                float _Split_1A6C2849_A_4 = _Multiply_7F93D556_Out_2[3];
                float4 _Combine_769EB158_RGBA_4;
                float3 _Combine_769EB158_RGB_5;
                float2 _Combine_769EB158_RG_6;
                Unity_Combine_float(_Split_1A6C2849_R_1, 0, _Split_1A6C2849_G_2, 0, _Combine_769EB158_RGBA_4, _Combine_769EB158_RGB_5, _Combine_769EB158_RG_6);
                float _Length_62815FED_Out_1;
                Unity_Length_float3(_Combine_769EB158_RGB_5, _Length_62815FED_Out_1);
                float _Multiply_A4A39D4F_Out_2;
                Unity_Multiply_float(_Length_62815FED_Out_1, 1000, _Multiply_A4A39D4F_Out_2);
                float _Clamp_4B28219D_Out_3;
                Unity_Clamp_float(_Multiply_A4A39D4F_Out_2, 0, 1, _Clamp_4B28219D_Out_3);
                float3 _Lerp_66854A50_Out_3;
                Unity_Lerp_float3(_Vector3_E24D7903_Out_0, _Combine_769EB158_RGB_5, (_Clamp_4B28219D_Out_3.xxx), _Lerp_66854A50_Out_3);
                float3 _Normalize_B2778668_Out_1;
                Unity_Normalize_float3(_Lerp_66854A50_Out_3, _Normalize_B2778668_Out_1);
                float _Maximum_A3AFA1AB_Out_2;
                Unity_Maximum_float(_Split_1A6C2849_B_3, 0.01, _Maximum_A3AFA1AB_Out_2);
                float _Maximum_FCE0058_Out_2;
                Unity_Maximum_float(0, _Split_1A6C2849_A_4, _Maximum_FCE0058_Out_2);
                float2 _Property_F062BDE_Out_0 = Vector2_F270B07E;
                float2 _Property_FB73C895_Out_0 = Vector2_70BD0D1B;
                float2 _Multiply_76AC0593_Out_2;
                Unity_Multiply_float(_Property_F062BDE_Out_0, _Property_FB73C895_Out_0, _Multiply_76AC0593_Out_2);
                float2 _Maximum_E318FF04_Out_2;
                Unity_Maximum_float2(_Multiply_76AC0593_Out_2, float2(0.01, 0.01), _Maximum_E318FF04_Out_2);
                float _Split_F437A5E0_R_1 = _Maximum_E318FF04_Out_2[0];
                float _Split_F437A5E0_G_2 = _Maximum_E318FF04_Out_2[1];
                float _Split_F437A5E0_B_3 = 0;
                float _Split_F437A5E0_A_4 = 0;
                GustDirection = _Normalize_B2778668_Out_1;
                GustSpeed = _Maximum_A3AFA1AB_Out_2;
                GustStrength = _Maximum_FCE0058_Out_2;
                ShiverSpeed = _Split_F437A5E0_R_1;
                ShiverStrength = _Split_F437A5E0_G_2;
            }

            void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A - B;
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_Fraction_float(float In, out float Out)
            {
                Out = frac(In);
            }

            void Unity_Branch_float(float Predicate, float True, float False, out float Out)
            {
                Out = lerp(False, True, Predicate);
            }

            void Unity_Add_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A + B;
            }

            void Unity_Subtract_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A - B;
            }

            struct Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f
            {
            };

            void SG_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f(float Vector1_CCF53CDA, float Vector1_D95E40FE, float2 Vector2_AEE18C41, float2 Vector2_A9CE092C, float Vector1_F2ED6CCC, TEXTURE2D_PARAM(Texture2D_F14459DD, samplerTexture2D_F14459DD), Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f IN, out float GustNoise)
            {
                float2 _Property_A92CC1B7_Out_0 = Vector2_AEE18C41;
                float _Property_36B40CE_Out_0 = Vector1_D95E40FE;
                float _Multiply_9E28D3C4_Out_2;
                Unity_Multiply_float(_Property_36B40CE_Out_0, 2, _Multiply_9E28D3C4_Out_2);
                float2 _Add_C54F05FE_Out_2;
                Unity_Add_float2(_Property_A92CC1B7_Out_0, (_Multiply_9E28D3C4_Out_2.xx), _Add_C54F05FE_Out_2);
                float2 _Multiply_9CD1691E_Out_2;
                Unity_Multiply_float(_Add_C54F05FE_Out_2, float2(0.01, 0.01), _Multiply_9CD1691E_Out_2);
                float2 _Property_D05D9ECB_Out_0 = Vector2_A9CE092C;
                float _Property_8BFC9AA2_Out_0 = Vector1_CCF53CDA;
                float2 _Multiply_462DF694_Out_2;
                Unity_Multiply_float(_Property_D05D9ECB_Out_0, (_Property_8BFC9AA2_Out_0.xx), _Multiply_462DF694_Out_2);
                float _Property_4DB65C54_Out_0 = Vector1_F2ED6CCC;
                float2 _Multiply_50FD4B48_Out_2;
                Unity_Multiply_float(_Multiply_462DF694_Out_2, (_Property_4DB65C54_Out_0.xx), _Multiply_50FD4B48_Out_2);
                float2 _Subtract_B4A749C2_Out_2;
                Unity_Subtract_float2(_Multiply_9CD1691E_Out_2, _Multiply_50FD4B48_Out_2, _Subtract_B4A749C2_Out_2);
                float4 _SampleTexture2DLOD_46D09289_RGBA_0 = SAMPLE_TEXTURE2D_LOD(Texture2D_F14459DD, samplerTexture2D_F14459DD, _Subtract_B4A749C2_Out_2, 0);
                float _SampleTexture2DLOD_46D09289_R_5 = _SampleTexture2DLOD_46D09289_RGBA_0.r;
                float _SampleTexture2DLOD_46D09289_G_6 = _SampleTexture2DLOD_46D09289_RGBA_0.g;
                float _SampleTexture2DLOD_46D09289_B_7 = _SampleTexture2DLOD_46D09289_RGBA_0.b;
                float _SampleTexture2DLOD_46D09289_A_8 = _SampleTexture2DLOD_46D09289_RGBA_0.a;
                GustNoise = _SampleTexture2DLOD_46D09289_R_5;
            }

            void Unity_Power_float(float A, float B, out float Out)
            {
                Out = pow(A, B);
            }

            void Unity_OneMinus_float(float In, out float Out)
            {
                Out = 1 - In;
            }

            struct Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19
            {
            };

            void SG_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19(float2 Vector2_CA78C39A, float Vector1_279D2776, Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19 IN, out float RandomStiffness)
            {
                float2 _Property_475BFCB9_Out_0 = Vector2_CA78C39A;
                float2 _Multiply_7EE00C92_Out_2;
                Unity_Multiply_float(_Property_475BFCB9_Out_0, float2(10, 10), _Multiply_7EE00C92_Out_2);
                float _Split_A0FB144F_R_1 = _Multiply_7EE00C92_Out_2[0];
                float _Split_A0FB144F_G_2 = _Multiply_7EE00C92_Out_2[1];
                float _Split_A0FB144F_B_3 = 0;
                float _Split_A0FB144F_A_4 = 0;
                float _Multiply_2482A544_Out_2;
                Unity_Multiply_float(_Split_A0FB144F_R_1, _Split_A0FB144F_G_2, _Multiply_2482A544_Out_2);
                float _Fraction_B90029E4_Out_1;
                Unity_Fraction_float(_Multiply_2482A544_Out_2, _Fraction_B90029E4_Out_1);
                float _Power_E2B2B095_Out_2;
                Unity_Power_float(_Fraction_B90029E4_Out_1, 2, _Power_E2B2B095_Out_2);
                float _Property_91226CD6_Out_0 = Vector1_279D2776;
                float _OneMinus_A56B8867_Out_1;
                Unity_OneMinus_float(_Property_91226CD6_Out_0, _OneMinus_A56B8867_Out_1);
                float _Clamp_E85434A6_Out_3;
                Unity_Clamp_float(_Power_E2B2B095_Out_2, _OneMinus_A56B8867_Out_1, 1, _Clamp_E85434A6_Out_3);
                RandomStiffness = _Clamp_E85434A6_Out_3;
            }

            struct Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628
            {
            };

            void SG_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628(float Vector1_AFC49E6C, float Vector1_A18CF4DF, float Vector1_28AC83F8, float Vector1_E0042E1, float Vector1_1A24AAF, Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628 IN, out float GustStrength)
            {
                float _Property_9A741C0D_Out_0 = Vector1_AFC49E6C;
                float _Property_F564A485_Out_0 = Vector1_A18CF4DF;
                float _Multiply_248F3A68_Out_2;
                Unity_Multiply_float(_Property_9A741C0D_Out_0, _Property_F564A485_Out_0, _Multiply_248F3A68_Out_2);
                float _Clamp_64D749D9_Out_3;
                Unity_Clamp_float(_Multiply_248F3A68_Out_2, 0.1, 0.9, _Clamp_64D749D9_Out_3);
                float _OneMinus_BDC5FAC3_Out_1;
                Unity_OneMinus_float(_Clamp_64D749D9_Out_3, _OneMinus_BDC5FAC3_Out_1);
                float _Multiply_E3C6FEFE_Out_2;
                Unity_Multiply_float(_Multiply_248F3A68_Out_2, _OneMinus_BDC5FAC3_Out_1, _Multiply_E3C6FEFE_Out_2);
                float _Multiply_9087CA8A_Out_2;
                Unity_Multiply_float(_Multiply_E3C6FEFE_Out_2, 1.5, _Multiply_9087CA8A_Out_2);
                float _Property_C7E6777F_Out_0 = Vector1_28AC83F8;
                float _Multiply_1D329CB_Out_2;
                Unity_Multiply_float(_Multiply_9087CA8A_Out_2, _Property_C7E6777F_Out_0, _Multiply_1D329CB_Out_2);
                float _Property_84113466_Out_0 = Vector1_E0042E1;
                float _Multiply_9501294C_Out_2;
                Unity_Multiply_float(_Multiply_1D329CB_Out_2, _Property_84113466_Out_0, _Multiply_9501294C_Out_2);
                float _Property_57C5AF03_Out_0 = Vector1_1A24AAF;
                float _Multiply_E178164E_Out_2;
                Unity_Multiply_float(_Multiply_9501294C_Out_2, _Property_57C5AF03_Out_0, _Multiply_E178164E_Out_2);
                GustStrength = _Multiply_E178164E_Out_2;
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            struct Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a
            {
            };

            void SG_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a(float2 Vector2_287CB44E, float2 Vector2_2A17E6EA, float Vector1_F4B6A491, float Vector1_2C90770B, TEXTURE2D_PARAM(Texture2D_D44B4848, samplerTexture2D_D44B4848), float Vector1_AD94E9BC, Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a IN, out float3 ShiverNoise)
            {
                float2 _Property_961D8A0_Out_0 = Vector2_287CB44E;
                float _Property_A414F012_Out_0 = Vector1_AD94E9BC;
                float _Multiply_7DB42988_Out_2;
                Unity_Multiply_float(_Property_A414F012_Out_0, 2, _Multiply_7DB42988_Out_2);
                float2 _Add_4C3CF1F_Out_2;
                Unity_Add_float2(_Property_961D8A0_Out_0, (_Multiply_7DB42988_Out_2.xx), _Add_4C3CF1F_Out_2);
                float2 _Property_EBC67BC7_Out_0 = Vector2_2A17E6EA;
                float _Property_13D296B5_Out_0 = Vector1_F4B6A491;
                float2 _Multiply_BBB72061_Out_2;
                Unity_Multiply_float(_Property_EBC67BC7_Out_0, (_Property_13D296B5_Out_0.xx), _Multiply_BBB72061_Out_2);
                float _Property_3BB601E6_Out_0 = Vector1_2C90770B;
                float2 _Multiply_FF9010E8_Out_2;
                Unity_Multiply_float(_Multiply_BBB72061_Out_2, (_Property_3BB601E6_Out_0.xx), _Multiply_FF9010E8_Out_2);
                float2 _Subtract_6BF2D170_Out_2;
                Unity_Subtract_float2(_Add_4C3CF1F_Out_2, _Multiply_FF9010E8_Out_2, _Subtract_6BF2D170_Out_2);
                float4 _SampleTexture2DLOD_DBCD6404_RGBA_0 = SAMPLE_TEXTURE2D_LOD(Texture2D_D44B4848, samplerTexture2D_D44B4848, _Subtract_6BF2D170_Out_2, 0);
                float _SampleTexture2DLOD_DBCD6404_R_5 = _SampleTexture2DLOD_DBCD6404_RGBA_0.r;
                float _SampleTexture2DLOD_DBCD6404_G_6 = _SampleTexture2DLOD_DBCD6404_RGBA_0.g;
                float _SampleTexture2DLOD_DBCD6404_B_7 = _SampleTexture2DLOD_DBCD6404_RGBA_0.b;
                float _SampleTexture2DLOD_DBCD6404_A_8 = _SampleTexture2DLOD_DBCD6404_RGBA_0.a;
                float4 _Combine_E5D76A97_RGBA_4;
                float3 _Combine_E5D76A97_RGB_5;
                float2 _Combine_E5D76A97_RG_6;
                Unity_Combine_float(_SampleTexture2DLOD_DBCD6404_R_5, _SampleTexture2DLOD_DBCD6404_G_6, _SampleTexture2DLOD_DBCD6404_B_7, 0, _Combine_E5D76A97_RGBA_4, _Combine_E5D76A97_RGB_5, _Combine_E5D76A97_RG_6);
                float3 _Subtract_AA7C02E2_Out_2;
                Unity_Subtract_float3(_Combine_E5D76A97_RGB_5, float3(0.5, 0.5, 0.5), _Subtract_AA7C02E2_Out_2);
                float3 _Multiply_5BF7CBD7_Out_2;
                Unity_Multiply_float(_Subtract_AA7C02E2_Out_2, float3(2, 2, 2), _Multiply_5BF7CBD7_Out_2);
                ShiverNoise = _Multiply_5BF7CBD7_Out_2;
            }

            struct Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459
            {
            };

            void SG_CalculateShiver_2b675aaec6ba57b449ad461cc799d459(float3 Vector3_ED0F539A, float2 Vector2_84805101, float Vector1_BDF24CF7, float Vector1_839268A4, float Vector1_A8621014, float Vector1_2DBE6CC0, float Vector1_8A4EF006, float Vector1_ED935C73, Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459 IN, out float3 ShiverDirection, out float ShiverStrength)
            {
                float3 _Property_FC94AEBB_Out_0 = Vector3_ED0F539A;
                float _Property_4FE2271A_Out_0 = Vector1_BDF24CF7;
                float4 _Combine_328044F1_RGBA_4;
                float3 _Combine_328044F1_RGB_5;
                float2 _Combine_328044F1_RG_6;
                Unity_Combine_float(1, _Property_4FE2271A_Out_0, 1, 0, _Combine_328044F1_RGBA_4, _Combine_328044F1_RGB_5, _Combine_328044F1_RG_6);
                float3 _Multiply_4FCE02F7_Out_2;
                Unity_Multiply_float(_Property_FC94AEBB_Out_0, _Combine_328044F1_RGB_5, _Multiply_4FCE02F7_Out_2);
                float2 _Property_77EED0A8_Out_0 = Vector2_84805101;
                float _Split_2D66AF35_R_1 = _Property_77EED0A8_Out_0[0];
                float _Split_2D66AF35_G_2 = _Property_77EED0A8_Out_0[1];
                float _Split_2D66AF35_B_3 = 0;
                float _Split_2D66AF35_A_4 = 0;
                float4 _Combine_C2861A09_RGBA_4;
                float3 _Combine_C2861A09_RGB_5;
                float2 _Combine_C2861A09_RG_6;
                Unity_Combine_float(_Split_2D66AF35_R_1, _Property_4FE2271A_Out_0, _Split_2D66AF35_G_2, 0, _Combine_C2861A09_RGBA_4, _Combine_C2861A09_RGB_5, _Combine_C2861A09_RG_6);
                float3 _Lerp_A6B0BE86_Out_3;
                Unity_Lerp_float3(_Multiply_4FCE02F7_Out_2, _Combine_C2861A09_RGB_5, float3(0.5, 0.5, 0.5), _Lerp_A6B0BE86_Out_3);
                float _Property_BBBC9C1B_Out_0 = Vector1_839268A4;
                float _Length_F022B321_Out_1;
                Unity_Length_float3(_Multiply_4FCE02F7_Out_2, _Length_F022B321_Out_1);
                float _Multiply_BFD84B03_Out_2;
                Unity_Multiply_float(_Length_F022B321_Out_1, 0.5, _Multiply_BFD84B03_Out_2);
                float _Multiply_3564B68A_Out_2;
                Unity_Multiply_float(_Property_BBBC9C1B_Out_0, _Multiply_BFD84B03_Out_2, _Multiply_3564B68A_Out_2);
                float _Add_83285742_Out_2;
                Unity_Add_float(_Multiply_3564B68A_Out_2, _Length_F022B321_Out_1, _Add_83285742_Out_2);
                float _Property_45D94B1_Out_0 = Vector1_2DBE6CC0;
                float _Multiply_EA43D494_Out_2;
                Unity_Multiply_float(_Add_83285742_Out_2, _Property_45D94B1_Out_0, _Multiply_EA43D494_Out_2);
                float _Clamp_C109EA71_Out_3;
                Unity_Clamp_float(_Multiply_EA43D494_Out_2, 0.1, 0.9, _Clamp_C109EA71_Out_3);
                float _OneMinus_226F3377_Out_1;
                Unity_OneMinus_float(_Clamp_C109EA71_Out_3, _OneMinus_226F3377_Out_1);
                float _Multiply_8680628F_Out_2;
                Unity_Multiply_float(_Multiply_EA43D494_Out_2, _OneMinus_226F3377_Out_1, _Multiply_8680628F_Out_2);
                float _Multiply_B14E644_Out_2;
                Unity_Multiply_float(_Multiply_8680628F_Out_2, 1.5, _Multiply_B14E644_Out_2);
                float _Property_7F61FC78_Out_0 = Vector1_A8621014;
                float _Multiply_C89CF7DC_Out_2;
                Unity_Multiply_float(_Multiply_B14E644_Out_2, _Property_7F61FC78_Out_0, _Multiply_C89CF7DC_Out_2);
                float _Property_2BD306B6_Out_0 = Vector1_8A4EF006;
                float _Multiply_E5D34DCC_Out_2;
                Unity_Multiply_float(_Multiply_C89CF7DC_Out_2, _Property_2BD306B6_Out_0, _Multiply_E5D34DCC_Out_2);
                float _Property_DBC71A4F_Out_0 = Vector1_ED935C73;
                float _Multiply_BCACDD38_Out_2;
                Unity_Multiply_float(_Multiply_E5D34DCC_Out_2, _Property_DBC71A4F_Out_0, _Multiply_BCACDD38_Out_2);
                ShiverDirection = _Lerp_A6B0BE86_Out_3;
                ShiverStrength = _Multiply_BCACDD38_Out_2;
            }

            struct Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364
            {
            };

            void SG_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364(float3 Vector3_829210A7, float3 Vector3_1A016C4A, float Vector1_31372BF, float Vector1_E57895AF, TEXTURE2D_PARAM(Texture2D_65F71447, samplerTexture2D_65F71447), float Vector1_8836FB6A, TEXTURE2D_PARAM(Texture2D_4A3BDB6, samplerTexture2D_4A3BDB6), float Vector1_14E206AE, float Vector1_7090E96C, float Vector1_51722AC, float Vector1_A3894D2, float Vector1_6F0C3A5A, float Vector1_2D1F6C2F, float Vector1_347751CA, Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364 IN, out float GustStrength, out float ShiverStrength, out float3 ShiverDirection)
            {
                float _Property_5C7F4A8C_Out_0 = Vector1_31372BF;
                float _Property_142FEDC3_Out_0 = Vector1_347751CA;
                float3 _Property_D2FC65C3_Out_0 = Vector3_829210A7;
                float _Split_8E347DCF_R_1 = _Property_D2FC65C3_Out_0[0];
                float _Split_8E347DCF_G_2 = _Property_D2FC65C3_Out_0[1];
                float _Split_8E347DCF_B_3 = _Property_D2FC65C3_Out_0[2];
                float _Split_8E347DCF_A_4 = 0;
                float4 _Combine_9B5A76B7_RGBA_4;
                float3 _Combine_9B5A76B7_RGB_5;
                float2 _Combine_9B5A76B7_RG_6;
                Unity_Combine_float(_Split_8E347DCF_R_1, _Split_8E347DCF_B_3, 0, 0, _Combine_9B5A76B7_RGBA_4, _Combine_9B5A76B7_RGB_5, _Combine_9B5A76B7_RG_6);
                float3 _Property_5653999E_Out_0 = Vector3_1A016C4A;
                float _Split_B9CBBFE5_R_1 = _Property_5653999E_Out_0[0];
                float _Split_B9CBBFE5_G_2 = _Property_5653999E_Out_0[1];
                float _Split_B9CBBFE5_B_3 = _Property_5653999E_Out_0[2];
                float _Split_B9CBBFE5_A_4 = 0;
                float4 _Combine_DC44394B_RGBA_4;
                float3 _Combine_DC44394B_RGB_5;
                float2 _Combine_DC44394B_RG_6;
                Unity_Combine_float(_Split_B9CBBFE5_R_1, _Split_B9CBBFE5_B_3, 0, 0, _Combine_DC44394B_RGBA_4, _Combine_DC44394B_RGB_5, _Combine_DC44394B_RG_6);
                float _Property_3221EFCE_Out_0 = Vector1_E57895AF;
                Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f _GustNoiseAtPosition_3B28852B;
                float _GustNoiseAtPosition_3B28852B_GustNoise_0;
                SG_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f(_Property_5C7F4A8C_Out_0, _Property_142FEDC3_Out_0, _Combine_9B5A76B7_RG_6, _Combine_DC44394B_RG_6, _Property_3221EFCE_Out_0, TEXTURE2D_ARGS(Texture2D_65F71447, samplerTexture2D_65F71447), _GustNoiseAtPosition_3B28852B, _GustNoiseAtPosition_3B28852B_GustNoise_0);
                float _Property_1B306054_Out_0 = Vector1_A3894D2;
                float _Property_1FBC768_Out_0 = Vector1_51722AC;
                float _Property_9FB10D19_Out_0 = Vector1_14E206AE;
                Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19 _RandomStiffnessAtPosition_C9AD50AB;
                float _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0;
                SG_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19(_Combine_9B5A76B7_RG_6, _Property_9FB10D19_Out_0, _RandomStiffnessAtPosition_C9AD50AB, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0);
                float _Property_EE5A603D_Out_0 = Vector1_7090E96C;
                Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628 _CalculateGustStrength_E2853C74;
                float _CalculateGustStrength_E2853C74_GustStrength_0;
                SG_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628(_GustNoiseAtPosition_3B28852B_GustNoise_0, _Property_1B306054_Out_0, _Property_1FBC768_Out_0, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0, _Property_EE5A603D_Out_0, _CalculateGustStrength_E2853C74, _CalculateGustStrength_E2853C74_GustStrength_0);
                float _Property_DFB3FCE0_Out_0 = Vector1_31372BF;
                float _Property_8A8735CC_Out_0 = Vector1_8836FB6A;
                Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a _ShiverNoiseAtPosition_35F9220A;
                float3 _ShiverNoiseAtPosition_35F9220A_ShiverNoise_0;
                SG_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a(_Combine_9B5A76B7_RG_6, _Combine_DC44394B_RG_6, _Property_DFB3FCE0_Out_0, _Property_8A8735CC_Out_0, TEXTURE2D_ARGS(Texture2D_4A3BDB6, samplerTexture2D_4A3BDB6), _Property_142FEDC3_Out_0, _ShiverNoiseAtPosition_35F9220A, _ShiverNoiseAtPosition_35F9220A_ShiverNoise_0);
                float _Property_65F19953_Out_0 = Vector1_6F0C3A5A;
                float _Property_3A2F45FE_Out_0 = Vector1_51722AC;
                float _Property_98EF73E5_Out_0 = Vector1_2D1F6C2F;
                float _Property_6A278DE2_Out_0 = Vector1_7090E96C;
                Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459 _CalculateShiver_799DE4CB;
                float3 _CalculateShiver_799DE4CB_ShiverDirection_0;
                float _CalculateShiver_799DE4CB_ShiverStrength_1;
                SG_CalculateShiver_2b675aaec6ba57b449ad461cc799d459(_ShiverNoiseAtPosition_35F9220A_ShiverNoise_0, _Combine_DC44394B_RG_6, _Property_65F19953_Out_0, _CalculateGustStrength_E2853C74_GustStrength_0, _Property_3A2F45FE_Out_0, _Property_98EF73E5_Out_0, _Property_6A278DE2_Out_0, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0, _CalculateShiver_799DE4CB, _CalculateShiver_799DE4CB_ShiverDirection_0, _CalculateShiver_799DE4CB_ShiverStrength_1);
                GustStrength = _CalculateGustStrength_E2853C74_GustStrength_0;
                ShiverStrength = _CalculateShiver_799DE4CB_ShiverStrength_1;
                ShiverDirection = _CalculateShiver_799DE4CB_ShiverDirection_0;
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            struct Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01
            {
                float3 ObjectSpacePosition;
            };

            void SG_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01(float3 Vector3_C96069F9, float Vector1_A5EB719C, float Vector1_4D1D3B1A, float3 Vector3_C80E97FF, float3 Vector3_821C320A, float3 Vector3_4BF0DC64, Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01 IN, out float3 WorldPosition)
            {
                float3 _Property_65372844_Out_0 = Vector3_4BF0DC64;
                float3 _Property_7205E35B_Out_0 = Vector3_821C320A;
                float _Property_916D8D52_Out_0 = Vector1_4D1D3B1A;
                float3 _Multiply_CF9DF1B5_Out_2;
                Unity_Multiply_float(_Property_7205E35B_Out_0, (_Property_916D8D52_Out_0.xxx), _Multiply_CF9DF1B5_Out_2);
                float3 _Multiply_57D2E5C7_Out_2;
                Unity_Multiply_float(_Multiply_CF9DF1B5_Out_2, float3(10, 10, 10), _Multiply_57D2E5C7_Out_2);
                float3 _Add_F265DF09_Out_2;
                Unity_Add_float3(_Property_65372844_Out_0, _Multiply_57D2E5C7_Out_2, _Add_F265DF09_Out_2);
                float3 _Property_806C350F_Out_0 = Vector3_C96069F9;
                float _Property_D017A08E_Out_0 = Vector1_A5EB719C;
                float3 _Multiply_99498CF9_Out_2;
                Unity_Multiply_float(_Property_806C350F_Out_0, (_Property_D017A08E_Out_0.xxx), _Multiply_99498CF9_Out_2);
                float _Split_A5777330_R_1 = IN.ObjectSpacePosition[0];
                float _Split_A5777330_G_2 = IN.ObjectSpacePosition[1];
                float _Split_A5777330_B_3 = IN.ObjectSpacePosition[2];
                float _Split_A5777330_A_4 = 0;
                float _Clamp_C4364CA5_Out_3;
                Unity_Clamp_float(_Split_A5777330_G_2, 0, 1, _Clamp_C4364CA5_Out_3);
                float3 _Multiply_ADC4C2A_Out_2;
                Unity_Multiply_float(_Multiply_99498CF9_Out_2, (_Clamp_C4364CA5_Out_3.xxx), _Multiply_ADC4C2A_Out_2);
                float3 _Multiply_49835441_Out_2;
                Unity_Multiply_float(_Multiply_ADC4C2A_Out_2, float3(10, 10, 10), _Multiply_49835441_Out_2);
                float3 _Add_B14AAE70_Out_2;
                Unity_Add_float3(_Add_F265DF09_Out_2, _Multiply_49835441_Out_2, _Add_B14AAE70_Out_2);
                WorldPosition = _Add_B14AAE70_Out_2;
            }

            struct Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceTangent;
                float3 WorldSpaceBiTangent;
            };

            void SG_WorldToObject_c1006c77aa2ba8543ab0d5302579f549(float3 Vector3_AAF445D6, Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549 IN, out float3 ObjectPosition)
            {
                float3 _Property_51DA8EE_Out_0 = Vector3_AAF445D6;
                float3 _Transform_6FDB2E47_Out_1 = TransformWorldToObject(_Property_51DA8EE_Out_0.xyz);
                ObjectPosition = _Transform_6FDB2E47_Out_1;
            }

            void Unity_Hue_Normalized_float(float3 In, float Offset, out float3 Out)
            {
                // RGB to HSV
                float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
                float4 P = lerp(float4(In.bg, K.wz), float4(In.gb, K.xy), step(In.b, In.g));
                float4 Q = lerp(float4(P.xyw, In.r), float4(In.r, P.yzx), step(P.x, In.r));
                float D = Q.x - min(Q.w, Q.y);
                float E = 1e-10;
                float3 hsv = float3(abs(Q.z + (Q.w - Q.y)/(6.0 * D + E)), D / (Q.x + E), Q.x);

                float hue = hsv.x + Offset;
                hsv.x = (hue < 0)
                        ? hue + 1
                        : (hue > 1)
                            ? hue - 1
                            : hue;

                // HSV to RGB
                float4 K2 = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                float3 P2 = abs(frac(hsv.xxx + K2.xyz) * 6.0 - K2.www);
                Out = hsv.z * lerp(K2.xxx, saturate(P2 - K2.xxx), hsv.y);
            }

            void Unity_Saturation_float(float3 In, float Saturation, out float3 Out)
            {
                float luma = dot(In, float3(0.2126729, 0.7151522, 0.0721750));
                Out =  luma.xxx + Saturation.xxx * (In - luma.xxx);
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238 _GetPivotInWorldSpace_73F19E42;
                float3 _GetPivotInWorldSpace_73F19E42_PivotInWS_0;
                SG_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238(_GetPivotInWorldSpace_73F19E42, _GetPivotInWorldSpace_73F19E42_PivotInWS_0);
                float _Split_64420219_R_1 = IN.VertexColor[0];
                float _Split_64420219_G_2 = IN.VertexColor[1];
                float _Split_64420219_B_3 = IN.VertexColor[2];
                float _Split_64420219_A_4 = IN.VertexColor[3];
                float3 _Lerp_4531CF63_Out_3;
                Unity_Lerp_float3(_GetPivotInWorldSpace_73F19E42_PivotInWS_0, IN.WorldSpacePosition, (_Split_64420219_G_2.xxx), _Lerp_4531CF63_Out_3);
                float4 _Property_D6662DC6_Out_0 = _GlobalWindDirectionAndStrength;
                float4 _Property_9515B228_Out_0 = _WindDirectionAndStrength;
                float4 _Property_9A1EF240_Out_0 = _GlobalShiver;
                float4 _Property_777C8DB2_Out_0 = _Shiver;
                Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7 _GlobalWindParameters_B547F135;
                float3 _GlobalWindParameters_B547F135_GustDirection_0;
                float _GlobalWindParameters_B547F135_GustSpeed_1;
                float _GlobalWindParameters_B547F135_GustStrength_2;
                float _GlobalWindParameters_B547F135_ShiverSpeed_3;
                float _GlobalWindParameters_B547F135_ShiverStrength_4;
                SG_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7(_Property_D6662DC6_Out_0, _Property_9515B228_Out_0, (_Property_9A1EF240_Out_0.xy), (_Property_777C8DB2_Out_0.xy), _GlobalWindParameters_B547F135, _GlobalWindParameters_B547F135_GustDirection_0, _GlobalWindParameters_B547F135_GustSpeed_1, _GlobalWindParameters_B547F135_GustStrength_2, _GlobalWindParameters_B547F135_ShiverSpeed_3, _GlobalWindParameters_B547F135_ShiverStrength_4);
                float _Property_5F3A390D_Out_0 = _BAKEDMASK_ON;
                float3 _Subtract_BF2A75CD_Out_2;
                Unity_Subtract_float3(IN.WorldSpacePosition, _GetPivotInWorldSpace_73F19E42_PivotInWS_0, _Subtract_BF2A75CD_Out_2);
                float _Split_29C81DE4_R_1 = _Subtract_BF2A75CD_Out_2[0];
                float _Split_29C81DE4_G_2 = _Subtract_BF2A75CD_Out_2[1];
                float _Split_29C81DE4_B_3 = _Subtract_BF2A75CD_Out_2[2];
                float _Split_29C81DE4_A_4 = 0;
                float _Add_6A47DB4F_Out_2;
                Unity_Add_float(_Split_29C81DE4_R_1, _Split_29C81DE4_G_2, _Add_6A47DB4F_Out_2);
                float _Add_EC455B5D_Out_2;
                Unity_Add_float(_Add_6A47DB4F_Out_2, _Split_29C81DE4_B_3, _Add_EC455B5D_Out_2);
                float _Multiply_F013BB8B_Out_2;
                Unity_Multiply_float(_Add_EC455B5D_Out_2, 0.4, _Multiply_F013BB8B_Out_2);
                float _Fraction_7D389816_Out_1;
                Unity_Fraction_float(_Multiply_F013BB8B_Out_2, _Fraction_7D389816_Out_1);
                float _Multiply_776D3DAF_Out_2;
                Unity_Multiply_float(_Fraction_7D389816_Out_1, 0.15, _Multiply_776D3DAF_Out_2);
                float _Split_E4BB9FEC_R_1 = IN.VertexColor[0];
                float _Split_E4BB9FEC_G_2 = IN.VertexColor[1];
                float _Split_E4BB9FEC_B_3 = IN.VertexColor[2];
                float _Split_E4BB9FEC_A_4 = IN.VertexColor[3];
                float _Multiply_BC8988C3_Out_2;
                Unity_Multiply_float(_Multiply_776D3DAF_Out_2, _Split_E4BB9FEC_G_2, _Multiply_BC8988C3_Out_2);
                float _Multiply_EC5FE292_Out_2;
                Unity_Multiply_float(_Split_E4BB9FEC_R_1, 0.3, _Multiply_EC5FE292_Out_2);
                float _Add_A8423510_Out_2;
                Unity_Add_float(_Multiply_BC8988C3_Out_2, _Multiply_EC5FE292_Out_2, _Add_A8423510_Out_2);
                float _Add_CE74358C_Out_2;
                Unity_Add_float(_Add_A8423510_Out_2, IN.TimeParameters.x, _Add_CE74358C_Out_2);
                float _Multiply_1CE438D_Out_2;
                Unity_Multiply_float(_Split_E4BB9FEC_G_2, 0.5, _Multiply_1CE438D_Out_2);
                float _Add_8718B88C_Out_2;
                Unity_Add_float(_Add_CE74358C_Out_2, _Multiply_1CE438D_Out_2, _Add_8718B88C_Out_2);
                float _Property_DBA903E3_Out_0 = _UVMASK_ON;
                float4 _UV_64D01E18_Out_0 = IN.uv0;
                float _Split_A5DFBEBE_R_1 = _UV_64D01E18_Out_0[0];
                float _Split_A5DFBEBE_G_2 = _UV_64D01E18_Out_0[1];
                float _Split_A5DFBEBE_B_3 = _UV_64D01E18_Out_0[2];
                float _Split_A5DFBEBE_A_4 = _UV_64D01E18_Out_0[3];
                float _Multiply_C943DA5C_Out_2;
                Unity_Multiply_float(_Split_A5DFBEBE_G_2, 0.1, _Multiply_C943DA5C_Out_2);
                float _Branch_12012434_Out_3;
                Unity_Branch_float(_Property_DBA903E3_Out_0, _Multiply_C943DA5C_Out_2, 0, _Branch_12012434_Out_3);
                float _Add_922F2E64_Out_2;
                Unity_Add_float(IN.TimeParameters.x, _Branch_12012434_Out_3, _Add_922F2E64_Out_2);
                float _Multiply_2E689843_Out_2;
                Unity_Multiply_float(_Multiply_776D3DAF_Out_2, 0.5, _Multiply_2E689843_Out_2);
                float _Add_ED1EE4DB_Out_2;
                Unity_Add_float(_Add_922F2E64_Out_2, _Multiply_2E689843_Out_2, _Add_ED1EE4DB_Out_2);
                float _Branch_291934CD_Out_3;
                Unity_Branch_float(_Property_5F3A390D_Out_0, _Add_8718B88C_Out_2, _Add_ED1EE4DB_Out_2, _Branch_291934CD_Out_3);
                float _Property_267CF497_Out_0 = _StiffnessVariation;
                float _Property_4FB02E51_Out_0 = _BAKEDMASK_ON;
                float4 _UV_6482E163_Out_0 = IN.uv1;
                float _Split_2D1A67CF_R_1 = _UV_6482E163_Out_0[0];
                float _Split_2D1A67CF_G_2 = _UV_6482E163_Out_0[1];
                float _Split_2D1A67CF_B_3 = _UV_6482E163_Out_0[2];
                float _Split_2D1A67CF_A_4 = _UV_6482E163_Out_0[3];
                float _Multiply_F7BD1E76_Out_2;
                Unity_Multiply_float(_Split_2D1A67CF_R_1, _Split_2D1A67CF_G_2, _Multiply_F7BD1E76_Out_2);
                float _Property_B1FAFDBF_Out_0 = _UVMASK_ON;
                float4 _UV_8F58F10B_Out_0 = IN.uv0;
                float _Split_BD0858B3_R_1 = _UV_8F58F10B_Out_0[0];
                float _Split_BD0858B3_G_2 = _UV_8F58F10B_Out_0[1];
                float _Split_BD0858B3_B_3 = _UV_8F58F10B_Out_0[2];
                float _Split_BD0858B3_A_4 = _UV_8F58F10B_Out_0[3];
                float _Multiply_3FAD9403_Out_2;
                Unity_Multiply_float(_Split_BD0858B3_G_2, 0.2, _Multiply_3FAD9403_Out_2);
                float _Branch_3AF3832A_Out_3;
                Unity_Branch_float(_Property_B1FAFDBF_Out_0, _Multiply_3FAD9403_Out_2, 1, _Branch_3AF3832A_Out_3);
                float _Branch_F921E5A9_Out_3;
                Unity_Branch_float(_Property_4FB02E51_Out_0, _Multiply_F7BD1E76_Out_2, _Branch_3AF3832A_Out_3, _Branch_F921E5A9_Out_3);
                Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364 _GetWindStrength_5806EF0A;
                float _GetWindStrength_5806EF0A_GustStrength_0;
                float _GetWindStrength_5806EF0A_ShiverStrength_1;
                float3 _GetWindStrength_5806EF0A_ShiverDirection_2;
                SG_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364(_Lerp_4531CF63_Out_3, _GlobalWindParameters_B547F135_GustDirection_0, _Branch_291934CD_Out_3, _GlobalWindParameters_B547F135_GustSpeed_1, TEXTURE2D_ARGS(_GustNoise, sampler_GustNoise), _GlobalWindParameters_B547F135_ShiverSpeed_3, TEXTURE2D_ARGS(_ShiverNoise, sampler_ShiverNoise), _Property_267CF497_Out_0, 1, _Branch_F921E5A9_Out_3, _GlobalWindParameters_B547F135_GustStrength_2, 0.2, _GlobalWindParameters_B547F135_ShiverStrength_4, 0, _GetWindStrength_5806EF0A, _GetWindStrength_5806EF0A_GustStrength_0, _GetWindStrength_5806EF0A_ShiverStrength_1, _GetWindStrength_5806EF0A_ShiverDirection_2);
                Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01 _ApplyTreeWindDisplacement_8E73FF2E;
                _ApplyTreeWindDisplacement_8E73FF2E.ObjectSpacePosition = IN.ObjectSpacePosition;
                float3 _ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0;
                SG_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01(_GetWindStrength_5806EF0A_ShiverDirection_2, _GetWindStrength_5806EF0A_ShiverStrength_1, _GetWindStrength_5806EF0A_GustStrength_0, _GetPivotInWorldSpace_73F19E42_PivotInWS_0, _GlobalWindParameters_B547F135_GustDirection_0, IN.WorldSpacePosition, _ApplyTreeWindDisplacement_8E73FF2E, _ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0);
                Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549 _WorldToObject_628B231E;
                _WorldToObject_628B231E.WorldSpaceNormal = IN.WorldSpaceNormal;
                _WorldToObject_628B231E.WorldSpaceTangent = IN.WorldSpaceTangent;
                _WorldToObject_628B231E.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 _WorldToObject_628B231E_ObjectPosition_1;
                SG_WorldToObject_c1006c77aa2ba8543ab0d5302579f549(_ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0, _WorldToObject_628B231E, _WorldToObject_628B231E_ObjectPosition_1);
                description.Position = _WorldToObject_628B231E_ObjectPosition_1;
                return description;
            }

            struct SurfaceDescription
            {
                float3 Albedo;
                float3 Emission;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float4 _SampleTexture2D_F86B9939_RGBA_0 = SAMPLE_TEXTURE2D(_Albedo, sampler_Albedo, IN.uv0.xy);
                float _SampleTexture2D_F86B9939_R_4 = _SampleTexture2D_F86B9939_RGBA_0.r;
                float _SampleTexture2D_F86B9939_G_5 = _SampleTexture2D_F86B9939_RGBA_0.g;
                float _SampleTexture2D_F86B9939_B_6 = _SampleTexture2D_F86B9939_RGBA_0.b;
                float _SampleTexture2D_F86B9939_A_7 = _SampleTexture2D_F86B9939_RGBA_0.a;
                float _Property_667D0001_Out_0 = _Hue;
                float3 _Hue_BE270ED0_Out_2;
                Unity_Hue_Normalized_float((_SampleTexture2D_F86B9939_RGBA_0.xyz), _Property_667D0001_Out_0, _Hue_BE270ED0_Out_2);
                float _Property_306B4B17_Out_0 = _Saturation;
                float _Add_27F91AF7_Out_2;
                Unity_Add_float(_Property_306B4B17_Out_0, 1, _Add_27F91AF7_Out_2);
                float3 _Saturation_8EFFDFE8_Out_2;
                Unity_Saturation_float(_Hue_BE270ED0_Out_2, _Add_27F91AF7_Out_2, _Saturation_8EFFDFE8_Out_2);
                float _Property_35742C6B_Out_0 = _Lightness;
                float3 _Add_53649F0F_Out_2;
                Unity_Add_float3(_Saturation_8EFFDFE8_Out_2, (_Property_35742C6B_Out_0.xxx), _Add_53649F0F_Out_2);
                float _Property_ABA23041_Out_0 = _AlphaClipThreshold;
                surface.Albedo = _Add_53649F0F_Out_2;
                surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
                surface.Alpha = _SampleTexture2D_F86B9939_A_7;
                surface.AlphaClipThreshold = _Property_ABA23041_Out_0;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 color : COLOR;
                float4 texcoord0 : TEXCOORD0;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


        	struct VertexOutput
        	{
        	    float2 uv           : TEXCOORD0;
        	    float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                half4 uv0 : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
        	};

            VertexOutput vert(GraphVertexInput v)
            {
                VertexOutput o = (VertexOutput)0;
        	    UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        	    // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 VertexColor = v.color;
                float4 uv0 = v.texcoord0;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

        		VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.WorldSpaceNormal = WorldSpaceNormal;
                vdi.WorldSpaceTangent = WorldSpaceTangent;
                vdi.WorldSpaceBiTangent = WorldSpaceBiTangent;
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.WorldSpacePosition = WorldSpacePosition;
                vdi.VertexColor = VertexColor;
                vdi.uv0 = uv0;
                vdi.uv1 = uv1;
                vdi.TimeParameters = _TimeParameters.xyz;

        	    VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

        	    // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.uv0 = uv0;
                o.uv1 = uv1;

        	    o.clipPos = TransformObjectToHClip(v.vertex.xyz);
        	    return o;
            }

            half4 frag(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 uv0 = IN.uv0;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.uv0 = uv0;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

                float3 Albedo = float3(0.5, 0.5, 0.5);
        		float3 Emission = 0;
        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Albedo = surf.Albedo;
                Emission = surf.Emission;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }
            ENDHLSL
        }

        // This pass it not used during regular rendering, only for lightmap baking.
        Pass
        {
        	Name "Meta"
            Tags{"LightMode" = "Meta"}

            Cull Off

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            #pragma vertex vert
            #pragma fragment frag

            float4 _MainTex_ST;

            // Defines generated by graph
            #define _NORMALMAP 1
            #define _AlphaClip 1

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/MetaInput.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            #pragma shader_feature _ _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A

                CBUFFER_START(UnityPerMaterial)
            float _AlphaClipThreshold;
            float _Hue;
            float _Saturation;
            float _Lightness;
            float _StiffnessVariation;
            float4 _WindDirectionAndStrength;
            float4 _Shiver;
            float _BAKEDMASK_ON;
            float _UVMASK_ON;
            float _VERTEXPOSITIONMASK_ON;
            CBUFFER_END

            TEXTURE2D(_Albedo); SAMPLER(sampler_Albedo); float4 _Albedo_TexelSize;
            TEXTURE2D(_BumpMap); SAMPLER(sampler_BumpMap); float4 _BumpMap_TexelSize;
            TEXTURE2D(_MaskMap); SAMPLER(sampler_MaskMap); float4 _MaskMap_TexelSize;
            TEXTURE2D(_ThicknessMap); SAMPLER(sampler_ThicknessMap); float4 _ThicknessMap_TexelSize;
            float4 _GlobalWindDirectionAndStrength;
            float4 _GlobalShiver;
            TEXTURE2D(_ShiverNoise); SAMPLER(sampler_ShiverNoise); float4 _ShiverNoise_TexelSize;
            TEXTURE2D(_GustNoise); SAMPLER(sampler_GustNoise); float4 _GustNoise_TexelSize;
            struct VertexDescriptionInputs
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceTangent;
                float3 WorldSpaceBiTangent;
                float3 ObjectSpacePosition;
                float3 WorldSpacePosition;
                float4 VertexColor;
                half4 uv0;
                half4 uv1;
                float3 TimeParameters;
            };

            struct SurfaceDescriptionInputs
            {
                half4 uv0;
            };


            struct Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238
            {
            };

            void SG_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238(Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238 IN, out float3 PivotInWS)
            {
                PivotInWS = SHADERGRAPH_OBJECT_POSITION;
            }

            void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
            {
                Out = lerp(A, B, T);
            }

            void Unity_Multiply_float (float4 A, float4 B, out float4 Out)
            {
                Out = A * B;
            }

            void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
            {
                RGBA = float4(R, G, B, A);
                RGB = float3(R, G, B);
                RG = float2(R, G);
            }

            void Unity_Length_float3(float3 In, out float Out)
            {
                Out = length(In);
            }

            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_Clamp_float(float In, float Min, float Max, out float Out)
            {
                Out = clamp(In, Min, Max);
            }

            void Unity_Normalize_float3(float3 In, out float3 Out)
            {
                Out = normalize(In);
            }

            void Unity_Maximum_float(float A, float B, out float Out)
            {
                Out = max(A, B);
            }

            void Unity_Multiply_float (float2 A, float2 B, out float2 Out)
            {
                Out = A * B;
            }

            void Unity_Maximum_float2(float2 A, float2 B, out float2 Out)
            {
                Out = max(A, B);
            }

            struct Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7
            {
            };

            void SG_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7(float4 Vector4_14B5A446, float4 Vector4_6887180D, float2 Vector2_F270B07E, float2 Vector2_70BD0D1B, Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7 IN, out float3 GustDirection, out float GustSpeed, out float GustStrength, out float ShiverSpeed, out float ShiverStrength)
            {
                float3 _Vector3_E24D7903_Out_0 = float3(0.7, 0, 0.3);
                float4 _Property_95651D48_Out_0 = Vector4_14B5A446;
                float4 _Property_FFEF34C6_Out_0 = Vector4_6887180D;
                float4 _Multiply_7F93D556_Out_2;
                Unity_Multiply_float(_Property_95651D48_Out_0, _Property_FFEF34C6_Out_0, _Multiply_7F93D556_Out_2);
                float _Split_1A6C2849_R_1 = _Multiply_7F93D556_Out_2[0];
                float _Split_1A6C2849_G_2 = _Multiply_7F93D556_Out_2[1];
                float _Split_1A6C2849_B_3 = _Multiply_7F93D556_Out_2[2];
                float _Split_1A6C2849_A_4 = _Multiply_7F93D556_Out_2[3];
                float4 _Combine_769EB158_RGBA_4;
                float3 _Combine_769EB158_RGB_5;
                float2 _Combine_769EB158_RG_6;
                Unity_Combine_float(_Split_1A6C2849_R_1, 0, _Split_1A6C2849_G_2, 0, _Combine_769EB158_RGBA_4, _Combine_769EB158_RGB_5, _Combine_769EB158_RG_6);
                float _Length_62815FED_Out_1;
                Unity_Length_float3(_Combine_769EB158_RGB_5, _Length_62815FED_Out_1);
                float _Multiply_A4A39D4F_Out_2;
                Unity_Multiply_float(_Length_62815FED_Out_1, 1000, _Multiply_A4A39D4F_Out_2);
                float _Clamp_4B28219D_Out_3;
                Unity_Clamp_float(_Multiply_A4A39D4F_Out_2, 0, 1, _Clamp_4B28219D_Out_3);
                float3 _Lerp_66854A50_Out_3;
                Unity_Lerp_float3(_Vector3_E24D7903_Out_0, _Combine_769EB158_RGB_5, (_Clamp_4B28219D_Out_3.xxx), _Lerp_66854A50_Out_3);
                float3 _Normalize_B2778668_Out_1;
                Unity_Normalize_float3(_Lerp_66854A50_Out_3, _Normalize_B2778668_Out_1);
                float _Maximum_A3AFA1AB_Out_2;
                Unity_Maximum_float(_Split_1A6C2849_B_3, 0.01, _Maximum_A3AFA1AB_Out_2);
                float _Maximum_FCE0058_Out_2;
                Unity_Maximum_float(0, _Split_1A6C2849_A_4, _Maximum_FCE0058_Out_2);
                float2 _Property_F062BDE_Out_0 = Vector2_F270B07E;
                float2 _Property_FB73C895_Out_0 = Vector2_70BD0D1B;
                float2 _Multiply_76AC0593_Out_2;
                Unity_Multiply_float(_Property_F062BDE_Out_0, _Property_FB73C895_Out_0, _Multiply_76AC0593_Out_2);
                float2 _Maximum_E318FF04_Out_2;
                Unity_Maximum_float2(_Multiply_76AC0593_Out_2, float2(0.01, 0.01), _Maximum_E318FF04_Out_2);
                float _Split_F437A5E0_R_1 = _Maximum_E318FF04_Out_2[0];
                float _Split_F437A5E0_G_2 = _Maximum_E318FF04_Out_2[1];
                float _Split_F437A5E0_B_3 = 0;
                float _Split_F437A5E0_A_4 = 0;
                GustDirection = _Normalize_B2778668_Out_1;
                GustSpeed = _Maximum_A3AFA1AB_Out_2;
                GustStrength = _Maximum_FCE0058_Out_2;
                ShiverSpeed = _Split_F437A5E0_R_1;
                ShiverStrength = _Split_F437A5E0_G_2;
            }

            void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A - B;
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_Fraction_float(float In, out float Out)
            {
                Out = frac(In);
            }

            void Unity_Branch_float(float Predicate, float True, float False, out float Out)
            {
                Out = lerp(False, True, Predicate);
            }

            void Unity_Add_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A + B;
            }

            void Unity_Subtract_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A - B;
            }

            struct Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f
            {
            };

            void SG_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f(float Vector1_CCF53CDA, float Vector1_D95E40FE, float2 Vector2_AEE18C41, float2 Vector2_A9CE092C, float Vector1_F2ED6CCC, TEXTURE2D_PARAM(Texture2D_F14459DD, samplerTexture2D_F14459DD), Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f IN, out float GustNoise)
            {
                float2 _Property_A92CC1B7_Out_0 = Vector2_AEE18C41;
                float _Property_36B40CE_Out_0 = Vector1_D95E40FE;
                float _Multiply_9E28D3C4_Out_2;
                Unity_Multiply_float(_Property_36B40CE_Out_0, 2, _Multiply_9E28D3C4_Out_2);
                float2 _Add_C54F05FE_Out_2;
                Unity_Add_float2(_Property_A92CC1B7_Out_0, (_Multiply_9E28D3C4_Out_2.xx), _Add_C54F05FE_Out_2);
                float2 _Multiply_9CD1691E_Out_2;
                Unity_Multiply_float(_Add_C54F05FE_Out_2, float2(0.01, 0.01), _Multiply_9CD1691E_Out_2);
                float2 _Property_D05D9ECB_Out_0 = Vector2_A9CE092C;
                float _Property_8BFC9AA2_Out_0 = Vector1_CCF53CDA;
                float2 _Multiply_462DF694_Out_2;
                Unity_Multiply_float(_Property_D05D9ECB_Out_0, (_Property_8BFC9AA2_Out_0.xx), _Multiply_462DF694_Out_2);
                float _Property_4DB65C54_Out_0 = Vector1_F2ED6CCC;
                float2 _Multiply_50FD4B48_Out_2;
                Unity_Multiply_float(_Multiply_462DF694_Out_2, (_Property_4DB65C54_Out_0.xx), _Multiply_50FD4B48_Out_2);
                float2 _Subtract_B4A749C2_Out_2;
                Unity_Subtract_float2(_Multiply_9CD1691E_Out_2, _Multiply_50FD4B48_Out_2, _Subtract_B4A749C2_Out_2);
                float4 _SampleTexture2DLOD_46D09289_RGBA_0 = SAMPLE_TEXTURE2D_LOD(Texture2D_F14459DD, samplerTexture2D_F14459DD, _Subtract_B4A749C2_Out_2, 0);
                float _SampleTexture2DLOD_46D09289_R_5 = _SampleTexture2DLOD_46D09289_RGBA_0.r;
                float _SampleTexture2DLOD_46D09289_G_6 = _SampleTexture2DLOD_46D09289_RGBA_0.g;
                float _SampleTexture2DLOD_46D09289_B_7 = _SampleTexture2DLOD_46D09289_RGBA_0.b;
                float _SampleTexture2DLOD_46D09289_A_8 = _SampleTexture2DLOD_46D09289_RGBA_0.a;
                GustNoise = _SampleTexture2DLOD_46D09289_R_5;
            }

            void Unity_Power_float(float A, float B, out float Out)
            {
                Out = pow(A, B);
            }

            void Unity_OneMinus_float(float In, out float Out)
            {
                Out = 1 - In;
            }

            struct Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19
            {
            };

            void SG_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19(float2 Vector2_CA78C39A, float Vector1_279D2776, Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19 IN, out float RandomStiffness)
            {
                float2 _Property_475BFCB9_Out_0 = Vector2_CA78C39A;
                float2 _Multiply_7EE00C92_Out_2;
                Unity_Multiply_float(_Property_475BFCB9_Out_0, float2(10, 10), _Multiply_7EE00C92_Out_2);
                float _Split_A0FB144F_R_1 = _Multiply_7EE00C92_Out_2[0];
                float _Split_A0FB144F_G_2 = _Multiply_7EE00C92_Out_2[1];
                float _Split_A0FB144F_B_3 = 0;
                float _Split_A0FB144F_A_4 = 0;
                float _Multiply_2482A544_Out_2;
                Unity_Multiply_float(_Split_A0FB144F_R_1, _Split_A0FB144F_G_2, _Multiply_2482A544_Out_2);
                float _Fraction_B90029E4_Out_1;
                Unity_Fraction_float(_Multiply_2482A544_Out_2, _Fraction_B90029E4_Out_1);
                float _Power_E2B2B095_Out_2;
                Unity_Power_float(_Fraction_B90029E4_Out_1, 2, _Power_E2B2B095_Out_2);
                float _Property_91226CD6_Out_0 = Vector1_279D2776;
                float _OneMinus_A56B8867_Out_1;
                Unity_OneMinus_float(_Property_91226CD6_Out_0, _OneMinus_A56B8867_Out_1);
                float _Clamp_E85434A6_Out_3;
                Unity_Clamp_float(_Power_E2B2B095_Out_2, _OneMinus_A56B8867_Out_1, 1, _Clamp_E85434A6_Out_3);
                RandomStiffness = _Clamp_E85434A6_Out_3;
            }

            struct Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628
            {
            };

            void SG_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628(float Vector1_AFC49E6C, float Vector1_A18CF4DF, float Vector1_28AC83F8, float Vector1_E0042E1, float Vector1_1A24AAF, Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628 IN, out float GustStrength)
            {
                float _Property_9A741C0D_Out_0 = Vector1_AFC49E6C;
                float _Property_F564A485_Out_0 = Vector1_A18CF4DF;
                float _Multiply_248F3A68_Out_2;
                Unity_Multiply_float(_Property_9A741C0D_Out_0, _Property_F564A485_Out_0, _Multiply_248F3A68_Out_2);
                float _Clamp_64D749D9_Out_3;
                Unity_Clamp_float(_Multiply_248F3A68_Out_2, 0.1, 0.9, _Clamp_64D749D9_Out_3);
                float _OneMinus_BDC5FAC3_Out_1;
                Unity_OneMinus_float(_Clamp_64D749D9_Out_3, _OneMinus_BDC5FAC3_Out_1);
                float _Multiply_E3C6FEFE_Out_2;
                Unity_Multiply_float(_Multiply_248F3A68_Out_2, _OneMinus_BDC5FAC3_Out_1, _Multiply_E3C6FEFE_Out_2);
                float _Multiply_9087CA8A_Out_2;
                Unity_Multiply_float(_Multiply_E3C6FEFE_Out_2, 1.5, _Multiply_9087CA8A_Out_2);
                float _Property_C7E6777F_Out_0 = Vector1_28AC83F8;
                float _Multiply_1D329CB_Out_2;
                Unity_Multiply_float(_Multiply_9087CA8A_Out_2, _Property_C7E6777F_Out_0, _Multiply_1D329CB_Out_2);
                float _Property_84113466_Out_0 = Vector1_E0042E1;
                float _Multiply_9501294C_Out_2;
                Unity_Multiply_float(_Multiply_1D329CB_Out_2, _Property_84113466_Out_0, _Multiply_9501294C_Out_2);
                float _Property_57C5AF03_Out_0 = Vector1_1A24AAF;
                float _Multiply_E178164E_Out_2;
                Unity_Multiply_float(_Multiply_9501294C_Out_2, _Property_57C5AF03_Out_0, _Multiply_E178164E_Out_2);
                GustStrength = _Multiply_E178164E_Out_2;
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            struct Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a
            {
            };

            void SG_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a(float2 Vector2_287CB44E, float2 Vector2_2A17E6EA, float Vector1_F4B6A491, float Vector1_2C90770B, TEXTURE2D_PARAM(Texture2D_D44B4848, samplerTexture2D_D44B4848), float Vector1_AD94E9BC, Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a IN, out float3 ShiverNoise)
            {
                float2 _Property_961D8A0_Out_0 = Vector2_287CB44E;
                float _Property_A414F012_Out_0 = Vector1_AD94E9BC;
                float _Multiply_7DB42988_Out_2;
                Unity_Multiply_float(_Property_A414F012_Out_0, 2, _Multiply_7DB42988_Out_2);
                float2 _Add_4C3CF1F_Out_2;
                Unity_Add_float2(_Property_961D8A0_Out_0, (_Multiply_7DB42988_Out_2.xx), _Add_4C3CF1F_Out_2);
                float2 _Property_EBC67BC7_Out_0 = Vector2_2A17E6EA;
                float _Property_13D296B5_Out_0 = Vector1_F4B6A491;
                float2 _Multiply_BBB72061_Out_2;
                Unity_Multiply_float(_Property_EBC67BC7_Out_0, (_Property_13D296B5_Out_0.xx), _Multiply_BBB72061_Out_2);
                float _Property_3BB601E6_Out_0 = Vector1_2C90770B;
                float2 _Multiply_FF9010E8_Out_2;
                Unity_Multiply_float(_Multiply_BBB72061_Out_2, (_Property_3BB601E6_Out_0.xx), _Multiply_FF9010E8_Out_2);
                float2 _Subtract_6BF2D170_Out_2;
                Unity_Subtract_float2(_Add_4C3CF1F_Out_2, _Multiply_FF9010E8_Out_2, _Subtract_6BF2D170_Out_2);
                float4 _SampleTexture2DLOD_DBCD6404_RGBA_0 = SAMPLE_TEXTURE2D_LOD(Texture2D_D44B4848, samplerTexture2D_D44B4848, _Subtract_6BF2D170_Out_2, 0);
                float _SampleTexture2DLOD_DBCD6404_R_5 = _SampleTexture2DLOD_DBCD6404_RGBA_0.r;
                float _SampleTexture2DLOD_DBCD6404_G_6 = _SampleTexture2DLOD_DBCD6404_RGBA_0.g;
                float _SampleTexture2DLOD_DBCD6404_B_7 = _SampleTexture2DLOD_DBCD6404_RGBA_0.b;
                float _SampleTexture2DLOD_DBCD6404_A_8 = _SampleTexture2DLOD_DBCD6404_RGBA_0.a;
                float4 _Combine_E5D76A97_RGBA_4;
                float3 _Combine_E5D76A97_RGB_5;
                float2 _Combine_E5D76A97_RG_6;
                Unity_Combine_float(_SampleTexture2DLOD_DBCD6404_R_5, _SampleTexture2DLOD_DBCD6404_G_6, _SampleTexture2DLOD_DBCD6404_B_7, 0, _Combine_E5D76A97_RGBA_4, _Combine_E5D76A97_RGB_5, _Combine_E5D76A97_RG_6);
                float3 _Subtract_AA7C02E2_Out_2;
                Unity_Subtract_float3(_Combine_E5D76A97_RGB_5, float3(0.5, 0.5, 0.5), _Subtract_AA7C02E2_Out_2);
                float3 _Multiply_5BF7CBD7_Out_2;
                Unity_Multiply_float(_Subtract_AA7C02E2_Out_2, float3(2, 2, 2), _Multiply_5BF7CBD7_Out_2);
                ShiverNoise = _Multiply_5BF7CBD7_Out_2;
            }

            struct Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459
            {
            };

            void SG_CalculateShiver_2b675aaec6ba57b449ad461cc799d459(float3 Vector3_ED0F539A, float2 Vector2_84805101, float Vector1_BDF24CF7, float Vector1_839268A4, float Vector1_A8621014, float Vector1_2DBE6CC0, float Vector1_8A4EF006, float Vector1_ED935C73, Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459 IN, out float3 ShiverDirection, out float ShiverStrength)
            {
                float3 _Property_FC94AEBB_Out_0 = Vector3_ED0F539A;
                float _Property_4FE2271A_Out_0 = Vector1_BDF24CF7;
                float4 _Combine_328044F1_RGBA_4;
                float3 _Combine_328044F1_RGB_5;
                float2 _Combine_328044F1_RG_6;
                Unity_Combine_float(1, _Property_4FE2271A_Out_0, 1, 0, _Combine_328044F1_RGBA_4, _Combine_328044F1_RGB_5, _Combine_328044F1_RG_6);
                float3 _Multiply_4FCE02F7_Out_2;
                Unity_Multiply_float(_Property_FC94AEBB_Out_0, _Combine_328044F1_RGB_5, _Multiply_4FCE02F7_Out_2);
                float2 _Property_77EED0A8_Out_0 = Vector2_84805101;
                float _Split_2D66AF35_R_1 = _Property_77EED0A8_Out_0[0];
                float _Split_2D66AF35_G_2 = _Property_77EED0A8_Out_0[1];
                float _Split_2D66AF35_B_3 = 0;
                float _Split_2D66AF35_A_4 = 0;
                float4 _Combine_C2861A09_RGBA_4;
                float3 _Combine_C2861A09_RGB_5;
                float2 _Combine_C2861A09_RG_6;
                Unity_Combine_float(_Split_2D66AF35_R_1, _Property_4FE2271A_Out_0, _Split_2D66AF35_G_2, 0, _Combine_C2861A09_RGBA_4, _Combine_C2861A09_RGB_5, _Combine_C2861A09_RG_6);
                float3 _Lerp_A6B0BE86_Out_3;
                Unity_Lerp_float3(_Multiply_4FCE02F7_Out_2, _Combine_C2861A09_RGB_5, float3(0.5, 0.5, 0.5), _Lerp_A6B0BE86_Out_3);
                float _Property_BBBC9C1B_Out_0 = Vector1_839268A4;
                float _Length_F022B321_Out_1;
                Unity_Length_float3(_Multiply_4FCE02F7_Out_2, _Length_F022B321_Out_1);
                float _Multiply_BFD84B03_Out_2;
                Unity_Multiply_float(_Length_F022B321_Out_1, 0.5, _Multiply_BFD84B03_Out_2);
                float _Multiply_3564B68A_Out_2;
                Unity_Multiply_float(_Property_BBBC9C1B_Out_0, _Multiply_BFD84B03_Out_2, _Multiply_3564B68A_Out_2);
                float _Add_83285742_Out_2;
                Unity_Add_float(_Multiply_3564B68A_Out_2, _Length_F022B321_Out_1, _Add_83285742_Out_2);
                float _Property_45D94B1_Out_0 = Vector1_2DBE6CC0;
                float _Multiply_EA43D494_Out_2;
                Unity_Multiply_float(_Add_83285742_Out_2, _Property_45D94B1_Out_0, _Multiply_EA43D494_Out_2);
                float _Clamp_C109EA71_Out_3;
                Unity_Clamp_float(_Multiply_EA43D494_Out_2, 0.1, 0.9, _Clamp_C109EA71_Out_3);
                float _OneMinus_226F3377_Out_1;
                Unity_OneMinus_float(_Clamp_C109EA71_Out_3, _OneMinus_226F3377_Out_1);
                float _Multiply_8680628F_Out_2;
                Unity_Multiply_float(_Multiply_EA43D494_Out_2, _OneMinus_226F3377_Out_1, _Multiply_8680628F_Out_2);
                float _Multiply_B14E644_Out_2;
                Unity_Multiply_float(_Multiply_8680628F_Out_2, 1.5, _Multiply_B14E644_Out_2);
                float _Property_7F61FC78_Out_0 = Vector1_A8621014;
                float _Multiply_C89CF7DC_Out_2;
                Unity_Multiply_float(_Multiply_B14E644_Out_2, _Property_7F61FC78_Out_0, _Multiply_C89CF7DC_Out_2);
                float _Property_2BD306B6_Out_0 = Vector1_8A4EF006;
                float _Multiply_E5D34DCC_Out_2;
                Unity_Multiply_float(_Multiply_C89CF7DC_Out_2, _Property_2BD306B6_Out_0, _Multiply_E5D34DCC_Out_2);
                float _Property_DBC71A4F_Out_0 = Vector1_ED935C73;
                float _Multiply_BCACDD38_Out_2;
                Unity_Multiply_float(_Multiply_E5D34DCC_Out_2, _Property_DBC71A4F_Out_0, _Multiply_BCACDD38_Out_2);
                ShiverDirection = _Lerp_A6B0BE86_Out_3;
                ShiverStrength = _Multiply_BCACDD38_Out_2;
            }

            struct Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364
            {
            };

            void SG_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364(float3 Vector3_829210A7, float3 Vector3_1A016C4A, float Vector1_31372BF, float Vector1_E57895AF, TEXTURE2D_PARAM(Texture2D_65F71447, samplerTexture2D_65F71447), float Vector1_8836FB6A, TEXTURE2D_PARAM(Texture2D_4A3BDB6, samplerTexture2D_4A3BDB6), float Vector1_14E206AE, float Vector1_7090E96C, float Vector1_51722AC, float Vector1_A3894D2, float Vector1_6F0C3A5A, float Vector1_2D1F6C2F, float Vector1_347751CA, Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364 IN, out float GustStrength, out float ShiverStrength, out float3 ShiverDirection)
            {
                float _Property_5C7F4A8C_Out_0 = Vector1_31372BF;
                float _Property_142FEDC3_Out_0 = Vector1_347751CA;
                float3 _Property_D2FC65C3_Out_0 = Vector3_829210A7;
                float _Split_8E347DCF_R_1 = _Property_D2FC65C3_Out_0[0];
                float _Split_8E347DCF_G_2 = _Property_D2FC65C3_Out_0[1];
                float _Split_8E347DCF_B_3 = _Property_D2FC65C3_Out_0[2];
                float _Split_8E347DCF_A_4 = 0;
                float4 _Combine_9B5A76B7_RGBA_4;
                float3 _Combine_9B5A76B7_RGB_5;
                float2 _Combine_9B5A76B7_RG_6;
                Unity_Combine_float(_Split_8E347DCF_R_1, _Split_8E347DCF_B_3, 0, 0, _Combine_9B5A76B7_RGBA_4, _Combine_9B5A76B7_RGB_5, _Combine_9B5A76B7_RG_6);
                float3 _Property_5653999E_Out_0 = Vector3_1A016C4A;
                float _Split_B9CBBFE5_R_1 = _Property_5653999E_Out_0[0];
                float _Split_B9CBBFE5_G_2 = _Property_5653999E_Out_0[1];
                float _Split_B9CBBFE5_B_3 = _Property_5653999E_Out_0[2];
                float _Split_B9CBBFE5_A_4 = 0;
                float4 _Combine_DC44394B_RGBA_4;
                float3 _Combine_DC44394B_RGB_5;
                float2 _Combine_DC44394B_RG_6;
                Unity_Combine_float(_Split_B9CBBFE5_R_1, _Split_B9CBBFE5_B_3, 0, 0, _Combine_DC44394B_RGBA_4, _Combine_DC44394B_RGB_5, _Combine_DC44394B_RG_6);
                float _Property_3221EFCE_Out_0 = Vector1_E57895AF;
                Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f _GustNoiseAtPosition_3B28852B;
                float _GustNoiseAtPosition_3B28852B_GustNoise_0;
                SG_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f(_Property_5C7F4A8C_Out_0, _Property_142FEDC3_Out_0, _Combine_9B5A76B7_RG_6, _Combine_DC44394B_RG_6, _Property_3221EFCE_Out_0, TEXTURE2D_ARGS(Texture2D_65F71447, samplerTexture2D_65F71447), _GustNoiseAtPosition_3B28852B, _GustNoiseAtPosition_3B28852B_GustNoise_0);
                float _Property_1B306054_Out_0 = Vector1_A3894D2;
                float _Property_1FBC768_Out_0 = Vector1_51722AC;
                float _Property_9FB10D19_Out_0 = Vector1_14E206AE;
                Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19 _RandomStiffnessAtPosition_C9AD50AB;
                float _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0;
                SG_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19(_Combine_9B5A76B7_RG_6, _Property_9FB10D19_Out_0, _RandomStiffnessAtPosition_C9AD50AB, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0);
                float _Property_EE5A603D_Out_0 = Vector1_7090E96C;
                Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628 _CalculateGustStrength_E2853C74;
                float _CalculateGustStrength_E2853C74_GustStrength_0;
                SG_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628(_GustNoiseAtPosition_3B28852B_GustNoise_0, _Property_1B306054_Out_0, _Property_1FBC768_Out_0, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0, _Property_EE5A603D_Out_0, _CalculateGustStrength_E2853C74, _CalculateGustStrength_E2853C74_GustStrength_0);
                float _Property_DFB3FCE0_Out_0 = Vector1_31372BF;
                float _Property_8A8735CC_Out_0 = Vector1_8836FB6A;
                Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a _ShiverNoiseAtPosition_35F9220A;
                float3 _ShiverNoiseAtPosition_35F9220A_ShiverNoise_0;
                SG_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a(_Combine_9B5A76B7_RG_6, _Combine_DC44394B_RG_6, _Property_DFB3FCE0_Out_0, _Property_8A8735CC_Out_0, TEXTURE2D_ARGS(Texture2D_4A3BDB6, samplerTexture2D_4A3BDB6), _Property_142FEDC3_Out_0, _ShiverNoiseAtPosition_35F9220A, _ShiverNoiseAtPosition_35F9220A_ShiverNoise_0);
                float _Property_65F19953_Out_0 = Vector1_6F0C3A5A;
                float _Property_3A2F45FE_Out_0 = Vector1_51722AC;
                float _Property_98EF73E5_Out_0 = Vector1_2D1F6C2F;
                float _Property_6A278DE2_Out_0 = Vector1_7090E96C;
                Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459 _CalculateShiver_799DE4CB;
                float3 _CalculateShiver_799DE4CB_ShiverDirection_0;
                float _CalculateShiver_799DE4CB_ShiverStrength_1;
                SG_CalculateShiver_2b675aaec6ba57b449ad461cc799d459(_ShiverNoiseAtPosition_35F9220A_ShiverNoise_0, _Combine_DC44394B_RG_6, _Property_65F19953_Out_0, _CalculateGustStrength_E2853C74_GustStrength_0, _Property_3A2F45FE_Out_0, _Property_98EF73E5_Out_0, _Property_6A278DE2_Out_0, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0, _CalculateShiver_799DE4CB, _CalculateShiver_799DE4CB_ShiverDirection_0, _CalculateShiver_799DE4CB_ShiverStrength_1);
                GustStrength = _CalculateGustStrength_E2853C74_GustStrength_0;
                ShiverStrength = _CalculateShiver_799DE4CB_ShiverStrength_1;
                ShiverDirection = _CalculateShiver_799DE4CB_ShiverDirection_0;
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            struct Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01
            {
                float3 ObjectSpacePosition;
            };

            void SG_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01(float3 Vector3_C96069F9, float Vector1_A5EB719C, float Vector1_4D1D3B1A, float3 Vector3_C80E97FF, float3 Vector3_821C320A, float3 Vector3_4BF0DC64, Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01 IN, out float3 WorldPosition)
            {
                float3 _Property_65372844_Out_0 = Vector3_4BF0DC64;
                float3 _Property_7205E35B_Out_0 = Vector3_821C320A;
                float _Property_916D8D52_Out_0 = Vector1_4D1D3B1A;
                float3 _Multiply_CF9DF1B5_Out_2;
                Unity_Multiply_float(_Property_7205E35B_Out_0, (_Property_916D8D52_Out_0.xxx), _Multiply_CF9DF1B5_Out_2);
                float3 _Multiply_57D2E5C7_Out_2;
                Unity_Multiply_float(_Multiply_CF9DF1B5_Out_2, float3(10, 10, 10), _Multiply_57D2E5C7_Out_2);
                float3 _Add_F265DF09_Out_2;
                Unity_Add_float3(_Property_65372844_Out_0, _Multiply_57D2E5C7_Out_2, _Add_F265DF09_Out_2);
                float3 _Property_806C350F_Out_0 = Vector3_C96069F9;
                float _Property_D017A08E_Out_0 = Vector1_A5EB719C;
                float3 _Multiply_99498CF9_Out_2;
                Unity_Multiply_float(_Property_806C350F_Out_0, (_Property_D017A08E_Out_0.xxx), _Multiply_99498CF9_Out_2);
                float _Split_A5777330_R_1 = IN.ObjectSpacePosition[0];
                float _Split_A5777330_G_2 = IN.ObjectSpacePosition[1];
                float _Split_A5777330_B_3 = IN.ObjectSpacePosition[2];
                float _Split_A5777330_A_4 = 0;
                float _Clamp_C4364CA5_Out_3;
                Unity_Clamp_float(_Split_A5777330_G_2, 0, 1, _Clamp_C4364CA5_Out_3);
                float3 _Multiply_ADC4C2A_Out_2;
                Unity_Multiply_float(_Multiply_99498CF9_Out_2, (_Clamp_C4364CA5_Out_3.xxx), _Multiply_ADC4C2A_Out_2);
                float3 _Multiply_49835441_Out_2;
                Unity_Multiply_float(_Multiply_ADC4C2A_Out_2, float3(10, 10, 10), _Multiply_49835441_Out_2);
                float3 _Add_B14AAE70_Out_2;
                Unity_Add_float3(_Add_F265DF09_Out_2, _Multiply_49835441_Out_2, _Add_B14AAE70_Out_2);
                WorldPosition = _Add_B14AAE70_Out_2;
            }

            struct Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceTangent;
                float3 WorldSpaceBiTangent;
            };

            void SG_WorldToObject_c1006c77aa2ba8543ab0d5302579f549(float3 Vector3_AAF445D6, Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549 IN, out float3 ObjectPosition)
            {
                float3 _Property_51DA8EE_Out_0 = Vector3_AAF445D6;
                float3 _Transform_6FDB2E47_Out_1 = TransformWorldToObject(_Property_51DA8EE_Out_0.xyz);
                ObjectPosition = _Transform_6FDB2E47_Out_1;
            }

            void Unity_Hue_Normalized_float(float3 In, float Offset, out float3 Out)
            {
                // RGB to HSV
                float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
                float4 P = lerp(float4(In.bg, K.wz), float4(In.gb, K.xy), step(In.b, In.g));
                float4 Q = lerp(float4(P.xyw, In.r), float4(In.r, P.yzx), step(P.x, In.r));
                float D = Q.x - min(Q.w, Q.y);
                float E = 1e-10;
                float3 hsv = float3(abs(Q.z + (Q.w - Q.y)/(6.0 * D + E)), D / (Q.x + E), Q.x);

                float hue = hsv.x + Offset;
                hsv.x = (hue < 0)
                        ? hue + 1
                        : (hue > 1)
                            ? hue - 1
                            : hue;

                // HSV to RGB
                float4 K2 = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                float3 P2 = abs(frac(hsv.xxx + K2.xyz) * 6.0 - K2.www);
                Out = hsv.z * lerp(K2.xxx, saturate(P2 - K2.xxx), hsv.y);
            }

            void Unity_Saturation_float(float3 In, float Saturation, out float3 Out)
            {
                float luma = dot(In, float3(0.2126729, 0.7151522, 0.0721750));
                Out =  luma.xxx + Saturation.xxx * (In - luma.xxx);
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238 _GetPivotInWorldSpace_73F19E42;
                float3 _GetPivotInWorldSpace_73F19E42_PivotInWS_0;
                SG_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238(_GetPivotInWorldSpace_73F19E42, _GetPivotInWorldSpace_73F19E42_PivotInWS_0);
                float _Split_64420219_R_1 = IN.VertexColor[0];
                float _Split_64420219_G_2 = IN.VertexColor[1];
                float _Split_64420219_B_3 = IN.VertexColor[2];
                float _Split_64420219_A_4 = IN.VertexColor[3];
                float3 _Lerp_4531CF63_Out_3;
                Unity_Lerp_float3(_GetPivotInWorldSpace_73F19E42_PivotInWS_0, IN.WorldSpacePosition, (_Split_64420219_G_2.xxx), _Lerp_4531CF63_Out_3);
                float4 _Property_D6662DC6_Out_0 = _GlobalWindDirectionAndStrength;
                float4 _Property_9515B228_Out_0 = _WindDirectionAndStrength;
                float4 _Property_9A1EF240_Out_0 = _GlobalShiver;
                float4 _Property_777C8DB2_Out_0 = _Shiver;
                Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7 _GlobalWindParameters_B547F135;
                float3 _GlobalWindParameters_B547F135_GustDirection_0;
                float _GlobalWindParameters_B547F135_GustSpeed_1;
                float _GlobalWindParameters_B547F135_GustStrength_2;
                float _GlobalWindParameters_B547F135_ShiverSpeed_3;
                float _GlobalWindParameters_B547F135_ShiverStrength_4;
                SG_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7(_Property_D6662DC6_Out_0, _Property_9515B228_Out_0, (_Property_9A1EF240_Out_0.xy), (_Property_777C8DB2_Out_0.xy), _GlobalWindParameters_B547F135, _GlobalWindParameters_B547F135_GustDirection_0, _GlobalWindParameters_B547F135_GustSpeed_1, _GlobalWindParameters_B547F135_GustStrength_2, _GlobalWindParameters_B547F135_ShiverSpeed_3, _GlobalWindParameters_B547F135_ShiverStrength_4);
                float _Property_5F3A390D_Out_0 = _BAKEDMASK_ON;
                float3 _Subtract_BF2A75CD_Out_2;
                Unity_Subtract_float3(IN.WorldSpacePosition, _GetPivotInWorldSpace_73F19E42_PivotInWS_0, _Subtract_BF2A75CD_Out_2);
                float _Split_29C81DE4_R_1 = _Subtract_BF2A75CD_Out_2[0];
                float _Split_29C81DE4_G_2 = _Subtract_BF2A75CD_Out_2[1];
                float _Split_29C81DE4_B_3 = _Subtract_BF2A75CD_Out_2[2];
                float _Split_29C81DE4_A_4 = 0;
                float _Add_6A47DB4F_Out_2;
                Unity_Add_float(_Split_29C81DE4_R_1, _Split_29C81DE4_G_2, _Add_6A47DB4F_Out_2);
                float _Add_EC455B5D_Out_2;
                Unity_Add_float(_Add_6A47DB4F_Out_2, _Split_29C81DE4_B_3, _Add_EC455B5D_Out_2);
                float _Multiply_F013BB8B_Out_2;
                Unity_Multiply_float(_Add_EC455B5D_Out_2, 0.4, _Multiply_F013BB8B_Out_2);
                float _Fraction_7D389816_Out_1;
                Unity_Fraction_float(_Multiply_F013BB8B_Out_2, _Fraction_7D389816_Out_1);
                float _Multiply_776D3DAF_Out_2;
                Unity_Multiply_float(_Fraction_7D389816_Out_1, 0.15, _Multiply_776D3DAF_Out_2);
                float _Split_E4BB9FEC_R_1 = IN.VertexColor[0];
                float _Split_E4BB9FEC_G_2 = IN.VertexColor[1];
                float _Split_E4BB9FEC_B_3 = IN.VertexColor[2];
                float _Split_E4BB9FEC_A_4 = IN.VertexColor[3];
                float _Multiply_BC8988C3_Out_2;
                Unity_Multiply_float(_Multiply_776D3DAF_Out_2, _Split_E4BB9FEC_G_2, _Multiply_BC8988C3_Out_2);
                float _Multiply_EC5FE292_Out_2;
                Unity_Multiply_float(_Split_E4BB9FEC_R_1, 0.3, _Multiply_EC5FE292_Out_2);
                float _Add_A8423510_Out_2;
                Unity_Add_float(_Multiply_BC8988C3_Out_2, _Multiply_EC5FE292_Out_2, _Add_A8423510_Out_2);
                float _Add_CE74358C_Out_2;
                Unity_Add_float(_Add_A8423510_Out_2, IN.TimeParameters.x, _Add_CE74358C_Out_2);
                float _Multiply_1CE438D_Out_2;
                Unity_Multiply_float(_Split_E4BB9FEC_G_2, 0.5, _Multiply_1CE438D_Out_2);
                float _Add_8718B88C_Out_2;
                Unity_Add_float(_Add_CE74358C_Out_2, _Multiply_1CE438D_Out_2, _Add_8718B88C_Out_2);
                float _Property_DBA903E3_Out_0 = _UVMASK_ON;
                float4 _UV_64D01E18_Out_0 = IN.uv0;
                float _Split_A5DFBEBE_R_1 = _UV_64D01E18_Out_0[0];
                float _Split_A5DFBEBE_G_2 = _UV_64D01E18_Out_0[1];
                float _Split_A5DFBEBE_B_3 = _UV_64D01E18_Out_0[2];
                float _Split_A5DFBEBE_A_4 = _UV_64D01E18_Out_0[3];
                float _Multiply_C943DA5C_Out_2;
                Unity_Multiply_float(_Split_A5DFBEBE_G_2, 0.1, _Multiply_C943DA5C_Out_2);
                float _Branch_12012434_Out_3;
                Unity_Branch_float(_Property_DBA903E3_Out_0, _Multiply_C943DA5C_Out_2, 0, _Branch_12012434_Out_3);
                float _Add_922F2E64_Out_2;
                Unity_Add_float(IN.TimeParameters.x, _Branch_12012434_Out_3, _Add_922F2E64_Out_2);
                float _Multiply_2E689843_Out_2;
                Unity_Multiply_float(_Multiply_776D3DAF_Out_2, 0.5, _Multiply_2E689843_Out_2);
                float _Add_ED1EE4DB_Out_2;
                Unity_Add_float(_Add_922F2E64_Out_2, _Multiply_2E689843_Out_2, _Add_ED1EE4DB_Out_2);
                float _Branch_291934CD_Out_3;
                Unity_Branch_float(_Property_5F3A390D_Out_0, _Add_8718B88C_Out_2, _Add_ED1EE4DB_Out_2, _Branch_291934CD_Out_3);
                float _Property_267CF497_Out_0 = _StiffnessVariation;
                float _Property_4FB02E51_Out_0 = _BAKEDMASK_ON;
                float4 _UV_6482E163_Out_0 = IN.uv1;
                float _Split_2D1A67CF_R_1 = _UV_6482E163_Out_0[0];
                float _Split_2D1A67CF_G_2 = _UV_6482E163_Out_0[1];
                float _Split_2D1A67CF_B_3 = _UV_6482E163_Out_0[2];
                float _Split_2D1A67CF_A_4 = _UV_6482E163_Out_0[3];
                float _Multiply_F7BD1E76_Out_2;
                Unity_Multiply_float(_Split_2D1A67CF_R_1, _Split_2D1A67CF_G_2, _Multiply_F7BD1E76_Out_2);
                float _Property_B1FAFDBF_Out_0 = _UVMASK_ON;
                float4 _UV_8F58F10B_Out_0 = IN.uv0;
                float _Split_BD0858B3_R_1 = _UV_8F58F10B_Out_0[0];
                float _Split_BD0858B3_G_2 = _UV_8F58F10B_Out_0[1];
                float _Split_BD0858B3_B_3 = _UV_8F58F10B_Out_0[2];
                float _Split_BD0858B3_A_4 = _UV_8F58F10B_Out_0[3];
                float _Multiply_3FAD9403_Out_2;
                Unity_Multiply_float(_Split_BD0858B3_G_2, 0.2, _Multiply_3FAD9403_Out_2);
                float _Branch_3AF3832A_Out_3;
                Unity_Branch_float(_Property_B1FAFDBF_Out_0, _Multiply_3FAD9403_Out_2, 1, _Branch_3AF3832A_Out_3);
                float _Branch_F921E5A9_Out_3;
                Unity_Branch_float(_Property_4FB02E51_Out_0, _Multiply_F7BD1E76_Out_2, _Branch_3AF3832A_Out_3, _Branch_F921E5A9_Out_3);
                Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364 _GetWindStrength_5806EF0A;
                float _GetWindStrength_5806EF0A_GustStrength_0;
                float _GetWindStrength_5806EF0A_ShiverStrength_1;
                float3 _GetWindStrength_5806EF0A_ShiverDirection_2;
                SG_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364(_Lerp_4531CF63_Out_3, _GlobalWindParameters_B547F135_GustDirection_0, _Branch_291934CD_Out_3, _GlobalWindParameters_B547F135_GustSpeed_1, TEXTURE2D_ARGS(_GustNoise, sampler_GustNoise), _GlobalWindParameters_B547F135_ShiverSpeed_3, TEXTURE2D_ARGS(_ShiverNoise, sampler_ShiverNoise), _Property_267CF497_Out_0, 1, _Branch_F921E5A9_Out_3, _GlobalWindParameters_B547F135_GustStrength_2, 0.2, _GlobalWindParameters_B547F135_ShiverStrength_4, 0, _GetWindStrength_5806EF0A, _GetWindStrength_5806EF0A_GustStrength_0, _GetWindStrength_5806EF0A_ShiverStrength_1, _GetWindStrength_5806EF0A_ShiverDirection_2);
                Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01 _ApplyTreeWindDisplacement_8E73FF2E;
                _ApplyTreeWindDisplacement_8E73FF2E.ObjectSpacePosition = IN.ObjectSpacePosition;
                float3 _ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0;
                SG_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01(_GetWindStrength_5806EF0A_ShiverDirection_2, _GetWindStrength_5806EF0A_ShiverStrength_1, _GetWindStrength_5806EF0A_GustStrength_0, _GetPivotInWorldSpace_73F19E42_PivotInWS_0, _GlobalWindParameters_B547F135_GustDirection_0, IN.WorldSpacePosition, _ApplyTreeWindDisplacement_8E73FF2E, _ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0);
                Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549 _WorldToObject_628B231E;
                _WorldToObject_628B231E.WorldSpaceNormal = IN.WorldSpaceNormal;
                _WorldToObject_628B231E.WorldSpaceTangent = IN.WorldSpaceTangent;
                _WorldToObject_628B231E.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 _WorldToObject_628B231E_ObjectPosition_1;
                SG_WorldToObject_c1006c77aa2ba8543ab0d5302579f549(_ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0, _WorldToObject_628B231E, _WorldToObject_628B231E_ObjectPosition_1);
                description.Position = _WorldToObject_628B231E_ObjectPosition_1;
                return description;
            }

            struct SurfaceDescription
            {
                float3 Albedo;
                float3 Emission;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float4 _SampleTexture2D_F86B9939_RGBA_0 = SAMPLE_TEXTURE2D(_Albedo, sampler_Albedo, IN.uv0.xy);
                float _SampleTexture2D_F86B9939_R_4 = _SampleTexture2D_F86B9939_RGBA_0.r;
                float _SampleTexture2D_F86B9939_G_5 = _SampleTexture2D_F86B9939_RGBA_0.g;
                float _SampleTexture2D_F86B9939_B_6 = _SampleTexture2D_F86B9939_RGBA_0.b;
                float _SampleTexture2D_F86B9939_A_7 = _SampleTexture2D_F86B9939_RGBA_0.a;
                float _Property_667D0001_Out_0 = _Hue;
                float3 _Hue_BE270ED0_Out_2;
                Unity_Hue_Normalized_float((_SampleTexture2D_F86B9939_RGBA_0.xyz), _Property_667D0001_Out_0, _Hue_BE270ED0_Out_2);
                float _Property_306B4B17_Out_0 = _Saturation;
                float _Add_27F91AF7_Out_2;
                Unity_Add_float(_Property_306B4B17_Out_0, 1, _Add_27F91AF7_Out_2);
                float3 _Saturation_8EFFDFE8_Out_2;
                Unity_Saturation_float(_Hue_BE270ED0_Out_2, _Add_27F91AF7_Out_2, _Saturation_8EFFDFE8_Out_2);
                float _Property_35742C6B_Out_0 = _Lightness;
                float3 _Add_53649F0F_Out_2;
                Unity_Add_float3(_Saturation_8EFFDFE8_Out_2, (_Property_35742C6B_Out_0.xxx), _Add_53649F0F_Out_2);
                float _Property_ABA23041_Out_0 = _AlphaClipThreshold;
                surface.Albedo = _Add_53649F0F_Out_2;
                surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
                surface.Alpha = _SampleTexture2D_F86B9939_A_7;
                surface.AlphaClipThreshold = _Property_ABA23041_Out_0;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 color : COLOR;
                float4 texcoord0 : TEXCOORD0;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


        	struct VertexOutput
        	{
        	    float2 uv           : TEXCOORD0;
        	    float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                half4 uv0 : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
        	};

            VertexOutput vert(GraphVertexInput v)
            {
                VertexOutput o = (VertexOutput)0;
        	    UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        	    // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 VertexColor = v.color;
                float4 uv0 = v.texcoord0;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;


        	    // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.uv0 = uv0;
                o.uv1 = uv1;

                o.clipPos = MetaVertexPosition(v.vertex, uv1, uv1, unity_LightmapST, unity_DynamicLightmapST);
        	    return o;
            }

            half4 frag(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 uv0 = IN.uv0;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.uv0 = uv0;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float3 Albedo = float3(0.5, 0.5, 0.5);
        		float3 Emission = 0;
        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Albedo = surf.Albedo;
                Emission = surf.Emission;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif

                MetaInput metaInput = (MetaInput)0;
                metaInput.Albedo = Albedo;
                metaInput.Emission = Emission;
                
                return MetaFragment(metaInput);
            }
            ENDHLSL
        }
        Pass
        {
        	Tags{"LightMode" = "Universal2D"}

        	// Material options generated by graph

            Blend One Zero, One Zero

            Cull Off

            ZTest LEqual

            ZWrite On

        	HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma enable_d3d11_debug_symbols
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            #pragma vertex vert
        	#pragma fragment frag

        	// Defines generated by graph
            #define _NORMALMAP 1
            #define _AlphaClip 1

        	#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
        	#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
        	#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderGraphFunctions.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float _AlphaClipThreshold;
            float _Hue;
            float _Saturation;
            float _Lightness;
            float _StiffnessVariation;
            float4 _WindDirectionAndStrength;
            float4 _Shiver;
            float _BAKEDMASK_ON;
            float _UVMASK_ON;
            float _VERTEXPOSITIONMASK_ON;
            CBUFFER_END

            TEXTURE2D(_Albedo); SAMPLER(sampler_Albedo); float4 _Albedo_TexelSize;
            TEXTURE2D(_BumpMap); SAMPLER(sampler_BumpMap); float4 _BumpMap_TexelSize;
            TEXTURE2D(_MaskMap); SAMPLER(sampler_MaskMap); float4 _MaskMap_TexelSize;
            TEXTURE2D(_ThicknessMap); SAMPLER(sampler_ThicknessMap); float4 _ThicknessMap_TexelSize;
            float4 _GlobalWindDirectionAndStrength;
            float4 _GlobalShiver;
            TEXTURE2D(_ShiverNoise); SAMPLER(sampler_ShiverNoise); float4 _ShiverNoise_TexelSize;
            TEXTURE2D(_GustNoise); SAMPLER(sampler_GustNoise); float4 _GustNoise_TexelSize;
            struct VertexDescriptionInputs
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceTangent;
                float3 WorldSpaceBiTangent;
                float3 ObjectSpacePosition;
                float3 WorldSpacePosition;
                float4 VertexColor;
                half4 uv0;
                half4 uv1;
                float3 TimeParameters;
            };

            struct SurfaceDescriptionInputs
            {
                half4 uv0;
            };


            struct Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238
            {
            };

            void SG_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238(Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238 IN, out float3 PivotInWS)
            {
                PivotInWS = SHADERGRAPH_OBJECT_POSITION;
            }

            void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
            {
                Out = lerp(A, B, T);
            }

            void Unity_Multiply_float (float4 A, float4 B, out float4 Out)
            {
                Out = A * B;
            }

            void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
            {
                RGBA = float4(R, G, B, A);
                RGB = float3(R, G, B);
                RG = float2(R, G);
            }

            void Unity_Length_float3(float3 In, out float Out)
            {
                Out = length(In);
            }

            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_Clamp_float(float In, float Min, float Max, out float Out)
            {
                Out = clamp(In, Min, Max);
            }

            void Unity_Normalize_float3(float3 In, out float3 Out)
            {
                Out = normalize(In);
            }

            void Unity_Maximum_float(float A, float B, out float Out)
            {
                Out = max(A, B);
            }

            void Unity_Multiply_float (float2 A, float2 B, out float2 Out)
            {
                Out = A * B;
            }

            void Unity_Maximum_float2(float2 A, float2 B, out float2 Out)
            {
                Out = max(A, B);
            }

            struct Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7
            {
            };

            void SG_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7(float4 Vector4_14B5A446, float4 Vector4_6887180D, float2 Vector2_F270B07E, float2 Vector2_70BD0D1B, Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7 IN, out float3 GustDirection, out float GustSpeed, out float GustStrength, out float ShiverSpeed, out float ShiverStrength)
            {
                float3 _Vector3_E24D7903_Out_0 = float3(0.7, 0, 0.3);
                float4 _Property_95651D48_Out_0 = Vector4_14B5A446;
                float4 _Property_FFEF34C6_Out_0 = Vector4_6887180D;
                float4 _Multiply_7F93D556_Out_2;
                Unity_Multiply_float(_Property_95651D48_Out_0, _Property_FFEF34C6_Out_0, _Multiply_7F93D556_Out_2);
                float _Split_1A6C2849_R_1 = _Multiply_7F93D556_Out_2[0];
                float _Split_1A6C2849_G_2 = _Multiply_7F93D556_Out_2[1];
                float _Split_1A6C2849_B_3 = _Multiply_7F93D556_Out_2[2];
                float _Split_1A6C2849_A_4 = _Multiply_7F93D556_Out_2[3];
                float4 _Combine_769EB158_RGBA_4;
                float3 _Combine_769EB158_RGB_5;
                float2 _Combine_769EB158_RG_6;
                Unity_Combine_float(_Split_1A6C2849_R_1, 0, _Split_1A6C2849_G_2, 0, _Combine_769EB158_RGBA_4, _Combine_769EB158_RGB_5, _Combine_769EB158_RG_6);
                float _Length_62815FED_Out_1;
                Unity_Length_float3(_Combine_769EB158_RGB_5, _Length_62815FED_Out_1);
                float _Multiply_A4A39D4F_Out_2;
                Unity_Multiply_float(_Length_62815FED_Out_1, 1000, _Multiply_A4A39D4F_Out_2);
                float _Clamp_4B28219D_Out_3;
                Unity_Clamp_float(_Multiply_A4A39D4F_Out_2, 0, 1, _Clamp_4B28219D_Out_3);
                float3 _Lerp_66854A50_Out_3;
                Unity_Lerp_float3(_Vector3_E24D7903_Out_0, _Combine_769EB158_RGB_5, (_Clamp_4B28219D_Out_3.xxx), _Lerp_66854A50_Out_3);
                float3 _Normalize_B2778668_Out_1;
                Unity_Normalize_float3(_Lerp_66854A50_Out_3, _Normalize_B2778668_Out_1);
                float _Maximum_A3AFA1AB_Out_2;
                Unity_Maximum_float(_Split_1A6C2849_B_3, 0.01, _Maximum_A3AFA1AB_Out_2);
                float _Maximum_FCE0058_Out_2;
                Unity_Maximum_float(0, _Split_1A6C2849_A_4, _Maximum_FCE0058_Out_2);
                float2 _Property_F062BDE_Out_0 = Vector2_F270B07E;
                float2 _Property_FB73C895_Out_0 = Vector2_70BD0D1B;
                float2 _Multiply_76AC0593_Out_2;
                Unity_Multiply_float(_Property_F062BDE_Out_0, _Property_FB73C895_Out_0, _Multiply_76AC0593_Out_2);
                float2 _Maximum_E318FF04_Out_2;
                Unity_Maximum_float2(_Multiply_76AC0593_Out_2, float2(0.01, 0.01), _Maximum_E318FF04_Out_2);
                float _Split_F437A5E0_R_1 = _Maximum_E318FF04_Out_2[0];
                float _Split_F437A5E0_G_2 = _Maximum_E318FF04_Out_2[1];
                float _Split_F437A5E0_B_3 = 0;
                float _Split_F437A5E0_A_4 = 0;
                GustDirection = _Normalize_B2778668_Out_1;
                GustSpeed = _Maximum_A3AFA1AB_Out_2;
                GustStrength = _Maximum_FCE0058_Out_2;
                ShiverSpeed = _Split_F437A5E0_R_1;
                ShiverStrength = _Split_F437A5E0_G_2;
            }

            void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A - B;
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_Fraction_float(float In, out float Out)
            {
                Out = frac(In);
            }

            void Unity_Branch_float(float Predicate, float True, float False, out float Out)
            {
                Out = lerp(False, True, Predicate);
            }

            void Unity_Add_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A + B;
            }

            void Unity_Subtract_float2(float2 A, float2 B, out float2 Out)
            {
                Out = A - B;
            }

            struct Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f
            {
            };

            void SG_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f(float Vector1_CCF53CDA, float Vector1_D95E40FE, float2 Vector2_AEE18C41, float2 Vector2_A9CE092C, float Vector1_F2ED6CCC, TEXTURE2D_PARAM(Texture2D_F14459DD, samplerTexture2D_F14459DD), Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f IN, out float GustNoise)
            {
                float2 _Property_A92CC1B7_Out_0 = Vector2_AEE18C41;
                float _Property_36B40CE_Out_0 = Vector1_D95E40FE;
                float _Multiply_9E28D3C4_Out_2;
                Unity_Multiply_float(_Property_36B40CE_Out_0, 2, _Multiply_9E28D3C4_Out_2);
                float2 _Add_C54F05FE_Out_2;
                Unity_Add_float2(_Property_A92CC1B7_Out_0, (_Multiply_9E28D3C4_Out_2.xx), _Add_C54F05FE_Out_2);
                float2 _Multiply_9CD1691E_Out_2;
                Unity_Multiply_float(_Add_C54F05FE_Out_2, float2(0.01, 0.01), _Multiply_9CD1691E_Out_2);
                float2 _Property_D05D9ECB_Out_0 = Vector2_A9CE092C;
                float _Property_8BFC9AA2_Out_0 = Vector1_CCF53CDA;
                float2 _Multiply_462DF694_Out_2;
                Unity_Multiply_float(_Property_D05D9ECB_Out_0, (_Property_8BFC9AA2_Out_0.xx), _Multiply_462DF694_Out_2);
                float _Property_4DB65C54_Out_0 = Vector1_F2ED6CCC;
                float2 _Multiply_50FD4B48_Out_2;
                Unity_Multiply_float(_Multiply_462DF694_Out_2, (_Property_4DB65C54_Out_0.xx), _Multiply_50FD4B48_Out_2);
                float2 _Subtract_B4A749C2_Out_2;
                Unity_Subtract_float2(_Multiply_9CD1691E_Out_2, _Multiply_50FD4B48_Out_2, _Subtract_B4A749C2_Out_2);
                float4 _SampleTexture2DLOD_46D09289_RGBA_0 = SAMPLE_TEXTURE2D_LOD(Texture2D_F14459DD, samplerTexture2D_F14459DD, _Subtract_B4A749C2_Out_2, 0);
                float _SampleTexture2DLOD_46D09289_R_5 = _SampleTexture2DLOD_46D09289_RGBA_0.r;
                float _SampleTexture2DLOD_46D09289_G_6 = _SampleTexture2DLOD_46D09289_RGBA_0.g;
                float _SampleTexture2DLOD_46D09289_B_7 = _SampleTexture2DLOD_46D09289_RGBA_0.b;
                float _SampleTexture2DLOD_46D09289_A_8 = _SampleTexture2DLOD_46D09289_RGBA_0.a;
                GustNoise = _SampleTexture2DLOD_46D09289_R_5;
            }

            void Unity_Power_float(float A, float B, out float Out)
            {
                Out = pow(A, B);
            }

            void Unity_OneMinus_float(float In, out float Out)
            {
                Out = 1 - In;
            }

            struct Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19
            {
            };

            void SG_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19(float2 Vector2_CA78C39A, float Vector1_279D2776, Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19 IN, out float RandomStiffness)
            {
                float2 _Property_475BFCB9_Out_0 = Vector2_CA78C39A;
                float2 _Multiply_7EE00C92_Out_2;
                Unity_Multiply_float(_Property_475BFCB9_Out_0, float2(10, 10), _Multiply_7EE00C92_Out_2);
                float _Split_A0FB144F_R_1 = _Multiply_7EE00C92_Out_2[0];
                float _Split_A0FB144F_G_2 = _Multiply_7EE00C92_Out_2[1];
                float _Split_A0FB144F_B_3 = 0;
                float _Split_A0FB144F_A_4 = 0;
                float _Multiply_2482A544_Out_2;
                Unity_Multiply_float(_Split_A0FB144F_R_1, _Split_A0FB144F_G_2, _Multiply_2482A544_Out_2);
                float _Fraction_B90029E4_Out_1;
                Unity_Fraction_float(_Multiply_2482A544_Out_2, _Fraction_B90029E4_Out_1);
                float _Power_E2B2B095_Out_2;
                Unity_Power_float(_Fraction_B90029E4_Out_1, 2, _Power_E2B2B095_Out_2);
                float _Property_91226CD6_Out_0 = Vector1_279D2776;
                float _OneMinus_A56B8867_Out_1;
                Unity_OneMinus_float(_Property_91226CD6_Out_0, _OneMinus_A56B8867_Out_1);
                float _Clamp_E85434A6_Out_3;
                Unity_Clamp_float(_Power_E2B2B095_Out_2, _OneMinus_A56B8867_Out_1, 1, _Clamp_E85434A6_Out_3);
                RandomStiffness = _Clamp_E85434A6_Out_3;
            }

            struct Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628
            {
            };

            void SG_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628(float Vector1_AFC49E6C, float Vector1_A18CF4DF, float Vector1_28AC83F8, float Vector1_E0042E1, float Vector1_1A24AAF, Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628 IN, out float GustStrength)
            {
                float _Property_9A741C0D_Out_0 = Vector1_AFC49E6C;
                float _Property_F564A485_Out_0 = Vector1_A18CF4DF;
                float _Multiply_248F3A68_Out_2;
                Unity_Multiply_float(_Property_9A741C0D_Out_0, _Property_F564A485_Out_0, _Multiply_248F3A68_Out_2);
                float _Clamp_64D749D9_Out_3;
                Unity_Clamp_float(_Multiply_248F3A68_Out_2, 0.1, 0.9, _Clamp_64D749D9_Out_3);
                float _OneMinus_BDC5FAC3_Out_1;
                Unity_OneMinus_float(_Clamp_64D749D9_Out_3, _OneMinus_BDC5FAC3_Out_1);
                float _Multiply_E3C6FEFE_Out_2;
                Unity_Multiply_float(_Multiply_248F3A68_Out_2, _OneMinus_BDC5FAC3_Out_1, _Multiply_E3C6FEFE_Out_2);
                float _Multiply_9087CA8A_Out_2;
                Unity_Multiply_float(_Multiply_E3C6FEFE_Out_2, 1.5, _Multiply_9087CA8A_Out_2);
                float _Property_C7E6777F_Out_0 = Vector1_28AC83F8;
                float _Multiply_1D329CB_Out_2;
                Unity_Multiply_float(_Multiply_9087CA8A_Out_2, _Property_C7E6777F_Out_0, _Multiply_1D329CB_Out_2);
                float _Property_84113466_Out_0 = Vector1_E0042E1;
                float _Multiply_9501294C_Out_2;
                Unity_Multiply_float(_Multiply_1D329CB_Out_2, _Property_84113466_Out_0, _Multiply_9501294C_Out_2);
                float _Property_57C5AF03_Out_0 = Vector1_1A24AAF;
                float _Multiply_E178164E_Out_2;
                Unity_Multiply_float(_Multiply_9501294C_Out_2, _Property_57C5AF03_Out_0, _Multiply_E178164E_Out_2);
                GustStrength = _Multiply_E178164E_Out_2;
            }

            void Unity_Multiply_float (float3 A, float3 B, out float3 Out)
            {
                Out = A * B;
            }

            struct Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a
            {
            };

            void SG_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a(float2 Vector2_287CB44E, float2 Vector2_2A17E6EA, float Vector1_F4B6A491, float Vector1_2C90770B, TEXTURE2D_PARAM(Texture2D_D44B4848, samplerTexture2D_D44B4848), float Vector1_AD94E9BC, Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a IN, out float3 ShiverNoise)
            {
                float2 _Property_961D8A0_Out_0 = Vector2_287CB44E;
                float _Property_A414F012_Out_0 = Vector1_AD94E9BC;
                float _Multiply_7DB42988_Out_2;
                Unity_Multiply_float(_Property_A414F012_Out_0, 2, _Multiply_7DB42988_Out_2);
                float2 _Add_4C3CF1F_Out_2;
                Unity_Add_float2(_Property_961D8A0_Out_0, (_Multiply_7DB42988_Out_2.xx), _Add_4C3CF1F_Out_2);
                float2 _Property_EBC67BC7_Out_0 = Vector2_2A17E6EA;
                float _Property_13D296B5_Out_0 = Vector1_F4B6A491;
                float2 _Multiply_BBB72061_Out_2;
                Unity_Multiply_float(_Property_EBC67BC7_Out_0, (_Property_13D296B5_Out_0.xx), _Multiply_BBB72061_Out_2);
                float _Property_3BB601E6_Out_0 = Vector1_2C90770B;
                float2 _Multiply_FF9010E8_Out_2;
                Unity_Multiply_float(_Multiply_BBB72061_Out_2, (_Property_3BB601E6_Out_0.xx), _Multiply_FF9010E8_Out_2);
                float2 _Subtract_6BF2D170_Out_2;
                Unity_Subtract_float2(_Add_4C3CF1F_Out_2, _Multiply_FF9010E8_Out_2, _Subtract_6BF2D170_Out_2);
                float4 _SampleTexture2DLOD_DBCD6404_RGBA_0 = SAMPLE_TEXTURE2D_LOD(Texture2D_D44B4848, samplerTexture2D_D44B4848, _Subtract_6BF2D170_Out_2, 0);
                float _SampleTexture2DLOD_DBCD6404_R_5 = _SampleTexture2DLOD_DBCD6404_RGBA_0.r;
                float _SampleTexture2DLOD_DBCD6404_G_6 = _SampleTexture2DLOD_DBCD6404_RGBA_0.g;
                float _SampleTexture2DLOD_DBCD6404_B_7 = _SampleTexture2DLOD_DBCD6404_RGBA_0.b;
                float _SampleTexture2DLOD_DBCD6404_A_8 = _SampleTexture2DLOD_DBCD6404_RGBA_0.a;
                float4 _Combine_E5D76A97_RGBA_4;
                float3 _Combine_E5D76A97_RGB_5;
                float2 _Combine_E5D76A97_RG_6;
                Unity_Combine_float(_SampleTexture2DLOD_DBCD6404_R_5, _SampleTexture2DLOD_DBCD6404_G_6, _SampleTexture2DLOD_DBCD6404_B_7, 0, _Combine_E5D76A97_RGBA_4, _Combine_E5D76A97_RGB_5, _Combine_E5D76A97_RG_6);
                float3 _Subtract_AA7C02E2_Out_2;
                Unity_Subtract_float3(_Combine_E5D76A97_RGB_5, float3(0.5, 0.5, 0.5), _Subtract_AA7C02E2_Out_2);
                float3 _Multiply_5BF7CBD7_Out_2;
                Unity_Multiply_float(_Subtract_AA7C02E2_Out_2, float3(2, 2, 2), _Multiply_5BF7CBD7_Out_2);
                ShiverNoise = _Multiply_5BF7CBD7_Out_2;
            }

            struct Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459
            {
            };

            void SG_CalculateShiver_2b675aaec6ba57b449ad461cc799d459(float3 Vector3_ED0F539A, float2 Vector2_84805101, float Vector1_BDF24CF7, float Vector1_839268A4, float Vector1_A8621014, float Vector1_2DBE6CC0, float Vector1_8A4EF006, float Vector1_ED935C73, Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459 IN, out float3 ShiverDirection, out float ShiverStrength)
            {
                float3 _Property_FC94AEBB_Out_0 = Vector3_ED0F539A;
                float _Property_4FE2271A_Out_0 = Vector1_BDF24CF7;
                float4 _Combine_328044F1_RGBA_4;
                float3 _Combine_328044F1_RGB_5;
                float2 _Combine_328044F1_RG_6;
                Unity_Combine_float(1, _Property_4FE2271A_Out_0, 1, 0, _Combine_328044F1_RGBA_4, _Combine_328044F1_RGB_5, _Combine_328044F1_RG_6);
                float3 _Multiply_4FCE02F7_Out_2;
                Unity_Multiply_float(_Property_FC94AEBB_Out_0, _Combine_328044F1_RGB_5, _Multiply_4FCE02F7_Out_2);
                float2 _Property_77EED0A8_Out_0 = Vector2_84805101;
                float _Split_2D66AF35_R_1 = _Property_77EED0A8_Out_0[0];
                float _Split_2D66AF35_G_2 = _Property_77EED0A8_Out_0[1];
                float _Split_2D66AF35_B_3 = 0;
                float _Split_2D66AF35_A_4 = 0;
                float4 _Combine_C2861A09_RGBA_4;
                float3 _Combine_C2861A09_RGB_5;
                float2 _Combine_C2861A09_RG_6;
                Unity_Combine_float(_Split_2D66AF35_R_1, _Property_4FE2271A_Out_0, _Split_2D66AF35_G_2, 0, _Combine_C2861A09_RGBA_4, _Combine_C2861A09_RGB_5, _Combine_C2861A09_RG_6);
                float3 _Lerp_A6B0BE86_Out_3;
                Unity_Lerp_float3(_Multiply_4FCE02F7_Out_2, _Combine_C2861A09_RGB_5, float3(0.5, 0.5, 0.5), _Lerp_A6B0BE86_Out_3);
                float _Property_BBBC9C1B_Out_0 = Vector1_839268A4;
                float _Length_F022B321_Out_1;
                Unity_Length_float3(_Multiply_4FCE02F7_Out_2, _Length_F022B321_Out_1);
                float _Multiply_BFD84B03_Out_2;
                Unity_Multiply_float(_Length_F022B321_Out_1, 0.5, _Multiply_BFD84B03_Out_2);
                float _Multiply_3564B68A_Out_2;
                Unity_Multiply_float(_Property_BBBC9C1B_Out_0, _Multiply_BFD84B03_Out_2, _Multiply_3564B68A_Out_2);
                float _Add_83285742_Out_2;
                Unity_Add_float(_Multiply_3564B68A_Out_2, _Length_F022B321_Out_1, _Add_83285742_Out_2);
                float _Property_45D94B1_Out_0 = Vector1_2DBE6CC0;
                float _Multiply_EA43D494_Out_2;
                Unity_Multiply_float(_Add_83285742_Out_2, _Property_45D94B1_Out_0, _Multiply_EA43D494_Out_2);
                float _Clamp_C109EA71_Out_3;
                Unity_Clamp_float(_Multiply_EA43D494_Out_2, 0.1, 0.9, _Clamp_C109EA71_Out_3);
                float _OneMinus_226F3377_Out_1;
                Unity_OneMinus_float(_Clamp_C109EA71_Out_3, _OneMinus_226F3377_Out_1);
                float _Multiply_8680628F_Out_2;
                Unity_Multiply_float(_Multiply_EA43D494_Out_2, _OneMinus_226F3377_Out_1, _Multiply_8680628F_Out_2);
                float _Multiply_B14E644_Out_2;
                Unity_Multiply_float(_Multiply_8680628F_Out_2, 1.5, _Multiply_B14E644_Out_2);
                float _Property_7F61FC78_Out_0 = Vector1_A8621014;
                float _Multiply_C89CF7DC_Out_2;
                Unity_Multiply_float(_Multiply_B14E644_Out_2, _Property_7F61FC78_Out_0, _Multiply_C89CF7DC_Out_2);
                float _Property_2BD306B6_Out_0 = Vector1_8A4EF006;
                float _Multiply_E5D34DCC_Out_2;
                Unity_Multiply_float(_Multiply_C89CF7DC_Out_2, _Property_2BD306B6_Out_0, _Multiply_E5D34DCC_Out_2);
                float _Property_DBC71A4F_Out_0 = Vector1_ED935C73;
                float _Multiply_BCACDD38_Out_2;
                Unity_Multiply_float(_Multiply_E5D34DCC_Out_2, _Property_DBC71A4F_Out_0, _Multiply_BCACDD38_Out_2);
                ShiverDirection = _Lerp_A6B0BE86_Out_3;
                ShiverStrength = _Multiply_BCACDD38_Out_2;
            }

            struct Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364
            {
            };

            void SG_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364(float3 Vector3_829210A7, float3 Vector3_1A016C4A, float Vector1_31372BF, float Vector1_E57895AF, TEXTURE2D_PARAM(Texture2D_65F71447, samplerTexture2D_65F71447), float Vector1_8836FB6A, TEXTURE2D_PARAM(Texture2D_4A3BDB6, samplerTexture2D_4A3BDB6), float Vector1_14E206AE, float Vector1_7090E96C, float Vector1_51722AC, float Vector1_A3894D2, float Vector1_6F0C3A5A, float Vector1_2D1F6C2F, float Vector1_347751CA, Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364 IN, out float GustStrength, out float ShiverStrength, out float3 ShiverDirection)
            {
                float _Property_5C7F4A8C_Out_0 = Vector1_31372BF;
                float _Property_142FEDC3_Out_0 = Vector1_347751CA;
                float3 _Property_D2FC65C3_Out_0 = Vector3_829210A7;
                float _Split_8E347DCF_R_1 = _Property_D2FC65C3_Out_0[0];
                float _Split_8E347DCF_G_2 = _Property_D2FC65C3_Out_0[1];
                float _Split_8E347DCF_B_3 = _Property_D2FC65C3_Out_0[2];
                float _Split_8E347DCF_A_4 = 0;
                float4 _Combine_9B5A76B7_RGBA_4;
                float3 _Combine_9B5A76B7_RGB_5;
                float2 _Combine_9B5A76B7_RG_6;
                Unity_Combine_float(_Split_8E347DCF_R_1, _Split_8E347DCF_B_3, 0, 0, _Combine_9B5A76B7_RGBA_4, _Combine_9B5A76B7_RGB_5, _Combine_9B5A76B7_RG_6);
                float3 _Property_5653999E_Out_0 = Vector3_1A016C4A;
                float _Split_B9CBBFE5_R_1 = _Property_5653999E_Out_0[0];
                float _Split_B9CBBFE5_G_2 = _Property_5653999E_Out_0[1];
                float _Split_B9CBBFE5_B_3 = _Property_5653999E_Out_0[2];
                float _Split_B9CBBFE5_A_4 = 0;
                float4 _Combine_DC44394B_RGBA_4;
                float3 _Combine_DC44394B_RGB_5;
                float2 _Combine_DC44394B_RG_6;
                Unity_Combine_float(_Split_B9CBBFE5_R_1, _Split_B9CBBFE5_B_3, 0, 0, _Combine_DC44394B_RGBA_4, _Combine_DC44394B_RGB_5, _Combine_DC44394B_RG_6);
                float _Property_3221EFCE_Out_0 = Vector1_E57895AF;
                Bindings_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f _GustNoiseAtPosition_3B28852B;
                float _GustNoiseAtPosition_3B28852B_GustNoise_0;
                SG_GustNoiseAtPosition_3a62cb513a478e64d9de042732615b0f(_Property_5C7F4A8C_Out_0, _Property_142FEDC3_Out_0, _Combine_9B5A76B7_RG_6, _Combine_DC44394B_RG_6, _Property_3221EFCE_Out_0, TEXTURE2D_ARGS(Texture2D_65F71447, samplerTexture2D_65F71447), _GustNoiseAtPosition_3B28852B, _GustNoiseAtPosition_3B28852B_GustNoise_0);
                float _Property_1B306054_Out_0 = Vector1_A3894D2;
                float _Property_1FBC768_Out_0 = Vector1_51722AC;
                float _Property_9FB10D19_Out_0 = Vector1_14E206AE;
                Bindings_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19 _RandomStiffnessAtPosition_C9AD50AB;
                float _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0;
                SG_RandomStiffnessAtPosition_54185eec8ce79f44f864454f4caf0b19(_Combine_9B5A76B7_RG_6, _Property_9FB10D19_Out_0, _RandomStiffnessAtPosition_C9AD50AB, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0);
                float _Property_EE5A603D_Out_0 = Vector1_7090E96C;
                Bindings_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628 _CalculateGustStrength_E2853C74;
                float _CalculateGustStrength_E2853C74_GustStrength_0;
                SG_CalculateGustStrength_37587ae2cefd5034ebbc219dea66a628(_GustNoiseAtPosition_3B28852B_GustNoise_0, _Property_1B306054_Out_0, _Property_1FBC768_Out_0, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0, _Property_EE5A603D_Out_0, _CalculateGustStrength_E2853C74, _CalculateGustStrength_E2853C74_GustStrength_0);
                float _Property_DFB3FCE0_Out_0 = Vector1_31372BF;
                float _Property_8A8735CC_Out_0 = Vector1_8836FB6A;
                Bindings_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a _ShiverNoiseAtPosition_35F9220A;
                float3 _ShiverNoiseAtPosition_35F9220A_ShiverNoise_0;
                SG_ShiverNoiseAtPosition_677cf303a0132864e98cbf35206e8f1a(_Combine_9B5A76B7_RG_6, _Combine_DC44394B_RG_6, _Property_DFB3FCE0_Out_0, _Property_8A8735CC_Out_0, TEXTURE2D_ARGS(Texture2D_4A3BDB6, samplerTexture2D_4A3BDB6), _Property_142FEDC3_Out_0, _ShiverNoiseAtPosition_35F9220A, _ShiverNoiseAtPosition_35F9220A_ShiverNoise_0);
                float _Property_65F19953_Out_0 = Vector1_6F0C3A5A;
                float _Property_3A2F45FE_Out_0 = Vector1_51722AC;
                float _Property_98EF73E5_Out_0 = Vector1_2D1F6C2F;
                float _Property_6A278DE2_Out_0 = Vector1_7090E96C;
                Bindings_CalculateShiver_2b675aaec6ba57b449ad461cc799d459 _CalculateShiver_799DE4CB;
                float3 _CalculateShiver_799DE4CB_ShiverDirection_0;
                float _CalculateShiver_799DE4CB_ShiverStrength_1;
                SG_CalculateShiver_2b675aaec6ba57b449ad461cc799d459(_ShiverNoiseAtPosition_35F9220A_ShiverNoise_0, _Combine_DC44394B_RG_6, _Property_65F19953_Out_0, _CalculateGustStrength_E2853C74_GustStrength_0, _Property_3A2F45FE_Out_0, _Property_98EF73E5_Out_0, _Property_6A278DE2_Out_0, _RandomStiffnessAtPosition_C9AD50AB_RandomStiffness_0, _CalculateShiver_799DE4CB, _CalculateShiver_799DE4CB_ShiverDirection_0, _CalculateShiver_799DE4CB_ShiverStrength_1);
                GustStrength = _CalculateGustStrength_E2853C74_GustStrength_0;
                ShiverStrength = _CalculateShiver_799DE4CB_ShiverStrength_1;
                ShiverDirection = _CalculateShiver_799DE4CB_ShiverDirection_0;
            }

            void Unity_Add_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A + B;
            }

            struct Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01
            {
                float3 ObjectSpacePosition;
            };

            void SG_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01(float3 Vector3_C96069F9, float Vector1_A5EB719C, float Vector1_4D1D3B1A, float3 Vector3_C80E97FF, float3 Vector3_821C320A, float3 Vector3_4BF0DC64, Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01 IN, out float3 WorldPosition)
            {
                float3 _Property_65372844_Out_0 = Vector3_4BF0DC64;
                float3 _Property_7205E35B_Out_0 = Vector3_821C320A;
                float _Property_916D8D52_Out_0 = Vector1_4D1D3B1A;
                float3 _Multiply_CF9DF1B5_Out_2;
                Unity_Multiply_float(_Property_7205E35B_Out_0, (_Property_916D8D52_Out_0.xxx), _Multiply_CF9DF1B5_Out_2);
                float3 _Multiply_57D2E5C7_Out_2;
                Unity_Multiply_float(_Multiply_CF9DF1B5_Out_2, float3(10, 10, 10), _Multiply_57D2E5C7_Out_2);
                float3 _Add_F265DF09_Out_2;
                Unity_Add_float3(_Property_65372844_Out_0, _Multiply_57D2E5C7_Out_2, _Add_F265DF09_Out_2);
                float3 _Property_806C350F_Out_0 = Vector3_C96069F9;
                float _Property_D017A08E_Out_0 = Vector1_A5EB719C;
                float3 _Multiply_99498CF9_Out_2;
                Unity_Multiply_float(_Property_806C350F_Out_0, (_Property_D017A08E_Out_0.xxx), _Multiply_99498CF9_Out_2);
                float _Split_A5777330_R_1 = IN.ObjectSpacePosition[0];
                float _Split_A5777330_G_2 = IN.ObjectSpacePosition[1];
                float _Split_A5777330_B_3 = IN.ObjectSpacePosition[2];
                float _Split_A5777330_A_4 = 0;
                float _Clamp_C4364CA5_Out_3;
                Unity_Clamp_float(_Split_A5777330_G_2, 0, 1, _Clamp_C4364CA5_Out_3);
                float3 _Multiply_ADC4C2A_Out_2;
                Unity_Multiply_float(_Multiply_99498CF9_Out_2, (_Clamp_C4364CA5_Out_3.xxx), _Multiply_ADC4C2A_Out_2);
                float3 _Multiply_49835441_Out_2;
                Unity_Multiply_float(_Multiply_ADC4C2A_Out_2, float3(10, 10, 10), _Multiply_49835441_Out_2);
                float3 _Add_B14AAE70_Out_2;
                Unity_Add_float3(_Add_F265DF09_Out_2, _Multiply_49835441_Out_2, _Add_B14AAE70_Out_2);
                WorldPosition = _Add_B14AAE70_Out_2;
            }

            struct Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549
            {
                float3 WorldSpaceNormal;
                float3 WorldSpaceTangent;
                float3 WorldSpaceBiTangent;
            };

            void SG_WorldToObject_c1006c77aa2ba8543ab0d5302579f549(float3 Vector3_AAF445D6, Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549 IN, out float3 ObjectPosition)
            {
                float3 _Property_51DA8EE_Out_0 = Vector3_AAF445D6;
                float3 _Transform_6FDB2E47_Out_1 = TransformWorldToObject(_Property_51DA8EE_Out_0.xyz);
                ObjectPosition = _Transform_6FDB2E47_Out_1;
            }

            void Unity_Hue_Normalized_float(float3 In, float Offset, out float3 Out)
            {
                // RGB to HSV
                float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
                float4 P = lerp(float4(In.bg, K.wz), float4(In.gb, K.xy), step(In.b, In.g));
                float4 Q = lerp(float4(P.xyw, In.r), float4(In.r, P.yzx), step(P.x, In.r));
                float D = Q.x - min(Q.w, Q.y);
                float E = 1e-10;
                float3 hsv = float3(abs(Q.z + (Q.w - Q.y)/(6.0 * D + E)), D / (Q.x + E), Q.x);

                float hue = hsv.x + Offset;
                hsv.x = (hue < 0)
                        ? hue + 1
                        : (hue > 1)
                            ? hue - 1
                            : hue;

                // HSV to RGB
                float4 K2 = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                float3 P2 = abs(frac(hsv.xxx + K2.xyz) * 6.0 - K2.www);
                Out = hsv.z * lerp(K2.xxx, saturate(P2 - K2.xxx), hsv.y);
            }

            void Unity_Saturation_float(float3 In, float Saturation, out float3 Out)
            {
                float luma = dot(In, float3(0.2126729, 0.7151522, 0.0721750));
                Out =  luma.xxx + Saturation.xxx * (In - luma.xxx);
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                Bindings_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238 _GetPivotInWorldSpace_73F19E42;
                float3 _GetPivotInWorldSpace_73F19E42_PivotInWS_0;
                SG_GetPivotInWorldSpace_1854f41e48e6c5e4eb69a62e216c3238(_GetPivotInWorldSpace_73F19E42, _GetPivotInWorldSpace_73F19E42_PivotInWS_0);
                float _Split_64420219_R_1 = IN.VertexColor[0];
                float _Split_64420219_G_2 = IN.VertexColor[1];
                float _Split_64420219_B_3 = IN.VertexColor[2];
                float _Split_64420219_A_4 = IN.VertexColor[3];
                float3 _Lerp_4531CF63_Out_3;
                Unity_Lerp_float3(_GetPivotInWorldSpace_73F19E42_PivotInWS_0, IN.WorldSpacePosition, (_Split_64420219_G_2.xxx), _Lerp_4531CF63_Out_3);
                float4 _Property_D6662DC6_Out_0 = _GlobalWindDirectionAndStrength;
                float4 _Property_9515B228_Out_0 = _WindDirectionAndStrength;
                float4 _Property_9A1EF240_Out_0 = _GlobalShiver;
                float4 _Property_777C8DB2_Out_0 = _Shiver;
                Bindings_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7 _GlobalWindParameters_B547F135;
                float3 _GlobalWindParameters_B547F135_GustDirection_0;
                float _GlobalWindParameters_B547F135_GustSpeed_1;
                float _GlobalWindParameters_B547F135_GustStrength_2;
                float _GlobalWindParameters_B547F135_ShiverSpeed_3;
                float _GlobalWindParameters_B547F135_ShiverStrength_4;
                SG_GlobalWindParameters_a3ea19cf24a41654f9e670ebabad18b7(_Property_D6662DC6_Out_0, _Property_9515B228_Out_0, (_Property_9A1EF240_Out_0.xy), (_Property_777C8DB2_Out_0.xy), _GlobalWindParameters_B547F135, _GlobalWindParameters_B547F135_GustDirection_0, _GlobalWindParameters_B547F135_GustSpeed_1, _GlobalWindParameters_B547F135_GustStrength_2, _GlobalWindParameters_B547F135_ShiverSpeed_3, _GlobalWindParameters_B547F135_ShiverStrength_4);
                float _Property_5F3A390D_Out_0 = _BAKEDMASK_ON;
                float3 _Subtract_BF2A75CD_Out_2;
                Unity_Subtract_float3(IN.WorldSpacePosition, _GetPivotInWorldSpace_73F19E42_PivotInWS_0, _Subtract_BF2A75CD_Out_2);
                float _Split_29C81DE4_R_1 = _Subtract_BF2A75CD_Out_2[0];
                float _Split_29C81DE4_G_2 = _Subtract_BF2A75CD_Out_2[1];
                float _Split_29C81DE4_B_3 = _Subtract_BF2A75CD_Out_2[2];
                float _Split_29C81DE4_A_4 = 0;
                float _Add_6A47DB4F_Out_2;
                Unity_Add_float(_Split_29C81DE4_R_1, _Split_29C81DE4_G_2, _Add_6A47DB4F_Out_2);
                float _Add_EC455B5D_Out_2;
                Unity_Add_float(_Add_6A47DB4F_Out_2, _Split_29C81DE4_B_3, _Add_EC455B5D_Out_2);
                float _Multiply_F013BB8B_Out_2;
                Unity_Multiply_float(_Add_EC455B5D_Out_2, 0.4, _Multiply_F013BB8B_Out_2);
                float _Fraction_7D389816_Out_1;
                Unity_Fraction_float(_Multiply_F013BB8B_Out_2, _Fraction_7D389816_Out_1);
                float _Multiply_776D3DAF_Out_2;
                Unity_Multiply_float(_Fraction_7D389816_Out_1, 0.15, _Multiply_776D3DAF_Out_2);
                float _Split_E4BB9FEC_R_1 = IN.VertexColor[0];
                float _Split_E4BB9FEC_G_2 = IN.VertexColor[1];
                float _Split_E4BB9FEC_B_3 = IN.VertexColor[2];
                float _Split_E4BB9FEC_A_4 = IN.VertexColor[3];
                float _Multiply_BC8988C3_Out_2;
                Unity_Multiply_float(_Multiply_776D3DAF_Out_2, _Split_E4BB9FEC_G_2, _Multiply_BC8988C3_Out_2);
                float _Multiply_EC5FE292_Out_2;
                Unity_Multiply_float(_Split_E4BB9FEC_R_1, 0.3, _Multiply_EC5FE292_Out_2);
                float _Add_A8423510_Out_2;
                Unity_Add_float(_Multiply_BC8988C3_Out_2, _Multiply_EC5FE292_Out_2, _Add_A8423510_Out_2);
                float _Add_CE74358C_Out_2;
                Unity_Add_float(_Add_A8423510_Out_2, IN.TimeParameters.x, _Add_CE74358C_Out_2);
                float _Multiply_1CE438D_Out_2;
                Unity_Multiply_float(_Split_E4BB9FEC_G_2, 0.5, _Multiply_1CE438D_Out_2);
                float _Add_8718B88C_Out_2;
                Unity_Add_float(_Add_CE74358C_Out_2, _Multiply_1CE438D_Out_2, _Add_8718B88C_Out_2);
                float _Property_DBA903E3_Out_0 = _UVMASK_ON;
                float4 _UV_64D01E18_Out_0 = IN.uv0;
                float _Split_A5DFBEBE_R_1 = _UV_64D01E18_Out_0[0];
                float _Split_A5DFBEBE_G_2 = _UV_64D01E18_Out_0[1];
                float _Split_A5DFBEBE_B_3 = _UV_64D01E18_Out_0[2];
                float _Split_A5DFBEBE_A_4 = _UV_64D01E18_Out_0[3];
                float _Multiply_C943DA5C_Out_2;
                Unity_Multiply_float(_Split_A5DFBEBE_G_2, 0.1, _Multiply_C943DA5C_Out_2);
                float _Branch_12012434_Out_3;
                Unity_Branch_float(_Property_DBA903E3_Out_0, _Multiply_C943DA5C_Out_2, 0, _Branch_12012434_Out_3);
                float _Add_922F2E64_Out_2;
                Unity_Add_float(IN.TimeParameters.x, _Branch_12012434_Out_3, _Add_922F2E64_Out_2);
                float _Multiply_2E689843_Out_2;
                Unity_Multiply_float(_Multiply_776D3DAF_Out_2, 0.5, _Multiply_2E689843_Out_2);
                float _Add_ED1EE4DB_Out_2;
                Unity_Add_float(_Add_922F2E64_Out_2, _Multiply_2E689843_Out_2, _Add_ED1EE4DB_Out_2);
                float _Branch_291934CD_Out_3;
                Unity_Branch_float(_Property_5F3A390D_Out_0, _Add_8718B88C_Out_2, _Add_ED1EE4DB_Out_2, _Branch_291934CD_Out_3);
                float _Property_267CF497_Out_0 = _StiffnessVariation;
                float _Property_4FB02E51_Out_0 = _BAKEDMASK_ON;
                float4 _UV_6482E163_Out_0 = IN.uv1;
                float _Split_2D1A67CF_R_1 = _UV_6482E163_Out_0[0];
                float _Split_2D1A67CF_G_2 = _UV_6482E163_Out_0[1];
                float _Split_2D1A67CF_B_3 = _UV_6482E163_Out_0[2];
                float _Split_2D1A67CF_A_4 = _UV_6482E163_Out_0[3];
                float _Multiply_F7BD1E76_Out_2;
                Unity_Multiply_float(_Split_2D1A67CF_R_1, _Split_2D1A67CF_G_2, _Multiply_F7BD1E76_Out_2);
                float _Property_B1FAFDBF_Out_0 = _UVMASK_ON;
                float4 _UV_8F58F10B_Out_0 = IN.uv0;
                float _Split_BD0858B3_R_1 = _UV_8F58F10B_Out_0[0];
                float _Split_BD0858B3_G_2 = _UV_8F58F10B_Out_0[1];
                float _Split_BD0858B3_B_3 = _UV_8F58F10B_Out_0[2];
                float _Split_BD0858B3_A_4 = _UV_8F58F10B_Out_0[3];
                float _Multiply_3FAD9403_Out_2;
                Unity_Multiply_float(_Split_BD0858B3_G_2, 0.2, _Multiply_3FAD9403_Out_2);
                float _Branch_3AF3832A_Out_3;
                Unity_Branch_float(_Property_B1FAFDBF_Out_0, _Multiply_3FAD9403_Out_2, 1, _Branch_3AF3832A_Out_3);
                float _Branch_F921E5A9_Out_3;
                Unity_Branch_float(_Property_4FB02E51_Out_0, _Multiply_F7BD1E76_Out_2, _Branch_3AF3832A_Out_3, _Branch_F921E5A9_Out_3);
                Bindings_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364 _GetWindStrength_5806EF0A;
                float _GetWindStrength_5806EF0A_GustStrength_0;
                float _GetWindStrength_5806EF0A_ShiverStrength_1;
                float3 _GetWindStrength_5806EF0A_ShiverDirection_2;
                SG_GetWindStrength_e01e2c42537f3fa47bc76ed6e6291364(_Lerp_4531CF63_Out_3, _GlobalWindParameters_B547F135_GustDirection_0, _Branch_291934CD_Out_3, _GlobalWindParameters_B547F135_GustSpeed_1, TEXTURE2D_ARGS(_GustNoise, sampler_GustNoise), _GlobalWindParameters_B547F135_ShiverSpeed_3, TEXTURE2D_ARGS(_ShiverNoise, sampler_ShiverNoise), _Property_267CF497_Out_0, 1, _Branch_F921E5A9_Out_3, _GlobalWindParameters_B547F135_GustStrength_2, 0.2, _GlobalWindParameters_B547F135_ShiverStrength_4, 0, _GetWindStrength_5806EF0A, _GetWindStrength_5806EF0A_GustStrength_0, _GetWindStrength_5806EF0A_ShiverStrength_1, _GetWindStrength_5806EF0A_ShiverDirection_2);
                Bindings_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01 _ApplyTreeWindDisplacement_8E73FF2E;
                _ApplyTreeWindDisplacement_8E73FF2E.ObjectSpacePosition = IN.ObjectSpacePosition;
                float3 _ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0;
                SG_ApplyTreeWindDisplacement_a14dde8a0bb9d794f95b12472fe09b01(_GetWindStrength_5806EF0A_ShiverDirection_2, _GetWindStrength_5806EF0A_ShiverStrength_1, _GetWindStrength_5806EF0A_GustStrength_0, _GetPivotInWorldSpace_73F19E42_PivotInWS_0, _GlobalWindParameters_B547F135_GustDirection_0, IN.WorldSpacePosition, _ApplyTreeWindDisplacement_8E73FF2E, _ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0);
                Bindings_WorldToObject_c1006c77aa2ba8543ab0d5302579f549 _WorldToObject_628B231E;
                _WorldToObject_628B231E.WorldSpaceNormal = IN.WorldSpaceNormal;
                _WorldToObject_628B231E.WorldSpaceTangent = IN.WorldSpaceTangent;
                _WorldToObject_628B231E.WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 _WorldToObject_628B231E_ObjectPosition_1;
                SG_WorldToObject_c1006c77aa2ba8543ab0d5302579f549(_ApplyTreeWindDisplacement_8E73FF2E_WorldPosition_0, _WorldToObject_628B231E, _WorldToObject_628B231E_ObjectPosition_1);
                description.Position = _WorldToObject_628B231E_ObjectPosition_1;
                return description;
            }

            struct SurfaceDescription
            {
                float3 Albedo;
                float3 Normal;
                float3 Emission;
                float Metallic;
                float Smoothness;
                float Occlusion;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float4 _SampleTexture2D_F86B9939_RGBA_0 = SAMPLE_TEXTURE2D(_Albedo, sampler_Albedo, IN.uv0.xy);
                float _SampleTexture2D_F86B9939_R_4 = _SampleTexture2D_F86B9939_RGBA_0.r;
                float _SampleTexture2D_F86B9939_G_5 = _SampleTexture2D_F86B9939_RGBA_0.g;
                float _SampleTexture2D_F86B9939_B_6 = _SampleTexture2D_F86B9939_RGBA_0.b;
                float _SampleTexture2D_F86B9939_A_7 = _SampleTexture2D_F86B9939_RGBA_0.a;
                float _Property_667D0001_Out_0 = _Hue;
                float3 _Hue_BE270ED0_Out_2;
                Unity_Hue_Normalized_float((_SampleTexture2D_F86B9939_RGBA_0.xyz), _Property_667D0001_Out_0, _Hue_BE270ED0_Out_2);
                float _Property_306B4B17_Out_0 = _Saturation;
                float _Add_27F91AF7_Out_2;
                Unity_Add_float(_Property_306B4B17_Out_0, 1, _Add_27F91AF7_Out_2);
                float3 _Saturation_8EFFDFE8_Out_2;
                Unity_Saturation_float(_Hue_BE270ED0_Out_2, _Add_27F91AF7_Out_2, _Saturation_8EFFDFE8_Out_2);
                float _Property_35742C6B_Out_0 = _Lightness;
                float3 _Add_53649F0F_Out_2;
                Unity_Add_float3(_Saturation_8EFFDFE8_Out_2, (_Property_35742C6B_Out_0.xxx), _Add_53649F0F_Out_2);
                float4 _SampleTexture2D_12F932C1_RGBA_0 = SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, IN.uv0.xy);
                _SampleTexture2D_12F932C1_RGBA_0.rgb = UnpackNormalmapRGorAG(_SampleTexture2D_12F932C1_RGBA_0);
                float _SampleTexture2D_12F932C1_R_4 = _SampleTexture2D_12F932C1_RGBA_0.r;
                float _SampleTexture2D_12F932C1_G_5 = _SampleTexture2D_12F932C1_RGBA_0.g;
                float _SampleTexture2D_12F932C1_B_6 = _SampleTexture2D_12F932C1_RGBA_0.b;
                float _SampleTexture2D_12F932C1_A_7 = _SampleTexture2D_12F932C1_RGBA_0.a;
                float4 _SampleTexture2D_FFEA8409_RGBA_0 = SAMPLE_TEXTURE2D(_MaskMap, sampler_MaskMap, IN.uv0.xy);
                float _SampleTexture2D_FFEA8409_R_4 = _SampleTexture2D_FFEA8409_RGBA_0.r;
                float _SampleTexture2D_FFEA8409_G_5 = _SampleTexture2D_FFEA8409_RGBA_0.g;
                float _SampleTexture2D_FFEA8409_B_6 = _SampleTexture2D_FFEA8409_RGBA_0.b;
                float _SampleTexture2D_FFEA8409_A_7 = _SampleTexture2D_FFEA8409_RGBA_0.a;
                float _Property_ABA23041_Out_0 = _AlphaClipThreshold;
                surface.Albedo = _Add_53649F0F_Out_2;
                surface.Normal = (_SampleTexture2D_12F932C1_RGBA_0.xyz);
                surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
                surface.Metallic = _SampleTexture2D_FFEA8409_R_4;
                surface.Smoothness = _SampleTexture2D_FFEA8409_A_7;
                surface.Occlusion = _SampleTexture2D_FFEA8409_G_5;
                surface.Alpha = _SampleTexture2D_F86B9939_A_7;
                surface.AlphaClipThreshold = _Property_ABA23041_Out_0;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 color : COLOR;
                float4 texcoord0 : TEXCOORD0;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


        	struct GraphVertexOutput
            {
                float4 clipPos                : SV_POSITION;
        		// Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                half4 uv0 : TEXCOORD8;
                half4 uv1 : TEXCOORD9;

            	UNITY_VERTEX_OUTPUT_STEREO
            };

            GraphVertexOutput vert (GraphVertexInput v)
        	{
        		GraphVertexOutput o = (GraphVertexOutput)0;
        		UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        		// Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 VertexColor = v.color;
                float4 uv0 = v.texcoord0;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

        		VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

        		// Vertex description inputs defined by graph
                vdi.WorldSpaceNormal = WorldSpaceNormal;
                vdi.WorldSpaceTangent = WorldSpaceTangent;
                vdi.WorldSpaceBiTangent = WorldSpaceBiTangent;
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.WorldSpacePosition = WorldSpacePosition;
                vdi.VertexColor = VertexColor;
                vdi.uv0 = uv0;
                vdi.uv1 = uv1;
                vdi.TimeParameters = _TimeParameters.xyz;

        	    VertexDescription vd = PopulateVertexData(vdi);
        		v.vertex.xyz = vd.Position;

        		// Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.uv0 = uv0;
                o.uv1 = uv1;


                VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);
        	    o.clipPos = vertexInput.positionCS;

        		return o;
        	}

        	half4 frag (GraphVertexOutput IN ) : SV_Target
            {
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

        		// Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float4 uv0 = IN.uv0;
                float4 uv1 = IN.uv1;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.uv0 = uv0;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float3 Albedo = float3(0.5, 0.5, 0.5);
        		float3 Specular = float3(0, 0, 0);
        		float Metallic = 1;
        		float3 Normal = float3(0, 0, 1);
        		float3 Emission = 0;
        		float Smoothness = 0.5;
        		float Occlusion = 1;
        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Albedo = surf.Albedo;
                Normal = surf.Normal;
                Emission = surf.Emission;
                Metallic = surf.Metallic;
                Smoothness = surf.Smoothness;
                Occlusion = surf.Occlusion;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;


        		// Computes fog factor per-vertex
            	half4 color = half4(Albedo, Alpha);

        #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
        		return color;
            }

        	ENDHLSL
        }
    }
    CustomEditor "VisualDesignCafe.Nature.Editor.NatureMaterialEditor"
    FallBack "Hidden/InternalErrorShader"
}
